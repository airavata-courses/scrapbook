{"version":3,"file":"ngxs-reset-plugin.js","sources":["../../../src/lib/internals.ts","../../../src/lib/reset.service.ts","../../../src/lib/reset.handler.ts","../../../src/lib/symbols.ts","../../../src/lib/reset.plugin.ts","../../../src/lib/reset.module.ts"],"names":[],"mappings":"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","sourcesContent":["export interface MetaDataModel {\n  name: string | null;\n  defaults: any;\n  path: string | null;\n  children?: StateClass[];\n}\n\n/**\n * a simplified implementation of NGXS StateClass interface\n */\nexport interface StateClass<T = {}> {\n  NGXS_META?: MetaDataModel;\n\n  new (...args: any[]): T;\n}\n\nexport function noop() {\n  return () => {};\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ResetService {\n  initialState: any;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, InitState, ofActionSuccessful, Store, UpdateState } from '@ngxs/store';\nimport { take } from 'rxjs/operators';\nimport { ResetService } from './reset.service';\n\n@Injectable()\nexport class ResetHandler {\n  constructor(\n    private actions$: Actions,\n    private store: Store,\n    private resetService: ResetService,\n  ) {\n    this.actions$\n      .pipe(\n        ofActionSuccessful(InitState),\n        take(1),\n      )\n      .subscribe(() => (this.resetService.initialState = this.store.snapshot()));\n\n    this.actions$.pipe(ofActionSuccessful(UpdateState)).subscribe(\n      ({ addedStates }) =>\n        (this.resetService.initialState = {\n          ...this.resetService.initialState,\n          ...addedStates,\n        }),\n    );\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { getStoreMetadata } from '@ngxs/store';\nimport { MetaDataModel, StateClass } from './internals';\n\nexport type OverwriteTuple = [StateClass, any];\ntype MetaTuple = [MetaDataModel[], any[]];\ntype MetaListReducer = (\n  acc: MetaDataModel[],\n  state: StateClass,\n) => MetaDataModel[];\ntype MetaTupleReducer = (\n  acc: MetaTuple,\n  [state, value]: OverwriteTuple,\n) => MetaTuple;\n\n/**\n * Action to clear all state except given state(s)\n */\nexport class StateClear {\n  static readonly type = '@@CLEAR_STATE';\n  public readonly statesToKeep: MetaDataModel[];\n\n  // The duplication is necessary for TypeScript\n  // tslint:disable-next-line:unified-signatures\n  constructor(...statesToKeep: StateClass[]);\n  constructor();\n  constructor(...statesToKeep: StateClass[]) {\n    const reducer = createMetaDataListReducer(isDevMode());\n    this.statesToKeep = statesToKeep.reduce<MetaDataModel[]>(reducer, []);\n  }\n}\n\n/**\n * Action to reset given state(s) to defaults\n */\nexport class StateReset {\n  static readonly type = '@@RESET_STATE';\n  public readonly statesToReset: MetaDataModel[];\n  constructor(...statesToReset: StateClass[]) {\n    const reducer = createMetaDataListReducer(isDevMode());\n    this.statesToReset = statesToReset.reduce<MetaDataModel[]>(reducer, []);\n  }\n}\n\n/**\n * Action to reset all states expect given state(s) to defaults\n */\nexport class StateResetAll {\n  static readonly type = '@@RESET_STATE_ALL';\n  public readonly statesToKeep: MetaDataModel[];\n\n  // The duplication is necessary for TypeScript\n  // tslint:disable-next-line:unified-signatures\n  constructor(...statesToKeep: StateClass[]);\n  constructor();\n  constructor(...statesToKeep: StateClass[]) {\n    const reducer = createMetaDataListReducer(isDevMode());\n    this.statesToKeep = statesToKeep.reduce<MetaDataModel[]>(reducer, []);\n  }\n}\n\n/**\n * Action to overwrite state(s) with given value(s)\n */\nexport class StateOverwrite {\n  static readonly type = '@@OVERWRITE_STATE';\n  public readonly statesToOverwrite: MetaDataModel[];\n  public readonly values: any[];\n  constructor(...overwriteConfigs: OverwriteTuple[]) {\n    const reducer = createMetaTupleReducer(isDevMode());\n    const [states, values] = overwriteConfigs.reduce<MetaTuple>(reducer, [\n      [],\n      [],\n    ]);\n\n    this.statesToOverwrite = states;\n    this.values = values;\n  }\n}\n\nexport function getMetaData(\n  state: StateClass,\n  devMode: number,\n): MetaDataModel | null {\n  const meta = new Object(getStoreMetadata(state as any)) as MetaDataModel;\n  const isNgxsMeta = meta.name && 'defaults' in meta;\n\n  // Reusability Hack: devMode is number on purpose\n  if (!isNgxsMeta && devMode === -2) {\n    console.warn(`Reset Plugin Warning: ${meta.name} is not a state class.`);\n    return null;\n  }\n\n  return meta;\n}\n\nfunction createMetaDataListReducer(devMode: boolean): MetaListReducer {\n  return (acc: MetaDataModel[], state: StateClass): MetaDataModel[] => {\n    // tslint:disable-next-line:no-bitwise\n    const meta = getMetaData(state, ~devMode);\n\n    return meta ? acc.concat(meta) : acc;\n  };\n}\n\nfunction createMetaTupleReducer(devMode: boolean): MetaTupleReducer {\n  return (acc: MetaTuple, [state, value]: OverwriteTuple): MetaTuple => {\n    // tslint:disable-next-line:no-bitwise\n    const meta = getMetaData(state, ~devMode);\n\n    return meta ? [acc[0].concat(meta), acc[1].concat(value)] : acc;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { getActionTypeFromInstance, getValue, NgxsPlugin, setValue } from '@ngxs/store';\nimport { MetaDataModel } from './internals';\nimport { ResetService } from './reset.service';\nimport {\n  getMetaData,\n  StateClear,\n  StateOverwrite,\n  StateReset,\n  StateResetAll,\n} from './symbols';\n\n@Injectable()\nexport class NgxsResetPlugin implements NgxsPlugin {\n  constructor(private readonly resetService: ResetService) {}\n\n  private clearStates(state: any, statesToKeep: MetaDataModel[]): any {\n    return statesToKeep\n      .map(meta => getPath(meta))\n      .map(path => ({\n        parts: path.split('.'),\n        value: getValue(state, path),\n      }))\n      .reduce(\n        (obj, { parts, value }) =>\n          parts.reduceRight(\n            (acc, part) =>\n              part in obj\n                ? {\n                    [part]: {\n                      ...obj[part],\n                      ...acc,\n                    },\n                  }\n                : { [part]: acc },\n            value,\n          ),\n        {} as any,\n      );\n  }\n\n  private overwriteStates(\n    state: any,\n    statesToOverwrite: MetaDataModel[],\n    values: any[],\n  ): any {\n    statesToOverwrite.forEach(\n      (meta, index) => (state = setValue(state, getPath(meta), values[index])),\n    );\n    return state;\n  }\n\n  private resetStates(state: any, statesToReset: MetaDataModel[]): any {\n    statesToReset.forEach(meta => {\n      state = setValue(\n        state,\n        getPath(meta),\n        typeof meta.defaults === 'undefined' ? {} : meta.defaults,\n      );\n\n      if (meta.children) {\n        state = this.resetStates(state, meta.children.map(\n          getMetaData,\n        ) as MetaDataModel[]);\n      }\n    });\n\n    return state;\n  }\n\n  private resetStatesAll(state: any, statesToKeep: MetaDataModel[]): any {\n    const values = statesToKeep.map(meta => getValue(state, getPath(meta)));\n\n    return this.overwriteStates(this.resetService.initialState, statesToKeep, values);\n  }\n\n  handle(state: any, action: any, next: any) {\n    const type = getActionTypeFromInstance(action);\n\n    switch (type) {\n      case StateClear.type:\n        state = this.clearStates(state, (action as StateClear).statesToKeep);\n        break;\n\n      case StateReset.type:\n        state = this.resetStates(state, (action as StateReset).statesToReset);\n        break;\n\n      case StateResetAll.type:\n        state = this.resetStatesAll(state, (action as StateResetAll).statesToKeep);\n        break;\n\n      case StateOverwrite.type:\n        const { statesToOverwrite, values } = action as StateOverwrite;\n        state = this.overwriteStates(state, statesToOverwrite, values);\n        break;\n\n      default:\n        break;\n    }\n\n    return next(state, action);\n  }\n}\n\nfunction getPath(meta: MetaDataModel): string {\n  return meta.path;\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\nimport { noop } from './internals';\nimport { ResetHandler } from './reset.handler';\nimport { NgxsResetPlugin } from './reset.plugin';\nimport { ResetService } from './reset.service';\n\n@NgModule()\nexport class NgxsResetPluginModule {\n  static forRoot(): ModuleWithProviders<NgxsResetPluginModule> {\n    return {\n      ngModule: NgxsResetPluginModule,\n      providers: [\n        ResetService,\n        ResetHandler,\n        {\n          provide: APP_INITIALIZER,\n          useFactory: noop,\n          deps: [ResetHandler],\n          multi: true,\n        },\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsResetPlugin,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n"]}