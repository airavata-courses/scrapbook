(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngxs/store'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngxs-reset-plugin', ['exports', '@angular/core', '@ngxs/store', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngxs-reset-plugin'] = {}, global.ng.core, global.store, global.rxjs.operators));
}(this, (function (exports, core, store, operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/internals.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function MetaDataModel() { }
    if (false) {
        /** @type {?} */
        MetaDataModel.prototype.name;
        /** @type {?} */
        MetaDataModel.prototype.defaults;
        /** @type {?} */
        MetaDataModel.prototype.path;
        /** @type {?|undefined} */
        MetaDataModel.prototype.children;
    }
    /**
     * a simplified implementation of NGXS StateClass interface
     * @record
     * @template T
     */
    function StateClass() { }
    if (false) {
        /** @type {?|undefined} */
        StateClass.prototype.NGXS_META;
        /* Skipping unhandled member: new (...args: any[]): T;*/
    }
    /**
     * @return {?}
     */
    function noop() {
        return ( /**
         * @return {?}
         */function () { });
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/reset.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ResetService = /** @class */ (function () {
        function ResetService() {
        }
        return ResetService;
    }());
    ResetService.decorators = [
        { type: core.Injectable }
    ];
    if (false) {
        /** @type {?} */
        ResetService.prototype.initialState;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/reset.handler.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ResetHandler = /** @class */ (function () {
        /**
         * @param {?} actions$
         * @param {?} store
         * @param {?} resetService
         */
        function ResetHandler(actions$, store$1, resetService) {
            var _this = this;
            this.actions$ = actions$;
            this.store = store$1;
            this.resetService = resetService;
            this.actions$
                .pipe(store.ofActionSuccessful(store.InitState), operators.take(1))
                .subscribe(( /**
         * @return {?}
         */function () { return (_this.resetService.initialState = _this.store.snapshot()); }));
            this.actions$.pipe(store.ofActionSuccessful(store.UpdateState)).subscribe(( /**
             * @param {?} __0
             * @return {?}
             */function (_a) {
                var addedStates = _a.addedStates;
                return (_this.resetService.initialState = Object.assign(Object.assign({}, _this.resetService.initialState), addedStates));
            }));
        }
        return ResetHandler;
    }());
    ResetHandler.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    ResetHandler.ctorParameters = function () { return [
        { type: store.Actions },
        { type: store.Store },
        { type: ResetService }
    ]; };
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ResetHandler.prototype.actions$;
        /**
         * @type {?}
         * @private
         */
        ResetHandler.prototype.store;
        /**
         * @type {?}
         * @private
         */
        ResetHandler.prototype.resetService;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * Action to clear all state except given state(s)
     */
    var StateClear = /** @class */ (function () {
        /**
         * @param {...?} statesToKeep
         */
        function StateClear() {
            var statesToKeep = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                statesToKeep[_i] = arguments[_i];
            }
            /** @type {?} */
            var reducer = createMetaDataListReducer(core.isDevMode());
            this.statesToKeep = statesToKeep.reduce(reducer, []);
        }
        return StateClear;
    }());
    StateClear.type = '@@CLEAR_STATE';
    if (false) {
        /** @type {?} */
        StateClear.type;
        /** @type {?} */
        StateClear.prototype.statesToKeep;
    }
    /**
     * Action to reset given state(s) to defaults
     */
    var StateReset = /** @class */ (function () {
        /**
         * @param {...?} statesToReset
         */
        function StateReset() {
            var statesToReset = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                statesToReset[_i] = arguments[_i];
            }
            /** @type {?} */
            var reducer = createMetaDataListReducer(core.isDevMode());
            this.statesToReset = statesToReset.reduce(reducer, []);
        }
        return StateReset;
    }());
    StateReset.type = '@@RESET_STATE';
    if (false) {
        /** @type {?} */
        StateReset.type;
        /** @type {?} */
        StateReset.prototype.statesToReset;
    }
    /**
     * Action to reset all states expect given state(s) to defaults
     */
    var StateResetAll = /** @class */ (function () {
        /**
         * @param {...?} statesToKeep
         */
        function StateResetAll() {
            var statesToKeep = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                statesToKeep[_i] = arguments[_i];
            }
            /** @type {?} */
            var reducer = createMetaDataListReducer(core.isDevMode());
            this.statesToKeep = statesToKeep.reduce(reducer, []);
        }
        return StateResetAll;
    }());
    StateResetAll.type = '@@RESET_STATE_ALL';
    if (false) {
        /** @type {?} */
        StateResetAll.type;
        /** @type {?} */
        StateResetAll.prototype.statesToKeep;
    }
    /**
     * Action to overwrite state(s) with given value(s)
     */
    var StateOverwrite = /** @class */ (function () {
        /**
         * @param {...?} overwriteConfigs
         */
        function StateOverwrite() {
            var overwriteConfigs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                overwriteConfigs[_i] = arguments[_i];
            }
            /** @type {?} */
            var reducer = createMetaTupleReducer(core.isDevMode());
            var _a = __read(overwriteConfigs.reduce(reducer, [
                [],
                [],
            ]), 2), states = _a[0], values = _a[1];
            this.statesToOverwrite = states;
            this.values = values;
        }
        return StateOverwrite;
    }());
    StateOverwrite.type = '@@OVERWRITE_STATE';
    if (false) {
        /** @type {?} */
        StateOverwrite.type;
        /** @type {?} */
        StateOverwrite.prototype.statesToOverwrite;
        /** @type {?} */
        StateOverwrite.prototype.values;
    }
    /**
     * @param {?} state
     * @param {?} devMode
     * @return {?}
     */
    function getMetaData(state, devMode) {
        /** @type {?} */
        var meta = ( /** @type {?} */(new Object(store.getStoreMetadata(( /** @type {?} */(state))))));
        /** @type {?} */
        var isNgxsMeta = meta.name && 'defaults' in meta;
        // Reusability Hack: devMode is number on purpose
        if (!isNgxsMeta && devMode === -2) {
            console.warn("Reset Plugin Warning: " + meta.name + " is not a state class.");
            return null;
        }
        return meta;
    }
    /**
     * @param {?} devMode
     * @return {?}
     */
    function createMetaDataListReducer(devMode) {
        return ( /**
         * @param {?} acc
         * @param {?} state
         * @return {?}
         */function (acc, state) {
            // tslint:disable-next-line:no-bitwise
            /** @type {?} */
            var meta = getMetaData(state, ~devMode);
            return meta ? acc.concat(meta) : acc;
        });
    }
    /**
     * @param {?} devMode
     * @return {?}
     */
    function createMetaTupleReducer(devMode) {
        return ( /**
         * @param {?} acc
         * @param {?} __1
         * @return {?}
         */function (acc, _a) {
            var _b = __read(_a, 2), state = _b[0], value = _b[1];
            // tslint:disable-next-line:no-bitwise
            /** @type {?} */
            var meta = getMetaData(state, ~devMode);
            return meta ? [acc[0].concat(meta), acc[1].concat(value)] : acc;
        });
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/reset.plugin.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxsResetPlugin = /** @class */ (function () {
        /**
         * @param {?} resetService
         */
        function NgxsResetPlugin(resetService) {
            this.resetService = resetService;
        }
        /**
         * @private
         * @param {?} state
         * @param {?} statesToKeep
         * @return {?}
         */
        NgxsResetPlugin.prototype.clearStates = function (state, statesToKeep) {
            return statesToKeep
                .map(( /**
         * @param {?} meta
         * @return {?}
         */function (/**
         * @param {?} meta
         * @return {?}
         */ meta) { return getPath(meta); }))
                .map(( /**
         * @param {?} path
         * @return {?}
         */function (/**
         * @param {?} path
         * @return {?}
         */ path) { return ({
                parts: path.split('.'),
                value: store.getValue(state, path),
            }); }))
                .reduce(( /**
         * @param {?} obj
         * @param {?} __1
         * @return {?}
         */function (obj, _a) {
                var parts = _a.parts, value = _a.value;
                return parts.reduceRight(( /**
                 * @param {?} acc
                 * @param {?} part
                 * @return {?}
                 */function (acc, part) {
                    var _a, _b;
                    return part in obj
                        ? (_a = {},
                            _a[part] = Object.assign(Object.assign({}, obj[part]), acc),
                            _a) : (_b = {}, _b[part] = acc, _b);
                }), value);
            }), ( /** @type {?} */({})));
        };
        /**
         * @private
         * @param {?} state
         * @param {?} statesToOverwrite
         * @param {?} values
         * @return {?}
         */
        NgxsResetPlugin.prototype.overwriteStates = function (state, statesToOverwrite, values) {
            statesToOverwrite.forEach(( /**
             * @param {?} meta
             * @param {?} index
             * @return {?}
             */function (meta, index) { return (state = store.setValue(state, getPath(meta), values[index])); }));
            return state;
        };
        /**
         * @private
         * @param {?} state
         * @param {?} statesToReset
         * @return {?}
         */
        NgxsResetPlugin.prototype.resetStates = function (state, statesToReset) {
            var _this = this;
            statesToReset.forEach(( /**
             * @param {?} meta
             * @return {?}
             */function (/**
             * @param {?} meta
             * @return {?}
             */ meta) {
                state = store.setValue(state, getPath(meta), typeof meta.defaults === 'undefined' ? {} : meta.defaults);
                if (meta.children) {
                    state = _this.resetStates(state, ( /** @type {?} */(meta.children.map(getMetaData))));
                }
            }));
            return state;
        };
        /**
         * @private
         * @param {?} state
         * @param {?} statesToKeep
         * @return {?}
         */
        NgxsResetPlugin.prototype.resetStatesAll = function (state, statesToKeep) {
            /** @type {?} */
            var values = statesToKeep.map(( /**
             * @param {?} meta
             * @return {?}
             */function (/**
             * @param {?} meta
             * @return {?}
             */ meta) { return store.getValue(state, getPath(meta)); }));
            return this.overwriteStates(this.resetService.initialState, statesToKeep, values);
        };
        /**
         * @param {?} state
         * @param {?} action
         * @param {?} next
         * @return {?}
         */
        NgxsResetPlugin.prototype.handle = function (state, action, next) {
            /** @type {?} */
            var type = store.getActionTypeFromInstance(action);
            switch (type) {
                case StateClear.type:
                    state = this.clearStates(state, (( /** @type {?} */(action))).statesToKeep);
                    break;
                case StateReset.type:
                    state = this.resetStates(state, (( /** @type {?} */(action))).statesToReset);
                    break;
                case StateResetAll.type:
                    state = this.resetStatesAll(state, (( /** @type {?} */(action))).statesToKeep);
                    break;
                case StateOverwrite.type:
                    var _a = ( /** @type {?} */(action)), statesToOverwrite = _a.statesToOverwrite, values = _a.values;
                    state = this.overwriteStates(state, statesToOverwrite, values);
                    break;
                default:
                    break;
            }
            return next(state, action);
        };
        return NgxsResetPlugin;
    }());
    NgxsResetPlugin.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    NgxsResetPlugin.ctorParameters = function () { return [
        { type: ResetService }
    ]; };
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgxsResetPlugin.prototype.resetService;
    }
    /**
     * @param {?} meta
     * @return {?}
     */
    function getPath(meta) {
        return meta.path;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/reset.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxsResetPluginModule = /** @class */ (function () {
        function NgxsResetPluginModule() {
        }
        /**
         * @return {?}
         */
        NgxsResetPluginModule.forRoot = function () {
            return {
                ngModule: NgxsResetPluginModule,
                providers: [
                    ResetService,
                    ResetHandler,
                    {
                        provide: core.APP_INITIALIZER,
                        useFactory: noop,
                        deps: [ResetHandler],
                        multi: true,
                    },
                    {
                        provide: store.NGXS_PLUGINS,
                        useClass: NgxsResetPlugin,
                        multi: true,
                    },
                ],
            };
        };
        return NgxsResetPluginModule;
    }());
    NgxsResetPluginModule.decorators = [
        { type: core.NgModule }
    ];

    /**
     * @fileoverview added by tsickle
     * Generated from: public_api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: ngxs-reset-plugin.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxsResetPlugin = NgxsResetPlugin;
    exports.NgxsResetPluginModule = NgxsResetPluginModule;
    exports.StateClear = StateClear;
    exports.StateOverwrite = StateOverwrite;
    exports.StateReset = StateReset;
    exports.StateResetAll = StateResetAll;
    exports.getMetaData = getMetaData;
    exports.ɵa = ResetService;
    exports.ɵb = ResetHandler;
    exports.ɵd = noop;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngxs-reset-plugin.umd.js.map
