/**
 * @fileoverview added by tsickle
 * Generated from: lib/reset.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store';
import { ResetService } from './reset.service';
import { getMetaData, StateClear, StateOverwrite, StateReset, StateResetAll, } from './symbols';
export class NgxsResetPlugin {
    /**
     * @param {?} resetService
     */
    constructor(resetService) {
        this.resetService = resetService;
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    clearStates(state, statesToKeep) {
        return statesToKeep
            .map((/**
         * @param {?} meta
         * @return {?}
         */
        meta => getPath(meta)))
            .map((/**
         * @param {?} path
         * @return {?}
         */
        path => ({
            parts: path.split('.'),
            value: getValue(state, path),
        })))
            .reduce((/**
         * @param {?} obj
         * @param {?} __1
         * @return {?}
         */
        (obj, { parts, value }) => parts.reduceRight((/**
         * @param {?} acc
         * @param {?} part
         * @return {?}
         */
        (acc, part) => part in obj
            ? {
                [part]: Object.assign(Object.assign({}, obj[part]), acc),
            }
            : { [part]: acc }), value)), (/** @type {?} */ ({})));
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToOverwrite
     * @param {?} values
     * @return {?}
     */
    overwriteStates(state, statesToOverwrite, values) {
        statesToOverwrite.forEach((/**
         * @param {?} meta
         * @param {?} index
         * @return {?}
         */
        (meta, index) => (state = setValue(state, getPath(meta), values[index]))));
        return state;
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToReset
     * @return {?}
     */
    resetStates(state, statesToReset) {
        statesToReset.forEach((/**
         * @param {?} meta
         * @return {?}
         */
        meta => {
            state = setValue(state, getPath(meta), typeof meta.defaults === 'undefined' ? {} : meta.defaults);
            if (meta.children) {
                state = this.resetStates(state, (/** @type {?} */ (meta.children.map(getMetaData))));
            }
        }));
        return state;
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    resetStatesAll(state, statesToKeep) {
        /** @type {?} */
        const values = statesToKeep.map((/**
         * @param {?} meta
         * @return {?}
         */
        meta => getValue(state, getPath(meta))));
        return this.overwriteStates(this.resetService.initialState, statesToKeep, values);
    }
    /**
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    handle(state, action, next) {
        /** @type {?} */
        const type = getActionTypeFromInstance(action);
        switch (type) {
            case StateClear.type:
                state = this.clearStates(state, ((/** @type {?} */ (action))).statesToKeep);
                break;
            case StateReset.type:
                state = this.resetStates(state, ((/** @type {?} */ (action))).statesToReset);
                break;
            case StateResetAll.type:
                state = this.resetStatesAll(state, ((/** @type {?} */ (action))).statesToKeep);
                break;
            case StateOverwrite.type:
                const { statesToOverwrite, values } = (/** @type {?} */ (action));
                state = this.overwriteStates(state, statesToOverwrite, values);
                break;
            default:
                break;
        }
        return next(state, action);
    }
}
NgxsResetPlugin.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxsResetPlugin.ctorParameters = () => [
    { type: ResetService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsResetPlugin.prototype.resetService;
}
/**
 * @param {?} meta
 * @return {?}
 */
function getPath(meta) {
    return meta.path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQucGx1Z2luLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9yZXNldC5wbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxRQUFRLEVBQWMsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQ0wsV0FBVyxFQUNYLFVBQVUsRUFDVixjQUFjLEVBQ2QsVUFBVSxFQUNWLGFBQWEsR0FDZCxNQUFNLFdBQVcsQ0FBQztBQUduQixNQUFNLE9BQU8sZUFBZTs7OztJQUMxQixZQUE2QixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFHLENBQUM7Ozs7Ozs7SUFFbkQsV0FBVyxDQUFDLEtBQVUsRUFBRSxZQUE2QjtRQUMzRCxPQUFPLFlBQVk7YUFDaEIsR0FBRzs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDO2FBQzFCLEdBQUc7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDWixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDdEIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1NBQzdCLENBQUMsRUFBQzthQUNGLE1BQU07Ozs7O1FBQ0wsQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUN4QixLQUFLLENBQUMsV0FBVzs7Ozs7UUFDZixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUNaLElBQUksSUFBSSxHQUFHO1lBQ1QsQ0FBQyxDQUFDO2dCQUNFLENBQUMsSUFBSSxDQUFDLGtDQUNELEdB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N0IsQ0FBQzs7O1lBMUZGLFVBQVU7Ozs7WUFURixZQUFZOzs7Ozs7O0lBV1AsdUNBQTJDOzs7Ozs7QUEyRnpELFNBQVMsT0FBTyxDQUFDLElBQW1CO0lBQ2xDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZSwgZ2V0VmFsdWUsIE5neHNQbHVnaW4sIHNldFZhbHVlIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xuaW1wb3J0IHsgTWV0YURhdGFNb2RlbCB9IGZyb20gJy4vaW50ZXJuYWxzJztcbmltcG9ydCB7IFJlc2V0U2VydmljZSB9IGZyb20gJy4vcmVzZXQuc2VydmljZSc7XG5pbXBvcnQge1xuICBnZXRNZXRhRGF0YSxcbiAgU3RhdGVDbGVhcixcbiAgU3RhdGVPdmVyd3JpdGUsXG4gIFN0YXRlUmVzZXQsXG4gIFN0YXRlUmVzZXRBbGwsXG59IGZyb20gJy4vc3ltYm9scyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3hzUmVzZXRQbHVnaW4gaW1wbGVtZW50cyBOZ3hzUGx1Z2luIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByZXNldFNlcnZpY2U6IFJlc2V0U2VydmljZSkge31cblxuICBwcml2YXRlIGNsZWFyU3RhdGVzKHN0YXRlOiBhbnksIHN0YXRlc1RvS2VlcDogTWV0YURhdGFNb2RlbFtdKTogYW55IHtcbiAgICByZXR1cm4gc3RhdGVzVG9LZWVwXG4gICAgICAubWFwKG1ldGEgPT4gZ2V0UGF0aChtZXRhKSlcbiAgICAgIC5tYXAocGF0aCA9PiAoe1xuICAgICAgICBwYXJ0czogcGF0aC5zcGxpdCgnLicpLFxuICAgICAgICB2YWx1ZTogZ2V0VmFsdWUoc3RhdGUsIHBhdGgpLFxuICAgICAgfSkpXG4gICAgICAucmVkdWNlKFxuICAgICAgICAob2JqLCB7IHBhcnRzLCB2YWx1ZSB9KSA9PlxuICAgICAgICAgIHBhcnRzLnJlZHVjZVJpZ2h0KFxuICAgICAgICAgICAgKGFjYywgcGFydCkgPT5cbiAgICAgICAgICAgICAgcGFydCBpbiBvYmpcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgW3BhcnRdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgLi4ub2JqW3BhcnRdLFxuICAgICAgICAgICAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHsgW3BhcnRdOiBhY2MgfSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICksXG4gICAgICAgIHt9IGFzIGFueSxcbiAgICAgICk7XG4gIH1cblxuICBwcml2YXRlIG92ZXJ3cml0ZVN0YXRlcyhcbiAgICBzdGF0ZTogYW55LFxuICAgIHN0YXRlc1RvT3ZlcndyaXRlOiBNZXRhRGF0YU1vZGVsW10sXG4gICAgdmFsdWVzOiBhbnlbXSxcbiAgKTogYW55IHtcbiAgICBzdGF0ZXNUb092ZXJ3cml0ZS5mb3JFYWNoKFxuICAgICAgKG1ldGEsIGluZGV4KSA9PiAoc3RhdGUgPSBzZXRWYWx1ZShzdGF0ZSwgZ2V0UGF0aChtZXRhKSwgdmFsdWVzW2luZGV4XSkpLFxuICAgICk7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNldFN0YXRlcyhzdGF0ZTogYW55LCBzdGF0ZXNUb1Jlc2V0OiBNZXRhRGF0YU1vZGVsW10pOiBhbnkge1xuICAgIHN0YXRlc1RvUmVzZXQuZm9yRWFjaChtZXRhID0+IHtcbiAgICAgIHN0YXRlID0gc2V0VmFsdWUoXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBnZXRQYXRoKG1ldGEpLFxuICAgICAgICB0eXBlb2YgbWV0YS5kZWZhdWx0cyA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IG1ldGEuZGVmYXVsdHMsXG4gICAgICApO1xuXG4gICAgICBpZiAobWV0YS5jaGlsZHJlbikge1xuICAgICAgICBzdGF0ZSA9IHRoaXMucmVzZXRTdGF0ZXMoc3RhdGUsIG1ldGEuY2hpbGRyZW4ubWFwKFxuICAgICAgICAgIGdldE1ldGFEYXRhLFxuICAgICAgICApIGFzIE1ldGFEYXRhTW9kZWxbXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBwcml2YXRlIHJlc2V0U3RhdGVzQWxsKHN0YXRlOiBhbnksIHN0YXRlc1RvS2VlcDogTWV0YURhdGFNb2RlbFtdKTogYW55IHtcbiAgICBjb25zdCB2YWx1ZXMgPSBzdGF0ZXNUb0tlZXAubWFwKG1ldGEgPT4gZ2V0VmFsdWUoc3RhdGUsIGdldFBhdGgobWV0YSkpKTtcblxuICAgIHJldHVybiB0aGlzLm92ZXJ3cml0ZVN0YXRlcyh0aGlzLnJlc2V0U2VydmljZS5pbml0aWFsU3RhdGUsIHN0YXRlc1RvS2VlcCwgdmFsdWVzKTtcbiAgfVxuXG4gIGhhbmRsZShzdGF0ZTogYW55LCBhY3Rpb246IGFueSwgbmV4dDogYW55KSB7XG4gICAgY29uc3QgdHlwZSA9IGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UoYWN0aW9uKTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBTdGF0ZUNsZWFyLnR5cGU6XG4gICAgICAgIHN0YXRlID0gdGhpcy5jbGVhclN0YXRlcyhzdGF0ZSwgKGFjdGlvbiBhcyBTdGF0ZUNsZWFyKS5zdGF0ZXNUb0tlZXApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTdGF0ZVJlc2V0LnR5cGU6XG4gICAgICAgIHN0YXRlID0gdGhpcy5yZXNldFN0YXRlcyhzdGF0ZSwgKGFjdGlvbiBhcyBTdGF0ZVJlc2V0KS5zdGF0ZXNUb1Jlc2V0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RhdGVSZXNldEFsbC50eXBlOlxuICAgICAgICBzdGF0ZSA9IHRoaXMucmVzZXRTdGF0ZXNBbGwoc3RhdGUsIChhY3Rpb24gYXMgU3RhdGVSZXNldEFsbCkuc3RhdGVzVG9LZWVwKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RhdGVPdmVyd3JpdGUudHlwZTpcbiAgICAgICAgY29uc3QgeyBzdGF0ZXNUb092ZXJ3cml0ZSwgdmFsdWVzIH0gPSBhY3Rpb24gYXMgU3RhdGVPdmVyd3JpdGU7XG4gICAgICAgIHN0YXRlID0gdGhpcy5vdmVyd3JpdGVTdGF0ZXMoc3RhdGUsIHN0YXRlc1RvT3ZlcndyaXRlLCB2YWx1ZXMpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQoc3RhdGUsIGFjdGlvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGF0aChtZXRhOiBNZXRhRGF0YU1vZGVsKTogc3RyaW5nIHtcbiAgcmV0dXJuIG1ldGEucGF0aDtcbn1cbiJdfQ==