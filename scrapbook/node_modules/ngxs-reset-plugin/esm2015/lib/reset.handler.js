/**
 * @fileoverview added by tsickle
 * Generated from: lib/reset.handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Actions, InitState, ofActionSuccessful, Store, UpdateState } from '@ngxs/store';
import { take } from 'rxjs/operators';
import { ResetService } from './reset.service';
export class ResetHandler {
    /**
     * @param {?} actions$
     * @param {?} store
     * @param {?} resetService
     */
    constructor(actions$, store, resetService) {
        this.actions$ = actions$;
        this.store = store;
        this.resetService = resetService;
        this.actions$
            .pipe(ofActionSuccessful(InitState), take(1))
            .subscribe((/**
         * @return {?}
         */
        () => (this.resetService.initialState = this.store.snapshot())));
        this.actions$.pipe(ofActionSuccessful(UpdateState)).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ({ addedStates }) => (this.resetService.initialState = Object.assign(Object.assign({}, this.resetService.initialState), addedStates))));
    }
}
ResetHandler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ResetHandler.ctorParameters = () => [
    { type: Actions },
    { type: Store },
    { type: ResetService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.actions$;
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.store;
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.resetService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9zcmMvIiwic291cmNlcyI6WyJsaWIvcmVzZXQuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN6RixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRy9DLE1BQU0sT0FBTyxZQUFZOzs7Ozs7SUFDdkIsWUFDVSxRQUFpQixFQUNqQixLQUFZLEVBQ1osWUFBMEI7UUFGMUIsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixVQUFLLEdBQUwsS0FBSyxDQUFPO1FBQ1osaUJBQVksR0FBWixZQUFZLENBQWM7UUFFbEMsSUFBSSxDQUFDLFFBQVE7YUFDVixJQUFJLENBQ0gsa0JBQWtCLENBQUMsU0FBUyxDQUFDLEVBQzdCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUjthQUNBLFNBQVM7OztRQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFDLENBQUM7UUFFN0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7O1FBQzNELENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQ2xCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLG1DQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksR0FDOUIsV0FBVyxDQUNmLENBQUMsRUFDTCxDQUFDO0lBQ0osQ0FBQzs7O1lBckJGLFVBQVU7Ozs7WUFKRixPQUFPO1lBQWlDLEtBQUs7WUFFN0MsWUFBWTs7Ozs7OztJQUtqQixnQ0FBeUI7Ozs7O0lBQ3pCLDZCQUFvQjs7Ozs7SUFDcEIsb0NBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgSW5pdFN0YXRlLCBvZkFjdGlvblN1Y2Nlc3NmdWwsIFN0b3JlLCBVcGRhdGVTdGF0ZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXNldFNlcnZpY2UgfSBmcm9tICcuL3Jlc2V0LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVzZXRIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcbiAgICBwcml2YXRlIHN0b3JlOiBTdG9yZSxcbiAgICBwcml2YXRlIHJlc2V0U2VydmljZTogUmVzZXRTZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLmFjdGlvbnMkXG4gICAgICAucGlwZShcbiAgICAgICAgb2ZBY3Rpb25TdWNjZXNzZnVsKEluaXRTdGF0ZSksXG4gICAgICAgIHRha2UoMSksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+ICh0aGlzLnJlc2V0U2VydmljZS5pbml0aWFsU3RhdGUgPSB0aGlzLnN0b3JlLnNuYXBzaG90KCkpKTtcblxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShvZkFjdGlvblN1Y2Nlc3NmdWwoVXBkYXRlU3RhdGUpKS5zdWJzY3JpYmUoXG4gICAgICAoeyBhZGRlZFN0YXRlcyB9KSA9PlxuICAgICAgICAodGhpcy5yZXNldFNlcnZpY2UuaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICAgIC4uLnRoaXMucmVzZXRTZXJ2aWNlLmluaXRpYWxTdGF0ZSxcbiAgICAgICAgICAuLi5hZGRlZFN0YXRlcyxcbiAgICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIl19