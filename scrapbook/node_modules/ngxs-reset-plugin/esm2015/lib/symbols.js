/**
 * @fileoverview added by tsickle
 * Generated from: lib/symbols.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isDevMode } from '@angular/core';
import { getStoreMetadata } from '@ngxs/store';
/**
 * Action to clear all state except given state(s)
 */
export class StateClear {
    /**
     * @param {...?} statesToKeep
     */
    constructor(...statesToKeep) {
        /** @type {?} */
        const reducer = createMetaDataListReducer(isDevMode());
        this.statesToKeep = statesToKeep.reduce(reducer, []);
    }
}
StateClear.type = '@@CLEAR_STATE';
if (false) {
    /** @type {?} */
    StateClear.type;
    /** @type {?} */
    StateClear.prototype.statesToKeep;
}
/**
 * Action to reset given state(s) to defaults
 */
export class StateReset {
    /**
     * @param {...?} statesToReset
     */
    constructor(...statesToReset) {
        /** @type {?} */
        const reducer = createMetaDataListReducer(isDevMode());
        this.statesToReset = statesToReset.reduce(reducer, []);
    }
}
StateReset.type = '@@RESET_STATE';
if (false) {
    /** @type {?} */
    StateReset.type;
    /** @type {?} */
    StateReset.prototype.statesToReset;
}
/**
 * Action to reset all states expect given state(s) to defaults
 */
export class StateResetAll {
    /**
     * @param {...?} statesToKeep
     */
    constructor(...statesToKeep) {
        /** @type {?} */
        const reducer = createMetaDataListReducer(isDevMode());
        this.statesToKeep = statesToKeep.reduce(reducer, []);
    }
}
StateResetAll.type = '@@RESET_STATE_ALL';
if (false) {
    /** @type {?} */
    StateResetAll.type;
    /** @type {?} */
    StateResetAll.prototype.statesToKeep;
}
/**
 * Action to overwrite state(s) with given value(s)
 */
export class StateOverwrite {
    /**
     * @param {...?} overwriteConfigs
     */
    constructor(...overwriteConfigs) {
        /** @type {?} */
        const reducer = createMetaTupleReducer(isDevMode());
        const [states, values] = overwriteConfigs.reduce(reducer, [
            [],
            [],
        ]);
        this.statesToOverwrite = states;
        this.values = values;
    }
}
StateOverwrite.type = '@@OVERWRITE_STATE';
if (false) {
    /** @type {?} */
    StateOverwrite.type;
    /** @type {?} */
    StateOverwrite.prototype.statesToOverwrite;
    /** @type {?} */
    StateOverwrite.prototype.values;
}
/**
 * @param {?} state
 * @param {?} devMode
 * @return {?}
 */
export function getMetaData(state, devMode) {
    /** @type {?} */
    const meta = (/** @type {?} */ (new Object(getStoreMetadata((/** @type {?} */ (state))))));
    /** @type {?} */
    const isNgxsMeta = meta.name && 'defaults' in meta;
    // Reusability Hack: devMode is number on purpose
    if (!isNgxsMeta && devMode === -2) {
        console.warn(`Reset Plugin Warning: ${meta.name} is not a state class.`);
        return null;
    }
    return meta;
}
/**
 * @param {?} devMode
 * @return {?}
 */
function createMetaDataListReducer(devMode) {
    return (/**
     * @param {?} acc
     * @param {?} state
     * @return {?}
     */
    (acc, state) => {
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        const meta = getMetaData(state, ~devMode);
        return meta ? acc.concat(meta) : acc;
    });
}
/**
 * @param {?} devMode
 * @return {?}
 */
function createMetaTupleReducer(devMode) {
    return (/**
     * @param {?} acc
     * @param {?} __1
     * @return {?}
     */
    (acc, [state, value]) => {
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        const meta = getMetaData(state, ~devMode);
        return meta ? [acc[0].concat(meta), acc[1].concat(value)] : acc;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9zcmMvIiwic291cmNlcyI6WyJsaWIvc3ltYm9scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDOzs7O0FBaUIvQyxNQUFNLE9BQU8sVUFBVTs7OztJQVFyQixZQUFZLEdBQUcsWUFBMEI7O2NBQ2pDLE9BQU8sR0FBRyx5QkFBeUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQWtCLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDOztBQVZlLGVBQUksR0FBRyxlQUFlLENBQUM7OztJQUF2QyxnQkFBdUM7O0lBQ3ZDLGtDQUE4Qzs7Ozs7QUFlaEQsTUFBTSxPQUFPLFVBQVU7Ozs7SUFHckIsWUFBWSxHQUFHLGFBQTJCOztjQUNsQyxPQUFPLEdBQUcseUJBQXlCLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFrQixPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7QUFMZSxlQUFJLEdBQUcsZUFBZSxDQUFDOzs7SUFBdkMsZ0JBQXVDOztJQUN2QyxtQ0FBK0M7Ozs7O0FBVWpELE1BQU0sT0FBTyxhQUFhOzs7O0lBUXhCLFlBQVksR0FBRyxZQUEwQjs7Y0FDakMsT0FBTyxHQUFHLHlCQUF5QixDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3RELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBa0IsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7O0FBVmUsa0JBQUksR0FBRyxtQkFBbUIsQ0FBQzs7O0lBQTNDLG1CQUEyQzs7SUFDM0MscUNBQThDOzs7OztBQWVoRCxNQUFNLE9BQU8sY0FBYzs7OztJQUl6QixZQUFZLEdBQUcsZ0JBQWtDOztjQUN6QyxPQUFPLEdBQUcsc0JBQXNCLENBQUMsU0FBUyxFQUFFLENBQUM7Y0FDN0MsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFZLE9BQU8sRUFBRTtZQUNuRSxFQUFFO1lBQ0YsRUFBRTtTQUNILENBQUM7UUFFRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7O0FBWmUsbUJBQUksR0FBRyxtQkFBbUIsQ0FBQzs7O0lBQTNDLG9CQUEyQzs7SUFDM0MsMkNBQW1EOztJQUNuRCxnQ0FBOEI7Ozs7Ozs7QUFhaEMsTUFBTSxVQUFVLFdBQVcsQ0FDekIsS0FBaUIsRUFDakIsT0FBZTs7VUFFVCxJQUFJLEdBQUcsbUJBQUEsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsbUJBQUEsS0FBSyxFQUFPLENBQUMsQ0FBQyxFQUFpQjs7VUFDbEUsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksVUFBVSxJQUFJLElBQUk7SUFFbEQsaURBQWlEO0lBQ2pELElBQUksQ0FBQyxVQUFVLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXlCLElBQUksQ0FBQyxJQUFJLHdCQUF3QixDQUFDLENBQUM7UUFDekUsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQzs7Ozs7QUFFRCxTQUFTLHlCQUF5QixDQUFDLE9BQWdCO0lBQ2pEOzs7OztJQUFPLENBQUMsR0FBb0IsRUFBRSxLQUFpQixFQUFtQixFQUFFOzs7Y0FFNUQsSUFBSSxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUN2QyxDQUFDLEVBQUM7QUFDSixDQUFDOzs7OztBQUVELFNBQVMsc0JBQXNCLENBQUMsT0FBZ0I7SUFDOUM7Ozs7O0lBQU8sQ0FBQyxHQUFjLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFpQixFQUFhLEVBQUU7OztjQUU3RCxJQUFJLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQztRQUV6QyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQ2xFLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldFN0b3JlTWV0YWRhdGEgfSBmcm9tICdAbmd4cy9zdG9yZSc7XG5pbXBvcnQgeyBNZXRhRGF0YU1vZGVsLCBTdGF0ZUNsYXNzIH0gZnJvbSAnLi9pbnRlcm5hbHMnO1xuXG5leHBvcnQgdHlwZSBPdmVyd3JpdGVUdXBsZSA9IFtTdGF0ZUNsYXNzLCBhbnldO1xudHlwZSBNZXRhVHVwbGUgPSBbTWV0YURhdGFNb2RlbFtdLCBhbnlbXV07XG50eXBlIE1ldGFMaXN0UmVkdWNlciA9IChcbiAgYWNjOiBNZXRhRGF0YU1vZGVsW10sXG4gIHN0YXRlOiBTdGF0ZUNsYXNzLFxuKSA9PiBNZXRhRGF0YU1vZGVsW107XG50eXBlIE1ldGFUdXBsZVJlZHVjZXIgPSAoXG4gIGFjYzogTWV0YVR1cGxlLFxuICBbc3RhdGUsIHZhbHVlXTogT3ZlcndyaXRlVHVwbGUsXG4pID0+IE1ldGFUdXBsZTtcblxuLyoqXG4gKiBBY3Rpb24gdG8gY2xlYXIgYWxsIHN0YXRlIGV4Y2VwdCBnaXZlbiBzdGF0ZShzKVxuICovXG5leHBvcnQgY2xhc3MgU3RhdGVDbGVhciB7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlID0gJ0BAQ0xFQVJfU1RBVEUnO1xuICBwdWJsaWMgcmVhZG9ubHkgc3RhdGVzVG9LZWVwOiBNZXRhRGF0YU1vZGVsW107XG5cbiAgLy8gVGhlIGR1cGxpY2F0aW9uIGlzIG5lY2Vzc2FyeSBmb3IgVHlwZVNjcmlwdFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dW5pZmllZC1zaWduYXR1cmVzXG4gIGNvbnN0cnVjdG9yKC4uLnN0YXRlc1RvS2VlcDogU3RhdGVDbGFzc1tdKTtcbiAgY29uc3RydWN0b3IoKTtcbiAgY29uc3RydWN0b3IoLi4uc3RhdGVzVG9LZWVwOiBTdGF0ZUNsYXNzW10pIHtcbiAgICBjb25zdCByZWR1Y2VyID0gY3JlYXRlTWV0YURhdGFMaXN0UmVkdWNlcihpc0Rldk1vZGUoKSk7XG4gICAgdGhpcy5zdGF0ZXNUb0tlZXAgPSBzdGF0ZXNUb0tlZXAucmVkdWNlPE1ldGFEYXRhTW9kZWxbXT4ocmVkdWNlciwgW10pO1xuICB9XG59XG5cbi8qKlxuICogQWN0aW9uIHRvIHJlc2V0IGdpdmVuIHN0YXRlKHMpIHRvIGRlZmF1bHRzXG4gKi9cbmV4cG9ydCBjbGFzcyBTdGF0ZVJlc2V0IHtcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGUgPSAnQEBSRVNFVF9TVEFURSc7XG4gIHB1YmxpYyByZWFkb25seSBzdGF0ZXNUb1Jlc2V0OiBNZXRhRGF0YU1vZGVsW107XG4gIGNvbnN0cnVjdG9yKC4uLnN0YXRlc1RvUmVzZXQ6IFN0YXRlQ2xhc3NbXSkge1xuICAgIGNvbnN0IHJlZHVjZXIgPSBjcmVhdGVNZXRhRGF0YUxpc3RSZWR1Y2VyKGlzRGV2TW9kZSgpKTtcbiAgICB0aGlzLnN0YXRlc1RvUmVzZXQgPSBzdGF0ZXNUb1Jlc2V0LnJlZHVjZTxNZXRhRGF0YU1vZGVsW10+KHJlZHVjZXIsIFtdKTtcbiAgfVxufVxuXG4vKipcbiAqIEFjdGlvbiB0byByZXNldCBhbGwgc3RhdGVzIGV4cGVjdCBnaXZlbiBzdGF0ZShzKSB0byBkZWZhdWx0c1xuICovXG5leHBvcnQgY2xhc3MgU3RhdGVSZXNldEFsbCB7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlID0gJ0BAUkVTRVRfU1RBVEVfQUxMJztcbiAgcHVibGljIHJlYWRvbmx5IHN0YXRlc1RvS2VlcDogTWV0YURhdGFNb2RlbFtdO1xuXG4gIC8vIFRoZSBkdXBsaWNhdGlvbiBpcyBuZWNlc3NhcnkgZm9yIFR5cGVTY3JpcHRcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnVuaWZpZWQtc2lnbmF0dXJlc1xuICBjb25zdHJ1Y3RvciguLi5zdGF0ZXNUb0tlZXA6IFN0YXRlQ2xhc3NbXSk7XG4gIGNvbnN0cnVjdG9yKCk7XG4gIGNvbnN0cnVjdG9yKC4uLnN0YXRlc1RvS2VlcDogU3RhdGVDbGFzc1tdKSB7XG4gICAgY29uc3QgcmVkdWNlciA9IGNyZWF0ZU1ldGFEYXRhTGlzdFJlZHVjZXIoaXNEZXZNb2RlKCkpO1xuICAgIHRoaXMuc3RhdGVzVG9LZWVwID0gc3RhdGVzVG9LZWVwLnJlZHVjZTxNZXRhRGF0YU1vZGVsW10+KHJlZHVjZXIsIFtdKTtcbiAgfVxufVxuXG4vKipcbiAqIEFjdGlvbiB0byBvdmVyd3JpdGUgc3RhdGUocykgd2l0aCBnaXZlbiB2YWx1ZShzKVxuICovXG5leHBvcnQgY2xhc3MgU3RhdGVPdmVyd3JpdGUge1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZSA9ICdAQE9WRVJXUklURV9TVEFURSc7XG4gIHB1YmxpYyByZWFkb25seSBzdGF0ZXNUb092ZXJ3cml0ZTogTWV0YURhdGFNb2RlbFtdO1xuICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVzOiBhbnlbXTtcbiAgY29uc3RydWN0b3IoLi4ub3ZlcndyaXRlQ29uZmlnczogT3ZlcndyaXRlVHVwbGVbXSkge1xuICAgIGNvbnN0IHJlZHVjZXIgPSBjcmVhdGVNZXRhVHVwbGVSZWR1Y2VyKGlzRGV2TW9kZSgpKTtcbiAgICBjb25zdCBbc3RhdGVzLCB2YWx1ZXNdID0gb3ZlcndyaXRlQ29uZmlncy5yZWR1Y2U8TWV0YVR1cGxlPihyZWR1Y2VyLCBbXG4gICAgICBbXSxcbiAgICAgIFtdLFxuICAgIF0pO1xuXG4gICAgdGhpcy5zdGF0ZXNUb092ZXJ3cml0ZSA9IHN0YXRlcztcbiAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWV0YURhdGEoXG4gIHN0YXRlOiBTdGF0ZUNsYXNzLFxuICBkZXZNb2RlOiBudW1iZXIsXG4pOiBNZXRhRGF0YU1vZGVsIHwgbnVsbCB7XG4gIGNvbnN0IG1ldGEgPSBuZXcgT2JqZWN0KGdldFN0b3JlTWV0YWRhdGEoc3RhdGUgYXMgYW55KSkgYXMgTWV0YURhdGFNb2RlbDtcbiAgY29uc3QgaXNOZ3hzTWV0YSA9IG1ldGEubmFtZSAmJiAnZGVmYXVsdHMnIGluIG1ldGE7XG5cbiAgLy8gUmV1c2FiaWxpdHkgSGFjazogZGV2TW9kZSBpcyBudW1iZXIgb24gcHVycG9zZVxuICBpZiAoIWlzTmd4c01ldGEgJiYgZGV2TW9kZSA9PT0gLTIpIHtcbiAgICBjb25zb2xlLndhcm4oYFJlc2V0IFBsdWdpbiBXYXJuaW5nOiAke21ldGEubmFtZX0gaXMgbm90IGEgc3RhdGUgY2xhc3MuYCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gbWV0YTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWV0YURhdGFMaXN0UmVkdWNlcihkZXZNb2RlOiBib29sZWFuKTogTWV0YUxpc3RSZWR1Y2VyIHtcbiAgcmV0dXJuIChhY2M6IE1ldGFEYXRhTW9kZWxbXSwgc3RhdGU6IFN0YXRlQ2xhc3MpOiBNZXRhRGF0YU1vZGVsW10gPT4ge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgY29uc3QgbWV0YSA9IGdldE1ldGFEYXRhKHN0YXRlLCB+ZGV2TW9kZSk7XG5cbiAgICByZXR1cm4gbWV0YSA/IGFjYy5jb25jYXQobWV0YSkgOiBhY2M7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1ldGFUdXBsZVJlZHVjZXIoZGV2TW9kZTogYm9vbGVhbik6IE1ldGFUdXBsZVJlZHVjZXIge1xuICByZXR1cm4gKGFjYzogTWV0YVR1cGxlLCBbc3RhdGUsIHZhbHVlXTogT3ZlcndyaXRlVHVwbGUpOiBNZXRhVHVwbGUgPT4ge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgY29uc3QgbWV0YSA9IGdldE1ldGFEYXRhKHN0YXRlLCB+ZGV2TW9kZSk7XG5cbiAgICByZXR1cm4gbWV0YSA/IFthY2NbMF0uY29uY2F0KG1ldGEpLCBhY2NbMV0uY29uY2F0KHZhbHVlKV0gOiBhY2M7XG4gIH07XG59XG4iXX0=