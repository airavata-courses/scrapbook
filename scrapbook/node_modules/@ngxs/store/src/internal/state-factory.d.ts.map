{"version":3,"file":"state-factory.d.ts","sources":["state-factory.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Injector, OnDestroy } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { MappedStore, StateClassInternal, StatesAndDefaults, StatesByName, RuntimeSelectorContext } from './internals';\r\nimport { InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\nexport declare class StateFactory implements OnDestroy {\r\n    private _injector;\r\n    private _config;\r\n    private _parentFactory;\r\n    private _actions;\r\n    private _actionResults;\r\n    private _stateContextFactory;\r\n    private _initialState;\r\n    private _actionsSubscription;\r\n    constructor(_injector: Injector, _config: NgxsConfig, _parentFactory: StateFactory, _actions: InternalActions, _actionResults: InternalDispatchedActionResults, _stateContextFactory: StateContextFactory, _initialState: any);\r\n    private _states;\r\n    readonly states: MappedStore[];\r\n    private _statesByName;\r\n    readonly statesByName: StatesByName;\r\n    private _statePaths;\r\n    private readonly statePaths;\r\n    getRuntimeSelectorContext: () => RuntimeSelectorContext;\r\n    private static cloneDefaults;\r\n    private static checkStatesAreValid;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Add a new state to the global defs.\r\n     */\r\n    add(stateClasses: StateClassInternal[]): MappedStore[];\r\n    /**\r\n     * Add a set of states to the store and return the defaults\r\n     */\r\n    addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults;\r\n    /**\r\n     * Bind the actions to the handlers\r\n     */\r\n    connectActionHandlers(): void;\r\n    /**\r\n     * Invoke actions on the states.\r\n     */\r\n    invokeActions(actions$: InternalActions, action: any): Observable<{}[]>;\r\n    private addToStatesMap;\r\n    private addRuntimeInfoToMeta;\r\n    /**\r\n     * @description\r\n     * the method checks if the state has already been added to the tree\r\n     * and completed the life cycle\r\n     * @param name\r\n     * @param path\r\n     */\r\n    private hasBeenMountedAndBootstrapped;\r\n}\r\n"]}