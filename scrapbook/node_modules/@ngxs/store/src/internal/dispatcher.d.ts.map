{"version":3,"file":"dispatcher.d.ts","sources":["dispatcher.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ErrorHandler } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ActionContext, InternalActions } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\nexport declare class InternalDispatchedActionResults extends Subject<ActionContext> {\r\n}\r\nexport declare class InternalDispatcher {\r\n    private _errorHandler;\r\n    private _actions;\r\n    private _actionResults;\r\n    private _pluginManager;\r\n    private _stateStream;\r\n    private _ngxsExecutionStrategy;\r\n    constructor(_errorHandler: ErrorHandler, _actions: InternalActions, _actionResults: InternalDispatchedActionResults, _pluginManager: PluginManager, _stateStream: StateStream, _ngxsExecutionStrategy: InternalNgxsExecutionStrategy);\r\n    /**\r\n     * Dispatches event(s).\r\n     */\r\n    dispatch(actionOrActions: any | any[]): Observable<any>;\r\n    private dispatchByEvents;\r\n    private dispatchSingle;\r\n    private getActionResultStream;\r\n    private createDispatchObservable;\r\n}\r\n"]}