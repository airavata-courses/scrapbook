import { StateOperations, StatesAndDefaults } from '../internal/internals';
import { InternalDispatcher } from '../internal/dispatcher';
import { StateStream } from './state-stream';
import { NgxsConfig } from '../symbols';
import { ConfigValidator } from '../internal/config-validator';
/**
 * State Context factory class
 * @ignore
 */
import * as ɵngcc0 from '@angular/core';
export declare class InternalStateOperations {
    private _stateStream;
    private _dispatcher;
    private _config;
    constructor(_stateStream: StateStream, _dispatcher: InternalDispatcher, _config: NgxsConfig, configValidator: ConfigValidator);
    /**
     * Returns the root state operators.
     */
    getRootStateOperations(): StateOperations<any>;
    private ensureStateAndActionsAreImmutable;
    setStateToTheCurrentWithNew(results: StatesAndDefaults): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InternalStateOperations, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<InternalStateOperations>;
}

//# sourceMappingURL=state-operations.d.ts.map