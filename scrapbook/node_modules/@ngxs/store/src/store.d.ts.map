{"version":3,"file":"store.d.ts","sources":["store.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Type } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { NgxsConfig } from './symbols';\r\nimport { StateToken } from './state-token/state-token';\r\nimport { StateFactory } from './internal/state-factory';\r\nexport declare class Store {\r\n    private _stateStream;\r\n    private _internalStateOperations;\r\n    private _config;\r\n    private _internalExecutionStrategy;\r\n    private _stateFactory;\r\n    constructor(_stateStream: StateStream, _internalStateOperations: InternalStateOperations, _config: NgxsConfig, _internalExecutionStrategy: InternalNgxsExecutionStrategy, _stateFactory: StateFactory, initialStateValue: any);\r\n    /**\r\n     * Dispatches event(s).\r\n     */\r\n    dispatch(actionOrActions: any | any[]): Observable<any>;\r\n    /**\r\n     * Selects a slice of data from the store.\r\n     */\r\n    select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n    select<T = any>(selector: string | Type<any>): Observable<T>;\r\n    select<T>(selector: StateToken<T>): Observable<T>;\r\n    /**\r\n     * Select one slice of data from the store.\r\n     */\r\n    selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n    selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n    selectOnce<T>(selector: StateToken<T>): Observable<T>;\r\n    /**\r\n     * Select a snapshot from the state.\r\n     */\r\n    selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n    selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n    selectSnapshot<T>(selector: StateToken<T>): T;\r\n    /**\r\n     * Allow the user to subscribe to the root of the state\r\n     */\r\n    subscribe(fn?: (value: any) => void): Subscription;\r\n    /**\r\n     * Return the raw value of the state.\r\n     */\r\n    snapshot(): any;\r\n    /**\r\n     * Reset the state to a specific point in time. This method is useful\r\n     * for plugin's who need to modify the state directly or unit testing.\r\n     */\r\n    reset(state: any): any;\r\n    private getStoreBoundSelectorFn;\r\n    private initStateStream;\r\n}\r\n"]}