{"version":3,"file":"actions-stream.d.ts","sources":["actions-stream.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Subject, Observable } from 'rxjs';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport declare const enum ActionStatus {\r\n    Dispatched = \"DISPATCHED\",\r\n    Successful = \"SUCCESSFUL\",\r\n    Canceled = \"CANCELED\",\r\n    Errored = \"ERRORED\"\r\n}\r\nexport interface ActionContext<T = any> {\r\n    status: ActionStatus;\r\n    action: T;\r\n    error?: Error;\r\n}\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport declare class OrderedSubject<T> extends Subject<T> {\r\n    private _itemQueue;\r\n    private _busyPushingNext;\r\n    next(value?: T): void;\r\n}\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\nexport declare class InternalActions extends OrderedSubject<ActionContext> {\r\n}\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\nexport declare class Actions extends Observable<any> {\r\n    constructor(internalActions$: InternalActions, internalExecutionStrategy: InternalNgxsExecutionStrategy);\r\n}\r\n"]}