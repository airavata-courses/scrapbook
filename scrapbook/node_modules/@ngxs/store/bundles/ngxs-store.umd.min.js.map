{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ngxs/store/src/configs/messages.config.ts","ng://@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","ng://@ngxs/store/src/symbols.ts","ng://@ngxs/store/src/execution/symbols.ts","ng://@ngxs/store/src/utils/utils.ts","ng://@ngxs/store/src/internal/internals.ts","ng://@ngxs/store/src/operators/of-action.ts","ng://@ngxs/store/src/operators/leave-ngxs.ts","ng://@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","ng://@ngxs/store/src/actions-stream.ts","ng://@ngxs/store/src/utils/compose.ts","ng://@ngxs/store/src/internal/state-stream.ts","ng://@ngxs/store/src/plugin-manager.ts","ng://@ngxs/store/src/internal/dispatcher.ts","ng://@ngxs/store/src/utils/freeze.ts","ng://@ngxs/store/src/host-environment/host-environment.ts","ng://@ngxs/store/src/internal/config-validator.ts","ng://@ngxs/store/src/internal/state-operations.ts","ng://@ngxs/store/src/internal/state-context-factory.ts","ng://@ngxs/store/src/internal/state-operators.ts","ng://@ngxs/store/src/utils/store-validators.ts","ng://@ngxs/store/src/internal/state-factory.ts","ng://@ngxs/store/src/internal/lifecycle-state-manager.ts","ng://@ngxs/store/src/utils/selector-utils.ts","ng://@ngxs/store/src/store.ts","ng://@ngxs/store/src/decorators/select/select-factory.ts","ng://@ngxs/store/src/actions/actions.ts","ng://@ngxs/store/src/ivy/ivy-enabled-in-dev-mode.ts","ng://@ngxs/store/src/modules/ngxs-root.module.ts","ng://@ngxs/store/src/modules/ngxs-feature.module.ts","ng://@ngxs/store/src/module.ts","ng://@ngxs/store/src/decorators/select/symbols.ts","ng://@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts","ng://@ngxs/store/src/state-token/state-token.ts","ng://@ngxs/store/src/decorators/action.ts","ng://@ngxs/store/src/decorators/select/select.ts","ng://@ngxs/store/src/decorators/selector/selector.ts","ng://@ngxs/store/src/decorators/selector-options.ts","ng://@ngxs/store/src/decorators/state.ts","ng://@ngxs/store/src/ivy/ensure-state-class-is-injectable.ts","ng://@ngxs/store/src/public_to_deprecate.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","r","e","ar","push","error","__spread","concat","STATE_NAME","STATE_UNIQUE","STATE_NAME_PROPERTY","STATE_DECORATOR","INCORRECT_PRODUCTION","INCORRECT_DEVELOPMENT","SELECT_FACTORY_NOT_CONNECTED","ACTION_DECORATOR","SELECTOR_DECORATOR","ZONE_WARNING","PATCHING_ARRAY","PATCHING_PRIMITIVE","UNDECORATED_STATE_IN_IVY","CONFIG_MESSAGES","_a","VALIDATION_CODE","name","current","newName","oldName","DispatchOutsideZoneNgxsExecutionStrategy","_ngZone","_platformId","verifyZoneIsNotNooped","enter","func","isPlatformServer","runInsideAngular","runOutsideAngular","leave","NgZone","isInAngularZone","run","ngZone","console","warn","Injectable","Inject","args","PLATFORM_ID","ROOT_STATE_TOKEN","InjectionToken","FEATURE_STATE_TOKEN","NGXS_PLUGINS","NG_TEST_MODE","NG_DEV_MODE","META_KEY","META_OPTIONS_KEY","SELECTOR_META_KEY","NgxsConfig","defaultsState","selectorOptions","injectContainerState","suppressErrors","compatibility","strictContentSecurityPolicy","executionStrategy","previousValue","currentValue","firstChange","NGXS_EXECUTION_STRATEGY","getActionTypeFromInstance","action","type","setValue","obj","prop","val","split","lastIndex","reduce","acc","part","index","isArray","slice","getValue","isObject","item","mergeDeep","base","sources","_i","source","shift","key","_b","ensureStoreMetadata","target","defaultMetadata_1","actions","defaults","path","makeRootSelector","context","getStateGetter","children","defineProperty","getStoreMetadata","ensureSelectorMetadata","originalFn","containerClass","selectorName","getSelectorOptions","getSelectorMetadata","propGetter","paths","config","copyOfPaths","compliantPropGetter","segments","seg","l","expr","Function","fastPropGetter","getStateDiffChanges","mappedStore","diff","currentAppState","newAppState","NgxsSimpleChange","isInitialised","ofActionDispatched","allowedTypes","ofActionOperator","statuses","mapOperator","mapAction","allowedMap","filterMap","klass","allowedStatusMap","status","createAllowedStatusesMap","pipe","allowedStatuses","filter","ctx","actionType","typeMatch","statusMatch","filterStatus","mapActionResult","map","result","successful","canceled","leaveNgxs","ngxsExecutionStrategy","Observable","sink","subscribe","complete","InternalNgxsExecutionStrategy","_executionStrategy","OrderedSubject","_this","_super","_itemQueue","_busyPushingNext","tslib_1.__extends","unshift","nextValue","pop","Subject","InternalActions","Actions","internalActions$","internalExecutionStrategy","observer","childSubscription","add","compose","funcs","curr","nextArgs","StateStream","BehaviorSubject","PluginManager","_parentManager","_pluginHandlers","plugins","registerHandlers","pluginHandlers","getPluginHandlers","rootPlugins","plugin","handle","bind","decorators","Optional","SkipSelf","InternalDispatchedActionResults","InternalDispatcher","_errorHandler","_actions","_actionResults","_pluginManager","_stateStream","_ngxsExecutionStrategy","dispatch","actionOrActions","dispatchByEvents","handleError","of","forkJoin","dispatchSingle","Error","throwError","prevState","nextState","nextAction","actionResult$","getActionResultStream","createDispatchObservable","shareReplay","take","exhaustMap","EMPTY","ErrorHandler","deepFreeze","freeze","oIsFunction","hasOwnProp","getOwnPropertyNames","forEach","isFrozen","HostEnvironment","isDevMode","isTestMode","ConfigValidator","_host","_config","developmentMode","verifyDevMode","isIncorrectProduction","MESSAGES","CODE","isIncorrectDevelopment","InternalStateOperations","_dispatcher","configValidator","getRootStateOperations","rootStateOperations","getState","setState","newState","ensureStateAndActionsAreImmutable","root","frozenValue","setStateToTheCurrentWithNew","results","stateOperations","currentState","StateContextFactory","_internalStateOperations","createStateContext","setStateValue","newValue","instance","ngxsOnChanges","change","setStateFromOperator","stateOperator","patchState","existingState","simplePatch","StoreValidators","stateNameErrorMessage","checkCorrectStateName","stateNameRegex","test","checkStateNameIsUnique","state","statesByName","stateName","getValidStateMeta","meta","RegExp","StateFactory","_injector","_parentFactory","_stateContextFactory","_initialState","_actionsSubscription","_states","_statesByName","_statePaths","getRuntimeSelectorContext","memoize","stateFactory","resolveGetter","statePaths","getter","undefined","localOptions","globalSelectorOptions","states","cloneDefaults","checkStatesAreValid","stateClasses","ngOnDestroy","unsubscribe","newStates","addToStatesMap","graph","sorted","visited","visit","stateGraph","findName","stateClass","find","g","buildGraph","sortedStates","ancestors","dep","indexOf","join","keys","k","reverse","newObj","child","keyToFind","parent_1","parent_2","findFullParentPath","nameGraph","bootstrappedStores","sortedStates_1","tslib_1.__values","sortedStates_1_1","name_1","addRuntimeInfoToMeta","stateMap","get","hasBeenMountedAndBootstrapped","addAndReturnDefaults","classes","mappedStores","connectActionHandlers","mergeMap","invokeActions","defaultIfEmpty","catchError","actions$","_c","_d","metadata","actionMetas","actionMetas_1","actionMetas_1_1","actionMeta","stateContext","fn","Promise","from","options","cancelUncompleted","takeUntil","statesMap","stateClasses_1","stateClasses_1_1","valueIsBootstrappedInInitialState","Injector","INITIAL_STATE_TOKEN","LifecycleStateManager","internalStateOperations","stateContextFactory","bootstrapper","ngxsBootstrap","tap","invokeInit","appBootstrapped$","appBootstrapped","invokeBootstrap","mappedStores_1","mappedStores_1_1","firstDiffChange","ngxsOnInit","getStateContext","mappedStores_2","mappedStores_2_1","ngxsAfterBootstrap","NgxsBootstrapper","selectorOptionsMetaAccessor","getOptions","defineOptions","createSelector","selectors","creationMetadata","memoizedFn","returnValue","innerMemoizedFn","selectorMetaData","getExplicitSelectorOptions","selectorMetaDataClone","explicitOptions","getLocalSelectorOptions","setupSelectorMetadata","localSelectorOptions","argumentSelectorFunctions","selectorsToApply","canInjectContainerState","getSelectorsToApply","selector","getRootSelectorFactory","factory","getRuntimeSelectorInfo","rootState","argFn","ex","Store","_internalExecutionStrategy","_stateFactory","initialStateValue","initStateStream","select","selectorFn","getStoreBoundSelectorFn","err","distinctUntilChanged","selectOnce","selectSnapshot","snapshot","reset","makeSelectorFn","storeValues","SelectFactory","store","InitState","UpdateState","addedStates","ivyEnabledInDevMode$","ReplaySubject","NgxsRootModule","_store","_select","lifecycleStateManager","ng","_ivyEnabledInDevMode","probe","coreTokens","setIvyEnabledInDevMode","NgModule","NgxsFeatureModule","flattenedStates","flattenStates","total","values","NgxsModule","forRoot","ngModule","providers","ngxsTokenProviders","forFeature","provide","multi","useValue","isAngularInTestMode","useClass","ROOT_OPTIONS","useFactory","ngxsConfigFactory","deps","APP_BOOTSTRAP_LISTENER","appBootstrapListenerFactory","getInitialState","NGXS_STATE_CONTEXT_FACTORY","useExisting","NGXS_STATE_FACTORY","bootstrap","InitialState","DOLLAR_CHAR_CODE","createSelectorFn","rawSelector","lastCharIndex","charCodeAt","removeDollarAtTheEnd","NoopNgxsExecutionStrategy","StateToken","runtimeContext","getName","toString","actions_1","actions_1_1","selectorId","defineProperties","writable","enumerable","configurable","createSelectObservable","descriptor","newDescriptor","methodName","Éµprov","ensureStateClassIsInjectable","inheritedStateClass","getPrototypeOf","optionsWithInheritance","inheritanceOptions","getStateOptions","params","inheritedMeta","mutateMetaData","action1","type1","action2","ensureSelectorMetadataInternal","ensureStoreMetadataInternal","getSelectorMetadataInternal","getStoreMetadataInternal"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum VALIDATION_CODE {\r\n  STATE_NAME = 'STATE_NAME',\r\n  STATE_UNIQUE = 'STATE_UNIQUE',\r\n  STATE_NAME_PROPERTY = 'STATE_NAME_PROPERTY',\r\n  STATE_DECORATOR = 'STATE_DECORATOR',\r\n  INCORRECT_PRODUCTION = 'INCORRECT_PRODUCTION',\r\n  INCORRECT_DEVELOPMENT = 'INCORRECT_DEVELOPMENT',\r\n  SELECT_FACTORY_NOT_CONNECTED = 'SELECT_FACTORY_NOT_CONNECTED',\r\n  ACTION_DECORATOR = 'ACTION_DECORATOR',\r\n  SELECTOR_DECORATOR = 'SELECTOR_DECORATOR',\r\n  ZONE_WARNING = 'ZONE_WARNING',\r\n  PATCHING_ARRAY = 'PATCHING_ARRAY',\r\n  PATCHING_PRIMITIVE = 'PATCHING_PRIMITIVE',\r\n  UNDECORATED_STATE_IN_IVY = 'UNDECORATED_STATE_IN_IVY'\r\n}\r\n\r\nexport const CONFIG_MESSAGES = {\r\n  [VALIDATION_CODE.STATE_NAME]: (name: string) =>\r\n    `${name} is not a valid state name. It needs to be a valid object property name.`,\r\n  [VALIDATION_CODE.STATE_NAME_PROPERTY]: () => `States must register a 'name' property`,\r\n  [VALIDATION_CODE.STATE_UNIQUE]: (current: string, newName: string, oldName: string) =>\r\n    `State name '${current}' from ${newName} already exists in ${oldName}`,\r\n  [VALIDATION_CODE.STATE_DECORATOR]: () => 'States must be decorated with @State() decorator',\r\n  [VALIDATION_CODE.INCORRECT_PRODUCTION]: () =>\r\n    'Angular is running in production mode but NGXS is still running in the development mode!\\n' +\r\n    'Please set developmentMode to false on the NgxsModule options when in production mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: () =>\r\n    'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: () =>\r\n    'You have forgotten to import the NGXS module!',\r\n  [VALIDATION_CODE.ACTION_DECORATOR]: () =>\r\n    '@Action() decorator cannot be used with static methods',\r\n  [VALIDATION_CODE.SELECTOR_DECORATOR]: () => 'Selectors only work on methods',\r\n  [VALIDATION_CODE.ZONE_WARNING]: () =>\r\n    'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\r\n    'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\r\n    'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })',\r\n  [VALIDATION_CODE.PATCHING_ARRAY]: () => 'Patching arrays is not supported.',\r\n  [VALIDATION_CODE.PATCHING_PRIMITIVE]: () => 'Patching primitives is not supported.',\r\n  [VALIDATION_CODE.UNDECORATED_STATE_IN_IVY]: (name: string) =>\r\n    `'${name}' class should be decorated with @Injectable() right after the @State() decorator`\r\n};\r\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n@Injectable()\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\r\n    this.verifyZoneIsNotNooped(this._ngZone);\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n\r\n  private verifyZoneIsNotNooped(ngZone: NgZone): void {\r\n    // `NoopNgZone` is not exposed publicly as it doesn't expect\r\n    // to be used outside of the core Angular code, thus we just have\r\n    // to check if the zone doesn't extend or instanceof `NgZone`\r\n    if (ngZone instanceof NgZone) {\r\n      return;\r\n    }\r\n\r\n    console.warn(CONFIG_MESSAGES[VALIDATION_CODE.ZONE_WARNING]());\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { PlainObject, StateClass } from '@ngxs/store/internals';\r\nimport { SharedSelectorOptions, Callback } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { StateToken } from './state-token/state-token';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport const NG_TEST_MODE = new InjectionToken<Callback<boolean>>('NG_TEST_MODE');\r\nexport const NG_DEV_MODE = new InjectionToken<Callback<boolean>>('NG_DEV_MODE');\r\n\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnChanges> &\r\n  Partial<NgxsOnInit> &\r\n  Partial<NgxsAfterBootstrap>;\r\n\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will circumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * @deprecated will be removed after v4\r\n   * (default: {})\r\n   */\r\n  defaultsState: PlainObject = {};\r\n  /**\r\n   * Defining shared selector options\r\n   */\r\n  selectorOptions: SharedSelectorOptions = {\r\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\r\n    suppressErrors: true // TODO: default is true in v3, will change in v4\r\n  };\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string | StateToken<T>;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: StateClass[];\r\n}\r\n\r\n/**\r\n * Represents a basic change from a previous to a new value for a single state instance.\r\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\r\n */\r\nexport class NgxsSimpleChange<T = any> {\r\n  constructor(\r\n    public readonly previousValue: T,\r\n    public readonly currentValue: T,\r\n    public readonly firstChange: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * On change interface\r\n */\r\nexport interface NgxsOnChanges {\r\n  ngxsOnChanges(change: NgxsSimpleChange): void;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY'\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  } else {\r\n    return action.type;\r\n  }\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n\r\n/**\r\n * Simple object check.\r\n *\r\n *    isObject({a:1}) //=> true\r\n *    isObject(1) //=> false\r\n *\r\n * @ignore\r\n */\r\nexport const isObject = (item: any) => {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n};\r\n\r\n/**\r\n * Deep merge two objects.\r\n *\r\n *    mergeDeep({a:1, b:{x: 1, y:2}}, {b:{x: 3}, c:4}) //=> {a:1, b:{x:3, y:2}, c:4}\r\n *\r\n * @param base base object onto which `sources` will be applied\r\n */\r\nexport const mergeDeep = (base: any, ...sources: any[]): any => {\r\n  if (!sources.length) return base;\r\n  const source = sources.shift();\r\n\r\n  if (isObject(base) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!base[key]) Object.assign(base, { [key]: {} });\r\n        mergeDeep(base[key], source[key]);\r\n      } else {\r\n        Object.assign(base, { [key]: source[key] });\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergeDeep(base, ...sources);\r\n};\r\n","import { PlainObjectOf, StateClass } from '@ngxs/store/internals';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  NgxsSimpleChange,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { ActionHandlerMetaData } from '../actions/symbols';\r\nimport { getValue } from '../utils/utils';\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n}\r\n\r\nexport type StateKeyGraph = PlainObjectOf<string[]>;\r\nexport type StatesByName = PlainObjectOf<StateClassInternal>;\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actionOrActions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  makeRootSelector: SelectorFactory | null;\r\n  children?: StateClassInternal[];\r\n}\r\n\r\nexport interface RuntimeSelectorContext {\r\n  getStateGetter(key: any): (state: any) => any;\r\n  getSelectorOptions(localOptions?: SharedSelectorOptions): SharedSelectorOptions;\r\n}\r\n\r\nexport type SelectFromRootState = (rootState: any) => any;\r\nexport type SelectorFactory = (runtimeContext: RuntimeSelectorContext) => SelectFromRootState;\r\n\r\nexport interface SharedSelectorOptions {\r\n  injectContainerState?: boolean;\r\n  suppressErrors?: boolean;\r\n}\r\n\r\nexport interface SelectorMetaDataModel {\r\n  makeRootSelector: SelectorFactory | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  isInitialised: boolean;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  path: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\nexport type Callback<T = any, V = any> = (...args: V[]) => T;\r\n\r\nexport interface RootStateDiff<T> {\r\n  currentAppState: T;\r\n  newAppState: T;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      makeRootSelector(context: RuntimeSelectorContext) {\r\n        return context.getStateGetter(defaultMetadata.name);\r\n      },\r\n      children: []\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      makeRootSelector: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null,\r\n      getSelectorOptions: () => ({})\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = paths.slice();\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClassInternal) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta[META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClassInternal[]): PlainObjectOf<StateClassInternal> {\r\n  return states.reduce<PlainObjectOf<StateClassInternal>>(\r\n    (result: PlainObjectOf<StateClassInternal>, stateClass: StateClassInternal) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: PlainObjectOf<string> = {}\r\n): PlainObjectOf<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: PlainObjectOf<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n\r\nexport function getStateDiffChanges<T>(\r\n  mappedStore: MappedStore,\r\n  diff: RootStateDiff<T>\r\n): NgxsSimpleChange {\r\n  const previousValue: T = getValue(diff.currentAppState, mappedStore.path);\r\n  const currentValue: T = getValue(diff.newAppState, mappedStore.path);\r\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\r\n}\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { ActionType } from '../actions/symbols';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T = any>(allowedType: ActionType): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T = any>(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: ActionType[]): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, ActionCompletion> {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator(\r\n  allowedTypes: ActionType[],\r\n  statuses?: ActionStatus[],\r\n  // This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\r\n  // since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\r\n  // defaults to `any`, thus there is no sense from union type.\r\n  mapOperator: () => OperatorFunction<ActionContext, any> = mapAction\r\n): OperatorFunction<ActionContext, any> {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ninterface FilterMap {\r\n  [key: string]: boolean;\r\n}\r\n\r\nfunction createAllowedActionTypesMap(types: ActionType[]): FilterMap {\r\n  return types.reduce((filterMap: FilterMap, klass: any) => {\r\n    filterMap[getActionTypeFromInstance(klass)!] = true;\r\n    return filterMap;\r\n  }, <FilterMap>{});\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce((filterMap: FilterMap, status: ActionStatus) => {\r\n    filterMap[status] = true;\r\n    return filterMap;\r\n  }, <FilterMap>{});\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\r\n  // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\r\n  constructor(\r\n    internalActions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      const childSubscription = internalActions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe({\r\n          next: ctx => observer.next(ctx),\r\n          error: error => observer.error(error),\r\n          complete: () => observer.complete()\r\n        });\r\n\r\n      observer.add(childSubscription);\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<PlainObject> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';\r\nimport { NGXS_PLUGINS, NgxsPlugin, NgxsPluginFn } from './symbols';\r\n\r\n@Injectable()\r\nexport class PluginManager {\r\n  public plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _pluginHandlers: NgxsPlugin[]\r\n  ) {\r\n    this.registerHandlers();\r\n  }\r\n\r\n  private get rootPlugins(): NgxsPluginFn[] {\r\n    return (this._parentManager && this._parentManager.plugins) || this.plugins;\r\n  }\r\n\r\n  private registerHandlers(): void {\r\n    const pluginHandlers: NgxsPluginFn[] = this.getPluginHandlers();\r\n    this.rootPlugins.push(...pluginHandlers);\r\n  }\r\n\r\n  private getPluginHandlers(): NgxsPluginFn[] {\r\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\r\n    return handlers.map(\r\n      (plugin: NgxsPlugin) =>\r\n        (plugin.handle ? plugin.handle.bind(plugin) : plugin) as NgxsPluginFn\r\n    );\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\r\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => {\r\n          try {\r\n            this._errorHandler.handleError(error);\r\n          } catch {}\r\n        })\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\r\n      return forkJoin(actionOrActions.map(action => this.dispatchSingle(action)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const type: string | undefined = getActionTypeFromInstance(action);\r\n    if (!type) {\r\n      const error = new Error(\r\n        `This action doesn't have a type property: ${action.constructor.name}`\r\n      );\r\n      return throwError(error);\r\n    }\r\n\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return EMPTY;\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';\r\nimport { Callback } from '../internal/internals';\r\n\r\n@Injectable()\r\nexport class HostEnvironment {\r\n  constructor(\r\n    @Inject(NG_DEV_MODE) public isDevMode: Callback<boolean>,\r\n    @Inject(NG_TEST_MODE) public isTestMode: Callback<boolean>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { HostEnvironment } from '../host-environment/host-environment';\r\n\r\n@Injectable()\r\nexport class ConfigValidator {\r\n  constructor(private _host: HostEnvironment, private _config: NgxsConfig) {}\r\n\r\n  private get isIncorrectProduction(): boolean {\r\n    return !this._host.isDevMode() && this._config.developmentMode;\r\n  }\r\n\r\n  private get isIncorrectDevelopment(): boolean {\r\n    return this._host.isDevMode() && !this._config.developmentMode;\r\n  }\r\n\r\n  public verifyDevMode(): void {\r\n    if (this._host.isTestMode()) {\r\n      return;\r\n    }\r\n\r\n    if (this.isIncorrectProduction) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());\r\n    } else if (this.isIncorrectDevelopment) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\nimport { ConfigValidator } from '../internal/config-validator';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig,\r\n    configValidator: ConfigValidator\r\n  ) {\r\n    configValidator.verifyDevMode();\r\n  }\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actionOrActions: any | any[]) => this._dispatcher.dispatch(actionOrActions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext, StateOperator } from '../symbols';\r\nimport { getStateDiffChanges, MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(mappedStore: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, mappedStore.path);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, mappedStore.path, newValue);\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const change: NgxsSimpleChange = getStateDiffChanges<T>(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(change);\r\n      }\r\n\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    if (Array.isArray(val)) {\r\n      throw new Error(MESSAGES[CODE.PATCHING_ARRAY]());\r\n    } else if (typeof val !== 'object') {\r\n      throw new Error(MESSAGES[CODE.PATCHING_PRIMITIVE]());\r\n    }\r\n\r\n    const newState: any = { ...(existingState as any) };\r\n    for (const key in val) {\r\n      // deep clone for patch compatibility\r\n      // noinspection JSUnfilteredForInLoop (IDE)\r\n      newState[key] = (val as any)[key];\r\n    }\r\n\r\n    return newState as T;\r\n  };\r\n}\r\n","import {\r\n  getStoreMetadata,\r\n  MetaDataModel,\r\n  StateClassInternal,\r\n  StatesByName\r\n} from '../internal/internals';\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\n\r\nexport abstract class StoreValidators {\r\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  public static stateNameErrorMessage(name: string) {\r\n    return MESSAGES[CODE.STATE_NAME](name);\r\n  }\r\n\r\n  public static checkCorrectStateName(name: string | null) {\r\n    if (!name) {\r\n      throw new Error(MESSAGES[CODE.STATE_NAME_PROPERTY]());\r\n    }\r\n\r\n    if (!this.stateNameRegex.test(name)) {\r\n      throw new Error(this.stateNameErrorMessage(name));\r\n    }\r\n  }\r\n\r\n  public static checkStateNameIsUnique(\r\n    state: StateClassInternal,\r\n    statesByName: StatesByName\r\n  ): string {\r\n    const meta: MetaDataModel = this.getValidStateMeta(state);\r\n    const stateName: string = meta!.name as string;\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throw new Error(MESSAGES[CODE.STATE_UNIQUE](stateName, state.name, existingState.name));\r\n    }\r\n    return stateName;\r\n  }\r\n\r\n  public static getValidStateMeta(state: StateClassInternal): MetaDataModel {\r\n    const meta: MetaDataModel = getStoreMetadata(state);\r\n    if (!meta) {\r\n      throw new Error(MESSAGES[CODE.STATE_DECORATOR]());\r\n    }\r\n\r\n    return meta;\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf, Inject, OnDestroy } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError, Subscription } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  propGetter,\r\n  StateClassInternal,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort,\r\n  RuntimeSelectorContext,\r\n  SharedSelectorOptions\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { INITIAL_STATE_TOKEN, PlainObjectOf, memoize } from '@ngxs/store/internals';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory implements OnDestroy {\r\n  private _actionsSubscription: Subscription | null = null;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    private _initialState: any\r\n  ) {}\r\n\r\n  private _states: MappedStore[] = [];\r\n\r\n  get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _statesByName: StatesByName = {};\r\n\r\n  get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private _statePaths: PlainObjectOf<string> = {};\r\n\r\n  private get statePaths(): PlainObjectOf<string> {\r\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\r\n  }\r\n\r\n  getRuntimeSelectorContext = memoize(() => {\r\n    const stateFactory = this;\r\n\r\n    function resolveGetter(key: string) {\r\n      const path = stateFactory.statePaths[key];\r\n      return path ? propGetter(path.split('.'), stateFactory._config) : null;\r\n    }\r\n\r\n    const context: RuntimeSelectorContext = this._parentFactory\r\n      ? this._parentFactory.getRuntimeSelectorContext()\r\n      : {\r\n          getStateGetter(key: string) {\r\n            let getter = resolveGetter(key);\r\n            if (getter) {\r\n              return getter;\r\n            }\r\n            return (...args) => {\r\n              // Late loaded getter\r\n              if (!getter) {\r\n                getter = resolveGetter(key);\r\n              }\r\n              return getter ? getter(...args) : undefined;\r\n            };\r\n          },\r\n          getSelectorOptions(localOptions?: SharedSelectorOptions) {\r\n            const globalSelectorOptions = stateFactory._config.selectorOptions;\r\n            return {\r\n              ...globalSelectorOptions,\r\n              ...(localOptions || {})\r\n            };\r\n          }\r\n        };\r\n    return context;\r\n  });\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = defaults.slice();\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private static checkStatesAreValid(stateClasses: StateClassInternal[]): void {\r\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // I'm using non-null assertion here since `_actionsSubscrition` will\r\n    // be 100% defined. This is because `ngOnDestroy()` cannot be invoked\r\n    // on the `StateFactory` until its initialized :) An it's initialized\r\n    // for the first time along with the `NgxsRootModule`.\r\n    this._actionsSubscription!.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\r\n    StateFactory.checkStatesAreValid(stateClasses);\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const paths: PlainObjectOf<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: PlainObjectOf<StateClassInternal> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClassInternal = nameGraph[name];\r\n      const path: string = paths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, path);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        path,\r\n        isInitialised: false,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\r\n    const classes: StateClassInternal[] = stateClasses || [];\r\n\r\n    const mappedStores: MappedStore[] = this.add(classes);\r\n    const defaults = mappedStores.reduce(\r\n      (result: any, mappedStore: MappedStore) =>\r\n        setValue(result, mappedStore.path, mappedStore.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states: mappedStores };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._actionsSubscription !== null) return;\r\n    this._actionsSubscription = this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action: any) {\r\n    const type = getActionTypeFromInstance(action)!;\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              // If this observable has been completed w/o emitting\r\n              // any value then we wouldn't want to complete the whole chain\r\n              // of actions. Since if any observable completes then\r\n              // action will be canceled.\r\n              // For instance if any action handler would've had such statement:\r\n              // `handler(ctx) { return EMPTY; }`\r\n              // then the action will be canceled.\r\n              // See https://github.com/ngxs/store/issues/1568\r\n              result = result.pipe(defaultIfEmpty({}));\r\n\r\n              if (actionMeta.options.cancelUncompleted) {\r\n                // todo: ofActionDispatched should be used with action class\r\n                result = result.pipe(\r\n                  takeUntil(actions$.pipe(ofActionDispatched(action as any)))\r\n                );\r\n              }\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(\r\n    stateClasses: StateClassInternal[]\r\n  ): { newStates: StateClassInternal[] } {\r\n    const newStates: StateClassInternal[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n      const unmountedState = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, path: string): void {\r\n    this.statePaths[meta.name!] = path;\r\n    // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\r\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\r\n    // We will need to come up with an alternative in v4 because this is used by many plugins\r\n    meta.path = path;\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrappedInInitialState: boolean =\r\n      getValue(this._initialState, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper, PlainObject } from '@ngxs/store/internals';\r\nimport { filter, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { getStateDiffChanges, MappedStore, StatesAndDefaults } from './internals';\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => this.invokeBootstrap(results!.states));\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(mappedStores: MappedStore[]): void {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const currentAppState: PlainObject = {};\r\n        const newAppState: PlainObject = this.internalStateOperations\r\n          .getRootStateOperations()\r\n          .getState();\r\n\r\n        const firstDiffChange: NgxsSimpleChange = getStateDiffChanges(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(firstDiffChange);\r\n      }\r\n\r\n      if (instance.ngxsOnInit) {\r\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\r\n      }\r\n\r\n      mappedStore.isInitialised = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(mappedStores: MappedStore[]) {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n      if (instance.ngxsAfterBootstrap) {\r\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\r\n      }\r\n    }\r\n  }\r\n\r\n  private getStateContext(mappedStore: MappedStore): StateContext<any> {\r\n    return this.stateContextFactory.createStateContext(mappedStore);\r\n  }\r\n}\r\n","import { memoize } from '@ngxs/store/internals';\r\n\r\nimport {\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata,\r\n  SelectorMetaDataModel,\r\n  SharedSelectorOptions,\r\n  RuntimeSelectorContext,\r\n  SelectorFactory,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\r\n\r\nexport const selectorOptionsMetaAccessor = {\r\n  getOptions: (target: any): SharedSelectorOptions => {\r\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\r\n  },\r\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\r\n    if (!target) return;\r\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\r\n  }\r\n};\r\n\r\ninterface CreationMetadata {\r\n  containerClass: any;\r\n  selectorName: string;\r\n  getSelectorOptions?: () => SharedSelectorOptions;\r\n}\r\n\r\ninterface RuntimeSelectorInfo {\r\n  selectorOptions: SharedSelectorOptions;\r\n  argumentSelectorFunctions: SelectFromRootState[];\r\n}\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: CreationMetadata\r\n) {\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn.apply(containerClass, args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  Object.setPrototypeOf(memoizedFn, originalFn);\r\n\r\n  const selectorMetaData = setupSelectorMetadata<T>(originalFn, creationMetadata);\r\n\r\n  const makeRootSelector: SelectorFactory = (context: RuntimeSelectorContext) => {\r\n    const { argumentSelectorFunctions, selectorOptions } = getRuntimeSelectorInfo(\r\n      context,\r\n      selectorMetaData,\r\n      selectors\r\n    );\r\n\r\n    return function selectFromRoot(rootState: any) {\r\n      // Determine arguments from the app state using the selectors\r\n      const results = argumentSelectorFunctions.map(argFn => argFn(rootState));\r\n\r\n      // if the lambda tries to access a something on the\r\n      // state that doesn't exist, it will throw a TypeError.\r\n      // since this is quite usual behaviour, we simply return undefined if so.\r\n      try {\r\n        return memoizedFn(...results);\r\n      } catch (ex) {\r\n        if (ex instanceof TypeError && selectorOptions.suppressErrors) {\r\n          return undefined;\r\n        }\r\n\r\n        throw ex;\r\n      }\r\n    };\r\n  };\r\n\r\n  selectorMetaData.makeRootSelector = makeRootSelector;\r\n\r\n  return memoizedFn;\r\n}\r\n\r\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\r\n  originalFn: T,\r\n  creationMetadata: CreationMetadata | undefined\r\n) {\r\n  const selectorMetaData = ensureSelectorMetadata(originalFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  let getExplicitSelectorOptions = () => ({});\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n    getExplicitSelectorOptions =\r\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\r\n  }\r\n  const selectorMetaDataClone = { ...selectorMetaData };\r\n  selectorMetaData.getSelectorOptions = () =>\r\n    getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\r\n  return selectorMetaData;\r\n}\r\n\r\nfunction getRuntimeSelectorInfo(\r\n  context: RuntimeSelectorContext,\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n): RuntimeSelectorInfo {\r\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\r\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\r\n  const selectorsToApply = getSelectorsToApply(\r\n    selectors,\r\n    selectorOptions,\r\n    selectorMetaData.containerClass\r\n  );\r\n\r\n  const argumentSelectorFunctions = selectorsToApply.map(selector => {\r\n    const factory = getRootSelectorFactory(selector);\r\n    return factory(context);\r\n  });\r\n  return {\r\n    selectorOptions,\r\n    argumentSelectorFunctions\r\n  };\r\n}\r\n\r\nfunction getLocalSelectorOptions(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  explicitOptions: SharedSelectorOptions\r\n): SharedSelectorOptions {\r\n  return {\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\r\n    ...(selectorMetaData.getSelectorOptions() || {}),\r\n    ...explicitOptions\r\n  };\r\n}\r\n\r\nfunction getSelectorsToApply(\r\n  selectors: any[] | undefined = [],\r\n  selectorOptions: SharedSelectorOptions,\r\n  containerClass: any\r\n) {\r\n  const selectorsToApply = [];\r\n  const canInjectContainerState =\r\n    selectors.length === 0 || selectorOptions.injectContainerState;\r\n  if (containerClass && canInjectContainerState) {\r\n    // If we are on a state class, add it as the first selector parameter\r\n    const metadata = getStoreMetadata(containerClass);\r\n    if (metadata) {\r\n      selectorsToApply.push(containerClass);\r\n    }\r\n  }\r\n  if (selectors) {\r\n    selectorsToApply.push(...selectors);\r\n  }\r\n  return selectorsToApply;\r\n}\r\n\r\n/**\r\n * This function gets the factory function to create the selector to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getRootSelectorFactory(selector: any): SelectorFactory {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.makeRootSelector) || (() => selector);\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\r\nimport { Observable, of, Subscription, throwError } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\nimport { INITIAL_STATE_TOKEN, PlainObject } from '@ngxs/store/internals';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { getRootSelectorFactory } from './utils/selector-utils';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { NgxsConfig } from './symbols';\r\nimport { StateToken } from './state-token/state-token';\r\nimport { StateFactory } from './internal/state-factory';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\r\n    private _stateFactory: StateFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    initialStateValue: any\r\n  ) {\r\n    this.initStateStream(initialStateValue);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select<T>(selector: StateToken<T>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        const { suppressErrors } = this._config.selectorOptions;\r\n\r\n        if (err instanceof TypeError && suppressErrors) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        return throwError(err);\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce<T>(selector: StateToken<T>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot<T>(selector: StateToken<T>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n\r\n  private getStoreBoundSelectorFn(selector: any) {\r\n    const makeSelectorFn = getRootSelectorFactory(selector);\r\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\r\n    return makeSelectorFn(runtimeContext);\r\n  }\r\n\r\n  private initStateStream(initialStateValue: any): void {\r\n    const value: PlainObject = this._stateStream.value;\r\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\r\n    if (storeIsEmpty) {\r\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\r\n      const storeValues: PlainObject = defaultStateNotEmpty\r\n        ? { ...this._config.defaultsState, ...initialStateValue }\r\n        : initialStateValue;\r\n\r\n      this._stateStream.next(storeValues);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @internal only use in @Select decorator\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory implements OnDestroy {\r\n  public static store: Store | null = null;\r\n  public static config: NgxsConfig | null = null;\r\n\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    SelectFactory.store = null;\r\n    SelectFactory.config = null;\r\n  }\r\n}\r\n","import { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n\r\n  constructor(public addedStates?: PlainObject) {}\r\n}\r\n","import { isDevMode } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\n\r\nexport const ivyEnabledInDevMode$ = new ReplaySubject<boolean>(1);\r\n\r\n/**\r\n * Ivy exposes helper functions to the global `window.ng` object.\r\n * Those functions are `getComponent, getContext,\r\n * getListeners, getViewComponent, getHostElement, getInjector,\r\n * getRootComponents, getDirectives, getDebugNode`\r\n * Previously, old view engine exposed `window.ng.coreTokens` and\r\n * `window.ng.probe` if an application was in development/production.\r\n * Ivy doesn't expose these functions in production. Developers will be able\r\n * to see warnings in both JIT/AOT modes, but only if an application\r\n * is in development.\r\n */\r\nexport function setIvyEnabledInDevMode(): void {\r\n  try {\r\n    // `try-catch` will also handle server-side rendering, as\r\n    // `window is not defined` will not be thrown.\r\n    const ng = (window as any).ng;\r\n    const _viewEngineEnabled = !!ng.probe && !!ng.coreTokens;\r\n    const _ivyEnabledInDevMode = !_viewEngineEnabled && isDevMode();\r\n    ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);\r\n  } catch {\r\n    ivyEnabledInDevMode$.next(false);\r\n  } finally {\r\n    ivyEnabledInDevMode$.complete();\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { Store } from '../store';\r\nimport { SelectFactory } from '../decorators/select/select-factory';\r\nimport { ROOT_STATE_TOKEN } from '../symbols';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { InitState } from '../actions/actions';\r\nimport { setIvyEnabledInDevMode } from '../ivy/ivy-enabled-in-dev-mode';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    _store: Store,\r\n    _select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClassInternal[] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Validate states on having the `@Injectable()` decorator in Ivy\r\n    setIvyEnabledInDevMode();\r\n\r\n    // Add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // Connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // Dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { FEATURE_STATE_TOKEN } from '../symbols';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { UpdateState } from '../actions/actions';\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    _store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: StateClassInternal[][] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\r\n    }\r\n  }\r\n\r\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\r\n    return states.reduce(\r\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\r\n      []\r\n    );\r\n  }\r\n}\r\n","import {\r\n  APP_BOOTSTRAP_LISTENER,\r\n  InjectionToken,\r\n  isDevMode,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Provider\r\n} from '@angular/core';\r\nimport {\r\n  INITIAL_STATE_TOKEN,\r\n  InitialState,\r\n  isAngularInTestMode,\r\n  NGXS_STATE_CONTEXT_FACTORY,\r\n  NGXS_STATE_FACTORY,\r\n  NgxsBootstrapper,\r\n  StateClass\r\n} from '@ngxs/store/internals';\r\n\r\nimport {\r\n  FEATURE_STATE_TOKEN,\r\n  NG_DEV_MODE,\r\n  NG_TEST_MODE,\r\n  NgxsConfig,\r\n  NgxsModuleOptions,\r\n  ROOT_STATE_TOKEN\r\n} from './symbols';\r\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select/select-factory';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { NgxsRootModule } from './modules/ngxs-root.module';\r\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { HostEnvironment } from './host-environment/host-environment';\r\nimport { ConfigValidator } from './internal/config-validator';\r\nimport { mergeDeep } from './utils/utils';\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule()\r\nexport class NgxsModule {\r\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\r\n\r\n  /**\r\n   * Root module factory\r\n   */\r\n  public static forRoot(\r\n    states: StateClass[] = [],\r\n    options: NgxsModuleOptions = {}\r\n  ): ModuleWithProviders<NgxsRootModule> {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        ConfigValidator,\r\n        HostEnvironment,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        ...NgxsModule.ngxsTokenProviders(states, options)\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders<NgxsFeatureModule> {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private static ngxsTokenProviders(\r\n    states: StateClass[],\r\n    options: NgxsModuleOptions\r\n  ): Provider[] {\r\n    return [\r\n      {\r\n        provide: NG_TEST_MODE,\r\n        useValue: isAngularInTestMode\r\n      },\r\n      {\r\n        provide: NG_DEV_MODE,\r\n        useValue: isDevMode\r\n      },\r\n      {\r\n        provide: NGXS_EXECUTION_STRATEGY,\r\n        useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n      },\r\n      {\r\n        provide: ROOT_STATE_TOKEN,\r\n        useValue: states\r\n      },\r\n      {\r\n        provide: NgxsModule.ROOT_OPTIONS,\r\n        useValue: options\r\n      },\r\n      {\r\n        provide: NgxsConfig,\r\n        useFactory: NgxsModule.ngxsConfigFactory,\r\n        deps: [NgxsModule.ROOT_OPTIONS]\r\n      },\r\n      {\r\n        provide: APP_BOOTSTRAP_LISTENER,\r\n        useFactory: NgxsModule.appBootstrapListenerFactory,\r\n        multi: true,\r\n        deps: [NgxsBootstrapper]\r\n      },\r\n      {\r\n        provide: INITIAL_STATE_TOKEN,\r\n        useFactory: NgxsModule.getInitialState\r\n      },\r\n      {\r\n        provide: NGXS_STATE_CONTEXT_FACTORY,\r\n        useExisting: StateContextFactory\r\n      },\r\n      {\r\n        provide: NGXS_STATE_FACTORY,\r\n        useExisting: StateFactory\r\n      }\r\n    ];\r\n  }\r\n\r\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\r\n    return mergeDeep(new NgxsConfig(), options);\r\n  }\r\n\r\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\r\n    return () => bootstrapper.bootstrap();\r\n  }\r\n\r\n  private static getInitialState() {\r\n    return InitialState.pop();\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { propGetter } from '../../internal/internals';\r\nimport { SelectFactory } from './select-factory';\r\nimport { StateToken } from '../../state-token/state-token';\r\nimport { ExtractTokenType } from '../../state-token/symbols';\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\nexport function createSelectObservable<T = any>(selector: any): Observable<T> {\r\n  if (!SelectFactory.store) {\r\n    throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());\r\n  }\r\n\r\n  return SelectFactory.store.select(selector);\r\n}\r\n\r\nexport function createSelectorFn(name: string, rawSelector?: any, paths: string[] = []): any {\r\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\r\n\r\n  if (typeof rawSelector === 'string') {\r\n    const propsArray: string[] = paths.length\r\n      ? [rawSelector, ...paths]\r\n      : rawSelector.split('.');\r\n    return propGetter(propsArray, SelectFactory.config!);\r\n  }\r\n\r\n  return rawSelector;\r\n}\r\n\r\n/**\r\n * @example If `foo$` => make it just `foo`\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex: number = name.length - 1;\r\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n\r\nexport type PropertyType<T> = T extends StateToken<any>\r\n  ? Observable<ExtractTokenType<T>>\r\n  : T extends (...args: any[]) => any\r\n  ? Observable<ReturnType<T>>\r\n  : any;\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n","import { TokenName } from './symbols';\r\nimport {\r\n  ensureSelectorMetadata,\r\n  RuntimeSelectorContext,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nexport class StateToken<T = void> {\r\n  constructor(private readonly name: TokenName<T>) {\r\n    const selectorMetadata = ensureSelectorMetadata(<any>this);\r\n    selectorMetadata.makeRootSelector = (\r\n      runtimeContext: RuntimeSelectorContext\r\n    ): SelectFromRootState => {\r\n      return runtimeContext.getStateGetter(this.name);\r\n    };\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  toString(): string {\r\n    return `StateToken[${this.name}]`;\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionType, ActionOptions } from '../actions/symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionType | ActionType[],\r\n  options?: ActionOptions\r\n): MethodDecorator {\r\n  return (target: any, name: string | symbol): void => {\r\n    const isStaticMethod = target.hasOwnProperty('prototype');\r\n\r\n    if (isStaticMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.ACTION_DECORATOR]());\r\n    }\r\n\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { createSelectObservable, createSelectorFn, PropertyType } from './symbols';\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select<T>(rawSelector?: T, ...paths: string[]): PropertyDecorator {\r\n  return function(target, key): void {\r\n    const name: string = key.toString();\r\n    const selectorId = `__${name}__selector`;\r\n    const selector = createSelectorFn(name, rawSelector, paths);\r\n\r\n    Object.defineProperties(target, {\r\n      [selectorId]: {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      },\r\n      [name]: {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get(): PropertyType<T> {\r\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\r\n        }\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { createSelector } from '../../utils/selector-utils';\r\nimport { SelectorSpec, SelectorType } from './symbols';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector<T>(selectors?: T[]): SelectorType<T> {\r\n  return <U>(\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<SelectorSpec<T, U>>\r\n  ): TypedPropertyDescriptor<SelectorSpec<T, U>> | void => {\r\n    const isNotMethod = !(descriptor && descriptor.value !== null);\r\n\r\n    if (isNotMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());\r\n    }\r\n\r\n    const originalFn = descriptor.value;\r\n    const memoizedFn = createSelector(selectors, originalFn as any, {\r\n      containerClass: target,\r\n      selectorName: key.toString(),\r\n      getSelectorOptions() {\r\n        return {};\r\n      }\r\n    });\r\n    const newDescriptor = {\r\n      configurable: true,\r\n      get() {\r\n        return memoizedFn;\r\n      }\r\n    };\r\n    // Add hidden property to descriptor\r\n    (<any>newDescriptor)['originalFn'] = originalFn;\r\n    return newDescriptor;\r\n  };\r\n}\r\n","import { SharedSelectorOptions } from '../internal/internals';\r\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for setting selector options at a method or class level.\r\n */\r\nexport function SelectorOptions(options: SharedSelectorOptions) {\r\n  return <ClassDecorator & MethodDecorator>(\r\n    function decorate<T>(\r\n      target: any,\r\n      methodName: string,\r\n      descriptor: TypedPropertyDescriptor<T>\r\n    ) {\r\n      if (methodName) {\r\n        // Method Decorator\r\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\r\n        if (originalFn) {\r\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\r\n        }\r\n      } else {\r\n        // Class Decorator\r\n        selectorOptionsMetaAccessor.defineOptions(target, options);\r\n      }\r\n    }\r\n  );\r\n}\r\n","import { StateClass } from '@ngxs/store/internals';\r\n\r\nimport { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { ensureStateClassIsInjectable } from '../ivy/ensure-state-class-is-injectable';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClassInternal;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    const stateName: string | null =\r\n      typeof name === 'string' ? name : (name && name.getName()) || null;\r\n    StoreValidators.checkCorrectStateName(stateName);\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = stateName;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    ensureStateClassIsInjectable(target);\r\n    const stateClass: StateClassInternal = target;\r\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\r\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n","import { ivyEnabledInDevMode$ } from './ivy-enabled-in-dev-mode';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * All provided or injected tokens must have `@Injectable` decorator\r\n * (previously, injected tokens without `@Injectable` were allowed\r\n * if another decorator was used, e.g. pipes).\r\n */\r\nexport function ensureStateClassIsInjectable(target: any): void {\r\n  // `ÃÂµprov` is a static property added by the NGCC compiler. It always exists in\r\n  // AOT mode because this property is added before runtime. If an application is running in\r\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\r\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\r\n  ivyEnabledInDevMode$.subscribe(_ivyEnabledInDevMode => {\r\n    if (_ivyEnabledInDevMode) {\r\n      const ngInjectableDef = target.ÃÂµprov;\r\n      if (!ngInjectableDef) {\r\n        // Don't warn if Ivy is disabled or `ÃÂµprov` exists on the class\r\n        console.warn(CONFIG_MESSAGES[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY](target.name));\r\n      }\r\n    }\r\n  });\r\n}\r\n","import {\r\n  getSelectorMetadata as getSelectorMetadataInternal,\r\n  getStoreMetadata as getStoreMetadataInternal,\r\n  ensureStoreMetadata as ensureStoreMetadataInternal,\r\n  ensureSelectorMetadata as ensureSelectorMetadataInternal,\r\n  StateClassInternal,\r\n  SharedSelectorOptions\r\n} from './internal/internals';\r\nimport { PlainObjectOf } from '../internals/src/symbols';\r\nimport { ActionHandlerMetaData } from './actions/symbols';\r\n\r\ninterface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  children?: StateClassInternal[];\r\n}\r\n\r\ninterface SelectorMetaDataModel {\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport function ensureStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return ensureStoreMetadataInternal(target);\r\n}\r\n\r\nexport function getStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return getStoreMetadataInternal(target);\r\n}\r\n\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  return ensureSelectorMetadataInternal(target);\r\n}\r\n\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return getSelectorMetadataInternal(target);\r\n}\r\n"]}