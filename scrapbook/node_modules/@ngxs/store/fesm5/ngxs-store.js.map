{"version":3,"file":"ngxs-store.js","sources":["ng://@ngxs/store/src/configs/messages.config.ts","ng://@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","ng://@ngxs/store/src/symbols.ts","ng://@ngxs/store/src/execution/symbols.ts","ng://@ngxs/store/src/utils/utils.ts","ng://@ngxs/store/src/internal/internals.ts","ng://@ngxs/store/src/operators/of-action.ts","ng://@ngxs/store/src/operators/leave-ngxs.ts","ng://@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","ng://@ngxs/store/src/actions-stream.ts","ng://@ngxs/store/src/utils/compose.ts","ng://@ngxs/store/src/internal/state-stream.ts","ng://@ngxs/store/src/plugin-manager.ts","ng://@ngxs/store/src/internal/dispatcher.ts","ng://@ngxs/store/src/utils/freeze.ts","ng://@ngxs/store/src/host-environment/host-environment.ts","ng://@ngxs/store/src/internal/config-validator.ts","ng://@ngxs/store/src/internal/state-operations.ts","ng://@ngxs/store/src/internal/state-operators.ts","ng://@ngxs/store/src/internal/state-context-factory.ts","ng://@ngxs/store/src/utils/store-validators.ts","ng://@ngxs/store/src/internal/state-factory.ts","ng://@ngxs/store/src/internal/lifecycle-state-manager.ts","ng://@ngxs/store/src/utils/selector-utils.ts","ng://@ngxs/store/src/store.ts","ng://@ngxs/store/src/decorators/select/select-factory.ts","ng://@ngxs/store/src/actions/actions.ts","ng://@ngxs/store/src/ivy/ivy-enabled-in-dev-mode.ts","ng://@ngxs/store/src/modules/ngxs-root.module.ts","ng://@ngxs/store/src/modules/ngxs-feature.module.ts","ng://@ngxs/store/src/module.ts","ng://@ngxs/store/src/decorators/action.ts","ng://@ngxs/store/src/ivy/ensure-state-class-is-injectable.ts","ng://@ngxs/store/src/decorators/state.ts","ng://@ngxs/store/src/decorators/select/symbols.ts","ng://@ngxs/store/src/decorators/select/select.ts","ng://@ngxs/store/src/decorators/selector-options.ts","ng://@ngxs/store/src/public_to_deprecate.ts","ng://@ngxs/store/src/decorators/selector/selector.ts","ng://@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts","ng://@ngxs/store/src/state-token/state-token.ts"],"sourcesContent":["export enum VALIDATION_CODE {\r\n  STATE_NAME = 'STATE_NAME',\r\n  STATE_UNIQUE = 'STATE_UNIQUE',\r\n  STATE_NAME_PROPERTY = 'STATE_NAME_PROPERTY',\r\n  STATE_DECORATOR = 'STATE_DECORATOR',\r\n  INCORRECT_PRODUCTION = 'INCORRECT_PRODUCTION',\r\n  INCORRECT_DEVELOPMENT = 'INCORRECT_DEVELOPMENT',\r\n  SELECT_FACTORY_NOT_CONNECTED = 'SELECT_FACTORY_NOT_CONNECTED',\r\n  ACTION_DECORATOR = 'ACTION_DECORATOR',\r\n  SELECTOR_DECORATOR = 'SELECTOR_DECORATOR',\r\n  ZONE_WARNING = 'ZONE_WARNING',\r\n  PATCHING_ARRAY = 'PATCHING_ARRAY',\r\n  PATCHING_PRIMITIVE = 'PATCHING_PRIMITIVE',\r\n  UNDECORATED_STATE_IN_IVY = 'UNDECORATED_STATE_IN_IVY'\r\n}\r\n\r\nexport const CONFIG_MESSAGES = {\r\n  [VALIDATION_CODE.STATE_NAME]: (name: string) =>\r\n    `${name} is not a valid state name. It needs to be a valid object property name.`,\r\n  [VALIDATION_CODE.STATE_NAME_PROPERTY]: () => `States must register a 'name' property`,\r\n  [VALIDATION_CODE.STATE_UNIQUE]: (current: string, newName: string, oldName: string) =>\r\n    `State name '${current}' from ${newName} already exists in ${oldName}`,\r\n  [VALIDATION_CODE.STATE_DECORATOR]: () => 'States must be decorated with @State() decorator',\r\n  [VALIDATION_CODE.INCORRECT_PRODUCTION]: () =>\r\n    'Angular is running in production mode but NGXS is still running in the development mode!\\n' +\r\n    'Please set developmentMode to false on the NgxsModule options when in production mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: () =>\r\n    'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: () =>\r\n    'You have forgotten to import the NGXS module!',\r\n  [VALIDATION_CODE.ACTION_DECORATOR]: () =>\r\n    '@Action() decorator cannot be used with static methods',\r\n  [VALIDATION_CODE.SELECTOR_DECORATOR]: () => 'Selectors only work on methods',\r\n  [VALIDATION_CODE.ZONE_WARNING]: () =>\r\n    'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\r\n    'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\r\n    'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })',\r\n  [VALIDATION_CODE.PATCHING_ARRAY]: () => 'Patching arrays is not supported.',\r\n  [VALIDATION_CODE.PATCHING_PRIMITIVE]: () => 'Patching primitives is not supported.',\r\n  [VALIDATION_CODE.UNDECORATED_STATE_IN_IVY]: (name: string) =>\r\n    `'${name}' class should be decorated with @Injectable() right after the @State() decorator`\r\n};\r\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n@Injectable()\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\r\n    this.verifyZoneIsNotNooped(this._ngZone);\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n\r\n  private verifyZoneIsNotNooped(ngZone: NgZone): void {\r\n    // `NoopNgZone` is not exposed publicly as it doesn't expect\r\n    // to be used outside of the core Angular code, thus we just have\r\n    // to check if the zone doesn't extend or instanceof `NgZone`\r\n    if (ngZone instanceof NgZone) {\r\n      return;\r\n    }\r\n\r\n    console.warn(CONFIG_MESSAGES[VALIDATION_CODE.ZONE_WARNING]());\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { PlainObject, StateClass } from '@ngxs/store/internals';\r\nimport { SharedSelectorOptions, Callback } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { StateToken } from './state-token/state-token';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport const NG_TEST_MODE = new InjectionToken<Callback<boolean>>('NG_TEST_MODE');\r\nexport const NG_DEV_MODE = new InjectionToken<Callback<boolean>>('NG_DEV_MODE');\r\n\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnChanges> &\r\n  Partial<NgxsOnInit> &\r\n  Partial<NgxsAfterBootstrap>;\r\n\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will circumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * @deprecated will be removed after v4\r\n   * (default: {})\r\n   */\r\n  defaultsState: PlainObject = {};\r\n  /**\r\n   * Defining shared selector options\r\n   */\r\n  selectorOptions: SharedSelectorOptions = {\r\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\r\n    suppressErrors: true // TODO: default is true in v3, will change in v4\r\n  };\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string | StateToken<T>;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: StateClass[];\r\n}\r\n\r\n/**\r\n * Represents a basic change from a previous to a new value for a single state instance.\r\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\r\n */\r\nexport class NgxsSimpleChange<T = any> {\r\n  constructor(\r\n    public readonly previousValue: T,\r\n    public readonly currentValue: T,\r\n    public readonly firstChange: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * On change interface\r\n */\r\nexport interface NgxsOnChanges {\r\n  ngxsOnChanges(change: NgxsSimpleChange): void;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY'\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  } else {\r\n    return action.type;\r\n  }\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n\r\n/**\r\n * Simple object check.\r\n *\r\n *    isObject({a:1}) //=> true\r\n *    isObject(1) //=> false\r\n *\r\n * @ignore\r\n */\r\nexport const isObject = (item: any) => {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n};\r\n\r\n/**\r\n * Deep merge two objects.\r\n *\r\n *    mergeDeep({a:1, b:{x: 1, y:2}}, {b:{x: 3}, c:4}) //=> {a:1, b:{x:3, y:2}, c:4}\r\n *\r\n * @param base base object onto which `sources` will be applied\r\n */\r\nexport const mergeDeep = (base: any, ...sources: any[]): any => {\r\n  if (!sources.length) return base;\r\n  const source = sources.shift();\r\n\r\n  if (isObject(base) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!base[key]) Object.assign(base, { [key]: {} });\r\n        mergeDeep(base[key], source[key]);\r\n      } else {\r\n        Object.assign(base, { [key]: source[key] });\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergeDeep(base, ...sources);\r\n};\r\n","import { PlainObjectOf, StateClass } from '@ngxs/store/internals';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  NgxsSimpleChange,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { ActionHandlerMetaData } from '../actions/symbols';\r\nimport { getValue } from '../utils/utils';\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n}\r\n\r\nexport type StateKeyGraph = PlainObjectOf<string[]>;\r\nexport type StatesByName = PlainObjectOf<StateClassInternal>;\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actionOrActions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  makeRootSelector: SelectorFactory | null;\r\n  children?: StateClassInternal[];\r\n}\r\n\r\nexport interface RuntimeSelectorContext {\r\n  getStateGetter(key: any): (state: any) => any;\r\n  getSelectorOptions(localOptions?: SharedSelectorOptions): SharedSelectorOptions;\r\n}\r\n\r\nexport type SelectFromRootState = (rootState: any) => any;\r\nexport type SelectorFactory = (runtimeContext: RuntimeSelectorContext) => SelectFromRootState;\r\n\r\nexport interface SharedSelectorOptions {\r\n  injectContainerState?: boolean;\r\n  suppressErrors?: boolean;\r\n}\r\n\r\nexport interface SelectorMetaDataModel {\r\n  makeRootSelector: SelectorFactory | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  isInitialised: boolean;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  path: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\nexport type Callback<T = any, V = any> = (...args: V[]) => T;\r\n\r\nexport interface RootStateDiff<T> {\r\n  currentAppState: T;\r\n  newAppState: T;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      makeRootSelector(context: RuntimeSelectorContext) {\r\n        return context.getStateGetter(defaultMetadata.name);\r\n      },\r\n      children: []\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      makeRootSelector: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null,\r\n      getSelectorOptions: () => ({})\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = paths.slice();\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClassInternal) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta[META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClassInternal[]): PlainObjectOf<StateClassInternal> {\r\n  return states.reduce<PlainObjectOf<StateClassInternal>>(\r\n    (result: PlainObjectOf<StateClassInternal>, stateClass: StateClassInternal) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: PlainObjectOf<string> = {}\r\n): PlainObjectOf<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: PlainObjectOf<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n\r\nexport function getStateDiffChanges<T>(\r\n  mappedStore: MappedStore,\r\n  diff: RootStateDiff<T>\r\n): NgxsSimpleChange {\r\n  const previousValue: T = getValue(diff.currentAppState, mappedStore.path);\r\n  const currentValue: T = getValue(diff.newAppState, mappedStore.path);\r\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\r\n}\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { ActionType } from '../actions/symbols';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T = any>(allowedType: ActionType): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T = any>(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: ActionType[]): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, ActionCompletion> {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator(\r\n  allowedTypes: ActionType[],\r\n  statuses?: ActionStatus[],\r\n  // This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\r\n  // since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\r\n  // defaults to `any`, thus there is no sense from union type.\r\n  mapOperator: () => OperatorFunction<ActionContext, any> = mapAction\r\n): OperatorFunction<ActionContext, any> {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ninterface FilterMap {\r\n  [key: string]: boolean;\r\n}\r\n\r\nfunction createAllowedActionTypesMap(types: ActionType[]): FilterMap {\r\n  return types.reduce((filterMap: FilterMap, klass: any) => {\r\n    filterMap[getActionTypeFromInstance(klass)!] = true;\r\n    return filterMap;\r\n  }, <FilterMap>{});\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce((filterMap: FilterMap, status: ActionStatus) => {\r\n    filterMap[status] = true;\r\n    return filterMap;\r\n  }, <FilterMap>{});\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\r\n  // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\r\n  constructor(\r\n    internalActions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      const childSubscription = internalActions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe({\r\n          next: ctx => observer.next(ctx),\r\n          error: error => observer.error(error),\r\n          complete: () => observer.complete()\r\n        });\r\n\r\n      observer.add(childSubscription);\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<PlainObject> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';\r\nimport { NGXS_PLUGINS, NgxsPlugin, NgxsPluginFn } from './symbols';\r\n\r\n@Injectable()\r\nexport class PluginManager {\r\n  public plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _pluginHandlers: NgxsPlugin[]\r\n  ) {\r\n    this.registerHandlers();\r\n  }\r\n\r\n  private get rootPlugins(): NgxsPluginFn[] {\r\n    return (this._parentManager && this._parentManager.plugins) || this.plugins;\r\n  }\r\n\r\n  private registerHandlers(): void {\r\n    const pluginHandlers: NgxsPluginFn[] = this.getPluginHandlers();\r\n    this.rootPlugins.push(...pluginHandlers);\r\n  }\r\n\r\n  private getPluginHandlers(): NgxsPluginFn[] {\r\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\r\n    return handlers.map(\r\n      (plugin: NgxsPlugin) =>\r\n        (plugin.handle ? plugin.handle.bind(plugin) : plugin) as NgxsPluginFn\r\n    );\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\r\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => {\r\n          try {\r\n            this._errorHandler.handleError(error);\r\n          } catch {}\r\n        })\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\r\n      return forkJoin(actionOrActions.map(action => this.dispatchSingle(action)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const type: string | undefined = getActionTypeFromInstance(action);\r\n    if (!type) {\r\n      const error = new Error(\r\n        `This action doesn't have a type property: ${action.constructor.name}`\r\n      );\r\n      return throwError(error);\r\n    }\r\n\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return EMPTY;\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';\r\nimport { Callback } from '../internal/internals';\r\n\r\n@Injectable()\r\nexport class HostEnvironment {\r\n  constructor(\r\n    @Inject(NG_DEV_MODE) public isDevMode: Callback<boolean>,\r\n    @Inject(NG_TEST_MODE) public isTestMode: Callback<boolean>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { HostEnvironment } from '../host-environment/host-environment';\r\n\r\n@Injectable()\r\nexport class ConfigValidator {\r\n  constructor(private _host: HostEnvironment, private _config: NgxsConfig) {}\r\n\r\n  private get isIncorrectProduction(): boolean {\r\n    return !this._host.isDevMode() && this._config.developmentMode;\r\n  }\r\n\r\n  private get isIncorrectDevelopment(): boolean {\r\n    return this._host.isDevMode() && !this._config.developmentMode;\r\n  }\r\n\r\n  public verifyDevMode(): void {\r\n    if (this._host.isTestMode()) {\r\n      return;\r\n    }\r\n\r\n    if (this.isIncorrectProduction) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());\r\n    } else if (this.isIncorrectDevelopment) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\nimport { ConfigValidator } from '../internal/config-validator';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig,\r\n    configValidator: ConfigValidator\r\n  ) {\r\n    configValidator.verifyDevMode();\r\n  }\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actionOrActions: any | any[]) => this._dispatcher.dispatch(actionOrActions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n","import {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    if (Array.isArray(val)) {\r\n      throw new Error(MESSAGES[CODE.PATCHING_ARRAY]());\r\n    } else if (typeof val !== 'object') {\r\n      throw new Error(MESSAGES[CODE.PATCHING_PRIMITIVE]());\r\n    }\r\n\r\n    const newState: any = { ...(existingState as any) };\r\n    for (const key in val) {\r\n      // deep clone for patch compatibility\r\n      // noinspection JSUnfilteredForInLoop (IDE)\r\n      newState[key] = (val as any)[key];\r\n    }\r\n\r\n    return newState as T;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext, StateOperator } from '../symbols';\r\nimport { getStateDiffChanges, MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(mappedStore: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, mappedStore.path);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, mappedStore.path, newValue);\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const change: NgxsSimpleChange = getStateDiffChanges<T>(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(change);\r\n      }\r\n\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import {\r\n  getStoreMetadata,\r\n  MetaDataModel,\r\n  StateClassInternal,\r\n  StatesByName\r\n} from '../internal/internals';\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\n\r\nexport abstract class StoreValidators {\r\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  public static stateNameErrorMessage(name: string) {\r\n    return MESSAGES[CODE.STATE_NAME](name);\r\n  }\r\n\r\n  public static checkCorrectStateName(name: string | null) {\r\n    if (!name) {\r\n      throw new Error(MESSAGES[CODE.STATE_NAME_PROPERTY]());\r\n    }\r\n\r\n    if (!this.stateNameRegex.test(name)) {\r\n      throw new Error(this.stateNameErrorMessage(name));\r\n    }\r\n  }\r\n\r\n  public static checkStateNameIsUnique(\r\n    state: StateClassInternal,\r\n    statesByName: StatesByName\r\n  ): string {\r\n    const meta: MetaDataModel = this.getValidStateMeta(state);\r\n    const stateName: string = meta!.name as string;\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throw new Error(MESSAGES[CODE.STATE_UNIQUE](stateName, state.name, existingState.name));\r\n    }\r\n    return stateName;\r\n  }\r\n\r\n  public static getValidStateMeta(state: StateClassInternal): MetaDataModel {\r\n    const meta: MetaDataModel = getStoreMetadata(state);\r\n    if (!meta) {\r\n      throw new Error(MESSAGES[CODE.STATE_DECORATOR]());\r\n    }\r\n\r\n    return meta;\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf, Inject, OnDestroy } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError, Subscription } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  propGetter,\r\n  StateClassInternal,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort,\r\n  RuntimeSelectorContext,\r\n  SharedSelectorOptions\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { INITIAL_STATE_TOKEN, PlainObjectOf, memoize } from '@ngxs/store/internals';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory implements OnDestroy {\r\n  private _actionsSubscription: Subscription | null = null;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    private _initialState: any\r\n  ) {}\r\n\r\n  private _states: MappedStore[] = [];\r\n\r\n  get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _statesByName: StatesByName = {};\r\n\r\n  get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private _statePaths: PlainObjectOf<string> = {};\r\n\r\n  private get statePaths(): PlainObjectOf<string> {\r\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\r\n  }\r\n\r\n  getRuntimeSelectorContext = memoize(() => {\r\n    const stateFactory = this;\r\n\r\n    function resolveGetter(key: string) {\r\n      const path = stateFactory.statePaths[key];\r\n      return path ? propGetter(path.split('.'), stateFactory._config) : null;\r\n    }\r\n\r\n    const context: RuntimeSelectorContext = this._parentFactory\r\n      ? this._parentFactory.getRuntimeSelectorContext()\r\n      : {\r\n          getStateGetter(key: string) {\r\n            let getter = resolveGetter(key);\r\n            if (getter) {\r\n              return getter;\r\n            }\r\n            return (...args) => {\r\n              // Late loaded getter\r\n              if (!getter) {\r\n                getter = resolveGetter(key);\r\n              }\r\n              return getter ? getter(...args) : undefined;\r\n            };\r\n          },\r\n          getSelectorOptions(localOptions?: SharedSelectorOptions) {\r\n            const globalSelectorOptions = stateFactory._config.selectorOptions;\r\n            return {\r\n              ...globalSelectorOptions,\r\n              ...(localOptions || {})\r\n            };\r\n          }\r\n        };\r\n    return context;\r\n  });\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = defaults.slice();\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private static checkStatesAreValid(stateClasses: StateClassInternal[]): void {\r\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // I'm using non-null assertion here since `_actionsSubscrition` will\r\n    // be 100% defined. This is because `ngOnDestroy()` cannot be invoked\r\n    // on the `StateFactory` until its initialized :) An it's initialized\r\n    // for the first time along with the `NgxsRootModule`.\r\n    this._actionsSubscription!.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\r\n    StateFactory.checkStatesAreValid(stateClasses);\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const paths: PlainObjectOf<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: PlainObjectOf<StateClassInternal> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClassInternal = nameGraph[name];\r\n      const path: string = paths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, path);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        path,\r\n        isInitialised: false,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\r\n    const classes: StateClassInternal[] = stateClasses || [];\r\n\r\n    const mappedStores: MappedStore[] = this.add(classes);\r\n    const defaults = mappedStores.reduce(\r\n      (result: any, mappedStore: MappedStore) =>\r\n        setValue(result, mappedStore.path, mappedStore.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states: mappedStores };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._actionsSubscription !== null) return;\r\n    this._actionsSubscription = this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action: any) {\r\n    const type = getActionTypeFromInstance(action)!;\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              // If this observable has been completed w/o emitting\r\n              // any value then we wouldn't want to complete the whole chain\r\n              // of actions. Since if any observable completes then\r\n              // action will be canceled.\r\n              // For instance if any action handler would've had such statement:\r\n              // `handler(ctx) { return EMPTY; }`\r\n              // then the action will be canceled.\r\n              // See https://github.com/ngxs/store/issues/1568\r\n              result = result.pipe(defaultIfEmpty({}));\r\n\r\n              if (actionMeta.options.cancelUncompleted) {\r\n                // todo: ofActionDispatched should be used with action class\r\n                result = result.pipe(\r\n                  takeUntil(actions$.pipe(ofActionDispatched(action as any)))\r\n                );\r\n              }\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(\r\n    stateClasses: StateClassInternal[]\r\n  ): { newStates: StateClassInternal[] } {\r\n    const newStates: StateClassInternal[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n      const unmountedState = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, path: string): void {\r\n    this.statePaths[meta.name!] = path;\r\n    // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\r\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\r\n    // We will need to come up with an alternative in v4 because this is used by many plugins\r\n    meta.path = path;\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrappedInInitialState: boolean =\r\n      getValue(this._initialState, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper, PlainObject } from '@ngxs/store/internals';\r\nimport { filter, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { getStateDiffChanges, MappedStore, StatesAndDefaults } from './internals';\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => this.invokeBootstrap(results!.states));\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(mappedStores: MappedStore[]): void {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const currentAppState: PlainObject = {};\r\n        const newAppState: PlainObject = this.internalStateOperations\r\n          .getRootStateOperations()\r\n          .getState();\r\n\r\n        const firstDiffChange: NgxsSimpleChange = getStateDiffChanges(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(firstDiffChange);\r\n      }\r\n\r\n      if (instance.ngxsOnInit) {\r\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\r\n      }\r\n\r\n      mappedStore.isInitialised = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(mappedStores: MappedStore[]) {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n      if (instance.ngxsAfterBootstrap) {\r\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\r\n      }\r\n    }\r\n  }\r\n\r\n  private getStateContext(mappedStore: MappedStore): StateContext<any> {\r\n    return this.stateContextFactory.createStateContext(mappedStore);\r\n  }\r\n}\r\n","import { memoize } from '@ngxs/store/internals';\r\n\r\nimport {\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata,\r\n  SelectorMetaDataModel,\r\n  SharedSelectorOptions,\r\n  RuntimeSelectorContext,\r\n  SelectorFactory,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\r\n\r\nexport const selectorOptionsMetaAccessor = {\r\n  getOptions: (target: any): SharedSelectorOptions => {\r\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\r\n  },\r\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\r\n    if (!target) return;\r\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\r\n  }\r\n};\r\n\r\ninterface CreationMetadata {\r\n  containerClass: any;\r\n  selectorName: string;\r\n  getSelectorOptions?: () => SharedSelectorOptions;\r\n}\r\n\r\ninterface RuntimeSelectorInfo {\r\n  selectorOptions: SharedSelectorOptions;\r\n  argumentSelectorFunctions: SelectFromRootState[];\r\n}\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: CreationMetadata\r\n) {\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn.apply(containerClass, args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  Object.setPrototypeOf(memoizedFn, originalFn);\r\n\r\n  const selectorMetaData = setupSelectorMetadata<T>(originalFn, creationMetadata);\r\n\r\n  const makeRootSelector: SelectorFactory = (context: RuntimeSelectorContext) => {\r\n    const { argumentSelectorFunctions, selectorOptions } = getRuntimeSelectorInfo(\r\n      context,\r\n      selectorMetaData,\r\n      selectors\r\n    );\r\n\r\n    return function selectFromRoot(rootState: any) {\r\n      // Determine arguments from the app state using the selectors\r\n      const results = argumentSelectorFunctions.map(argFn => argFn(rootState));\r\n\r\n      // if the lambda tries to access a something on the\r\n      // state that doesn't exist, it will throw a TypeError.\r\n      // since this is quite usual behaviour, we simply return undefined if so.\r\n      try {\r\n        return memoizedFn(...results);\r\n      } catch (ex) {\r\n        if (ex instanceof TypeError && selectorOptions.suppressErrors) {\r\n          return undefined;\r\n        }\r\n\r\n        throw ex;\r\n      }\r\n    };\r\n  };\r\n\r\n  selectorMetaData.makeRootSelector = makeRootSelector;\r\n\r\n  return memoizedFn;\r\n}\r\n\r\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\r\n  originalFn: T,\r\n  creationMetadata: CreationMetadata | undefined\r\n) {\r\n  const selectorMetaData = ensureSelectorMetadata(originalFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  let getExplicitSelectorOptions = () => ({});\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n    getExplicitSelectorOptions =\r\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\r\n  }\r\n  const selectorMetaDataClone = { ...selectorMetaData };\r\n  selectorMetaData.getSelectorOptions = () =>\r\n    getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\r\n  return selectorMetaData;\r\n}\r\n\r\nfunction getRuntimeSelectorInfo(\r\n  context: RuntimeSelectorContext,\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n): RuntimeSelectorInfo {\r\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\r\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\r\n  const selectorsToApply = getSelectorsToApply(\r\n    selectors,\r\n    selectorOptions,\r\n    selectorMetaData.containerClass\r\n  );\r\n\r\n  const argumentSelectorFunctions = selectorsToApply.map(selector => {\r\n    const factory = getRootSelectorFactory(selector);\r\n    return factory(context);\r\n  });\r\n  return {\r\n    selectorOptions,\r\n    argumentSelectorFunctions\r\n  };\r\n}\r\n\r\nfunction getLocalSelectorOptions(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  explicitOptions: SharedSelectorOptions\r\n): SharedSelectorOptions {\r\n  return {\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\r\n    ...(selectorMetaData.getSelectorOptions() || {}),\r\n    ...explicitOptions\r\n  };\r\n}\r\n\r\nfunction getSelectorsToApply(\r\n  selectors: any[] | undefined = [],\r\n  selectorOptions: SharedSelectorOptions,\r\n  containerClass: any\r\n) {\r\n  const selectorsToApply = [];\r\n  const canInjectContainerState =\r\n    selectors.length === 0 || selectorOptions.injectContainerState;\r\n  if (containerClass && canInjectContainerState) {\r\n    // If we are on a state class, add it as the first selector parameter\r\n    const metadata = getStoreMetadata(containerClass);\r\n    if (metadata) {\r\n      selectorsToApply.push(containerClass);\r\n    }\r\n  }\r\n  if (selectors) {\r\n    selectorsToApply.push(...selectors);\r\n  }\r\n  return selectorsToApply;\r\n}\r\n\r\n/**\r\n * This function gets the factory function to create the selector to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getRootSelectorFactory(selector: any): SelectorFactory {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.makeRootSelector) || (() => selector);\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\r\nimport { Observable, of, Subscription, throwError } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\nimport { INITIAL_STATE_TOKEN, PlainObject } from '@ngxs/store/internals';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { getRootSelectorFactory } from './utils/selector-utils';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { NgxsConfig } from './symbols';\r\nimport { StateToken } from './state-token/state-token';\r\nimport { StateFactory } from './internal/state-factory';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\r\n    private _stateFactory: StateFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    initialStateValue: any\r\n  ) {\r\n    this.initStateStream(initialStateValue);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select<T>(selector: StateToken<T>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        const { suppressErrors } = this._config.selectorOptions;\r\n\r\n        if (err instanceof TypeError && suppressErrors) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        return throwError(err);\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce<T>(selector: StateToken<T>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot<T>(selector: StateToken<T>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n\r\n  private getStoreBoundSelectorFn(selector: any) {\r\n    const makeSelectorFn = getRootSelectorFactory(selector);\r\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\r\n    return makeSelectorFn(runtimeContext);\r\n  }\r\n\r\n  private initStateStream(initialStateValue: any): void {\r\n    const value: PlainObject = this._stateStream.value;\r\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\r\n    if (storeIsEmpty) {\r\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\r\n      const storeValues: PlainObject = defaultStateNotEmpty\r\n        ? { ...this._config.defaultsState, ...initialStateValue }\r\n        : initialStateValue;\r\n\r\n      this._stateStream.next(storeValues);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @internal only use in @Select decorator\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory implements OnDestroy {\r\n  public static store: Store | null = null;\r\n  public static config: NgxsConfig | null = null;\r\n\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    SelectFactory.store = null;\r\n    SelectFactory.config = null;\r\n  }\r\n}\r\n","import { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n\r\n  constructor(public addedStates?: PlainObject) {}\r\n}\r\n","import { isDevMode } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\n\r\nexport const ivyEnabledInDevMode$ = new ReplaySubject<boolean>(1);\r\n\r\n/**\r\n * Ivy exposes helper functions to the global `window.ng` object.\r\n * Those functions are `getComponent, getContext,\r\n * getListeners, getViewComponent, getHostElement, getInjector,\r\n * getRootComponents, getDirectives, getDebugNode`\r\n * Previously, old view engine exposed `window.ng.coreTokens` and\r\n * `window.ng.probe` if an application was in development/production.\r\n * Ivy doesn't expose these functions in production. Developers will be able\r\n * to see warnings in both JIT/AOT modes, but only if an application\r\n * is in development.\r\n */\r\nexport function setIvyEnabledInDevMode(): void {\r\n  try {\r\n    // `try-catch` will also handle server-side rendering, as\r\n    // `window is not defined` will not be thrown.\r\n    const ng = (window as any).ng;\r\n    const _viewEngineEnabled = !!ng.probe && !!ng.coreTokens;\r\n    const _ivyEnabledInDevMode = !_viewEngineEnabled && isDevMode();\r\n    ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);\r\n  } catch {\r\n    ivyEnabledInDevMode$.next(false);\r\n  } finally {\r\n    ivyEnabledInDevMode$.complete();\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { Store } from '../store';\r\nimport { SelectFactory } from '../decorators/select/select-factory';\r\nimport { ROOT_STATE_TOKEN } from '../symbols';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { InitState } from '../actions/actions';\r\nimport { setIvyEnabledInDevMode } from '../ivy/ivy-enabled-in-dev-mode';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    _store: Store,\r\n    _select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClassInternal[] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Validate states on having the `@Injectable()` decorator in Ivy\r\n    setIvyEnabledInDevMode();\r\n\r\n    // Add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // Connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // Dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { FEATURE_STATE_TOKEN } from '../symbols';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { UpdateState } from '../actions/actions';\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    _store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: StateClassInternal[][] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\r\n    }\r\n  }\r\n\r\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\r\n    return states.reduce(\r\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\r\n      []\r\n    );\r\n  }\r\n}\r\n","import {\r\n  APP_BOOTSTRAP_LISTENER,\r\n  InjectionToken,\r\n  isDevMode,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Provider\r\n} from '@angular/core';\r\nimport {\r\n  INITIAL_STATE_TOKEN,\r\n  InitialState,\r\n  isAngularInTestMode,\r\n  NGXS_STATE_CONTEXT_FACTORY,\r\n  NGXS_STATE_FACTORY,\r\n  NgxsBootstrapper,\r\n  StateClass\r\n} from '@ngxs/store/internals';\r\n\r\nimport {\r\n  FEATURE_STATE_TOKEN,\r\n  NG_DEV_MODE,\r\n  NG_TEST_MODE,\r\n  NgxsConfig,\r\n  NgxsModuleOptions,\r\n  ROOT_STATE_TOKEN\r\n} from './symbols';\r\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select/select-factory';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { NgxsRootModule } from './modules/ngxs-root.module';\r\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { HostEnvironment } from './host-environment/host-environment';\r\nimport { ConfigValidator } from './internal/config-validator';\r\nimport { mergeDeep } from './utils/utils';\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule()\r\nexport class NgxsModule {\r\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\r\n\r\n  /**\r\n   * Root module factory\r\n   */\r\n  public static forRoot(\r\n    states: StateClass[] = [],\r\n    options: NgxsModuleOptions = {}\r\n  ): ModuleWithProviders<NgxsRootModule> {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        ConfigValidator,\r\n        HostEnvironment,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        ...NgxsModule.ngxsTokenProviders(states, options)\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders<NgxsFeatureModule> {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private static ngxsTokenProviders(\r\n    states: StateClass[],\r\n    options: NgxsModuleOptions\r\n  ): Provider[] {\r\n    return [\r\n      {\r\n        provide: NG_TEST_MODE,\r\n        useValue: isAngularInTestMode\r\n      },\r\n      {\r\n        provide: NG_DEV_MODE,\r\n        useValue: isDevMode\r\n      },\r\n      {\r\n        provide: NGXS_EXECUTION_STRATEGY,\r\n        useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n      },\r\n      {\r\n        provide: ROOT_STATE_TOKEN,\r\n        useValue: states\r\n      },\r\n      {\r\n        provide: NgxsModule.ROOT_OPTIONS,\r\n        useValue: options\r\n      },\r\n      {\r\n        provide: NgxsConfig,\r\n        useFactory: NgxsModule.ngxsConfigFactory,\r\n        deps: [NgxsModule.ROOT_OPTIONS]\r\n      },\r\n      {\r\n        provide: APP_BOOTSTRAP_LISTENER,\r\n        useFactory: NgxsModule.appBootstrapListenerFactory,\r\n        multi: true,\r\n        deps: [NgxsBootstrapper]\r\n      },\r\n      {\r\n        provide: INITIAL_STATE_TOKEN,\r\n        useFactory: NgxsModule.getInitialState\r\n      },\r\n      {\r\n        provide: NGXS_STATE_CONTEXT_FACTORY,\r\n        useExisting: StateContextFactory\r\n      },\r\n      {\r\n        provide: NGXS_STATE_FACTORY,\r\n        useExisting: StateFactory\r\n      }\r\n    ];\r\n  }\r\n\r\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\r\n    return mergeDeep(new NgxsConfig(), options);\r\n  }\r\n\r\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\r\n    return () => bootstrapper.bootstrap();\r\n  }\r\n\r\n  private static getInitialState() {\r\n    return InitialState.pop();\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionType, ActionOptions } from '../actions/symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionType | ActionType[],\r\n  options?: ActionOptions\r\n): MethodDecorator {\r\n  return (target: any, name: string | symbol): void => {\r\n    const isStaticMethod = target.hasOwnProperty('prototype');\r\n\r\n    if (isStaticMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.ACTION_DECORATOR]());\r\n    }\r\n\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { ivyEnabledInDevMode$ } from './ivy-enabled-in-dev-mode';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * All provided or injected tokens must have `@Injectable` decorator\r\n * (previously, injected tokens without `@Injectable` were allowed\r\n * if another decorator was used, e.g. pipes).\r\n */\r\nexport function ensureStateClassIsInjectable(target: any): void {\r\n  // `Éµprov` is a static property added by the NGCC compiler. It always exists in\r\n  // AOT mode because this property is added before runtime. If an application is running in\r\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\r\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\r\n  ivyEnabledInDevMode$.subscribe(_ivyEnabledInDevMode => {\r\n    if (_ivyEnabledInDevMode) {\r\n      const ngInjectableDef = target.Éµprov;\r\n      if (!ngInjectableDef) {\r\n        // Don't warn if Ivy is disabled or `Éµprov` exists on the class\r\n        console.warn(CONFIG_MESSAGES[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY](target.name));\r\n      }\r\n    }\r\n  });\r\n}\r\n","import { StateClass } from '@ngxs/store/internals';\r\n\r\nimport { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { ensureStateClassIsInjectable } from '../ivy/ensure-state-class-is-injectable';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClassInternal;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    const stateName: string | null =\r\n      typeof name === 'string' ? name : (name && name.getName()) || null;\r\n    StoreValidators.checkCorrectStateName(stateName);\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = stateName;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    ensureStateClassIsInjectable(target);\r\n    const stateClass: StateClassInternal = target;\r\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\r\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { propGetter } from '../../internal/internals';\r\nimport { SelectFactory } from './select-factory';\r\nimport { StateToken } from '../../state-token/state-token';\r\nimport { ExtractTokenType } from '../../state-token/symbols';\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\nexport function createSelectObservable<T = any>(selector: any): Observable<T> {\r\n  if (!SelectFactory.store) {\r\n    throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());\r\n  }\r\n\r\n  return SelectFactory.store.select(selector);\r\n}\r\n\r\nexport function createSelectorFn(name: string, rawSelector?: any, paths: string[] = []): any {\r\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\r\n\r\n  if (typeof rawSelector === 'string') {\r\n    const propsArray: string[] = paths.length\r\n      ? [rawSelector, ...paths]\r\n      : rawSelector.split('.');\r\n    return propGetter(propsArray, SelectFactory.config!);\r\n  }\r\n\r\n  return rawSelector;\r\n}\r\n\r\n/**\r\n * @example If `foo$` => make it just `foo`\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex: number = name.length - 1;\r\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n\r\nexport type PropertyType<T> = T extends StateToken<any>\r\n  ? Observable<ExtractTokenType<T>>\r\n  : T extends (...args: any[]) => any\r\n  ? Observable<ReturnType<T>>\r\n  : any;\r\n","import { createSelectObservable, createSelectorFn, PropertyType } from './symbols';\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select<T>(rawSelector?: T, ...paths: string[]): PropertyDecorator {\r\n  return function(target, key): void {\r\n    const name: string = key.toString();\r\n    const selectorId = `__${name}__selector`;\r\n    const selector = createSelectorFn(name, rawSelector, paths);\r\n\r\n    Object.defineProperties(target, {\r\n      [selectorId]: {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      },\r\n      [name]: {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get(): PropertyType<T> {\r\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\r\n        }\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { SharedSelectorOptions } from '../internal/internals';\r\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for setting selector options at a method or class level.\r\n */\r\nexport function SelectorOptions(options: SharedSelectorOptions) {\r\n  return <ClassDecorator & MethodDecorator>(\r\n    function decorate<T>(\r\n      target: any,\r\n      methodName: string,\r\n      descriptor: TypedPropertyDescriptor<T>\r\n    ) {\r\n      if (methodName) {\r\n        // Method Decorator\r\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\r\n        if (originalFn) {\r\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\r\n        }\r\n      } else {\r\n        // Class Decorator\r\n        selectorOptionsMetaAccessor.defineOptions(target, options);\r\n      }\r\n    }\r\n  );\r\n}\r\n","import {\r\n  getSelectorMetadata as getSelectorMetadataInternal,\r\n  getStoreMetadata as getStoreMetadataInternal,\r\n  ensureStoreMetadata as ensureStoreMetadataInternal,\r\n  ensureSelectorMetadata as ensureSelectorMetadataInternal,\r\n  StateClassInternal,\r\n  SharedSelectorOptions\r\n} from './internal/internals';\r\nimport { PlainObjectOf } from '../internals/src/symbols';\r\nimport { ActionHandlerMetaData } from './actions/symbols';\r\n\r\ninterface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  children?: StateClassInternal[];\r\n}\r\n\r\ninterface SelectorMetaDataModel {\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport function ensureStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return ensureStoreMetadataInternal(target);\r\n}\r\n\r\nexport function getStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return getStoreMetadataInternal(target);\r\n}\r\n\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  return ensureSelectorMetadataInternal(target);\r\n}\r\n\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return getSelectorMetadataInternal(target);\r\n}\r\n","import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { createSelector } from '../../utils/selector-utils';\r\nimport { SelectorSpec, SelectorType } from './symbols';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector<T>(selectors?: T[]): SelectorType<T> {\r\n  return <U>(\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<SelectorSpec<T, U>>\r\n  ): TypedPropertyDescriptor<SelectorSpec<T, U>> | void => {\r\n    const isNotMethod = !(descriptor && descriptor.value !== null);\r\n\r\n    if (isNotMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());\r\n    }\r\n\r\n    const originalFn = descriptor.value;\r\n    const memoizedFn = createSelector(selectors, originalFn as any, {\r\n      containerClass: target,\r\n      selectorName: key.toString(),\r\n      getSelectorOptions() {\r\n        return {};\r\n      }\r\n    });\r\n    const newDescriptor = {\r\n      configurable: true,\r\n      get() {\r\n        return memoizedFn;\r\n      }\r\n    };\r\n    // Add hidden property to descriptor\r\n    (<any>newDescriptor)['originalFn'] = originalFn;\r\n    return newDescriptor;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n","import { TokenName } from './symbols';\r\nimport {\r\n  ensureSelectorMetadata,\r\n  RuntimeSelectorContext,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nexport class StateToken<T = void> {\r\n  constructor(private readonly name: TokenName<T>) {\r\n    const selectorMetadata = ensureSelectorMetadata(<any>this);\r\n    selectorMetadata.makeRootSelector = (\r\n      runtimeContext: RuntimeSelectorContext\r\n    ): SelectFromRootState => {\r\n      return runtimeContext.getStateGetter(this.name);\r\n    };\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  toString(): string {\r\n    return `StateToken[${this.name}]`;\r\n  }\r\n}\r\n"],"names":["isObject","tslib_1.__extends","MESSAGES","CODE","tslib_1.__values","MetaDataModel","SelectorMetaDataModel","ensureStoreMetadata","ensureStoreMetadataInternal","getStoreMetadata","getStoreMetadataInternal","ensureSelectorMetadata","ensureSelectorMetadataInternal","getSelectorMetadata","getSelectorMetadataInternal"],"mappings":";;;;;;;;;;;;;;IACE,YAAa,YAAY;IACzB,cAAe,cAAc;IAC7B,qBAAsB,qBAAqB;IAC3C,iBAAkB,iBAAiB;IACnC,sBAAuB,sBAAsB;IAC7C,uBAAwB,uBAAuB;IAC/C,8BAA+B,8BAA8B;IAC7D,kBAAmB,kBAAkB;IACrC,oBAAqB,oBAAoB;IACzC,cAAe,cAAc;IAC7B,gBAAiB,gBAAgB;IACjC,oBAAqB,oBAAoB;IACzC,0BAA2B,0BAA0B;;;AAGvD,IAAa,eAAe;IAC1B,GAAC,eAAe,CAAC,UAAU;;;;IAAG,UAAC,IAAY;QACzC,OAAG,IAAI,6EAA0E;KAAA,CAAA;IACnF,GAAC,eAAe,CAAC,mBAAmB;;;IAAG,cAAM,OAAA,wCAAwC,GAAA,CAAA;IACrF,GAAC,eAAe,CAAC,YAAY;;;;;;IAAG,UAAC,OAAe,EAAE,OAAe,EAAE,OAAe;QAChF,OAAA,iBAAe,OAAO,eAAU,OAAO,2BAAsB,OAAS;KAAA,CAAA;IACxE,GAAC,eAAe,CAAC,eAAe;;;IAAG,cAAM,OAAA,kDAAkD,GAAA,CAAA;IAC3F,GAAC,eAAe,CAAC,oBAAoB;;;IAAG;QACtC,OAAA,4FAA4F;YAC5F,0FAA0F;YAC1F,0EAA0E;KAAA,CAAA;IAC5E,GAAC,eAAe,CAAC,qBAAqB;;;IAAG;QACvC,OAAA,8GAA8G;YAC9G,0EAA0E;KAAA,CAAA;IAC5E,GAAC,eAAe,CAAC,4BAA4B;;;IAAG;QAC9C,OAAA,+CAA+C;KAAA,CAAA;IACjD,GAAC,eAAe,CAAC,gBAAgB;;;IAAG;QAClC,OAAA,wDAAwD;KAAA,CAAA;IAC1D,GAAC,eAAe,CAAC,kBAAkB;;;IAAG,cAAM,OAAA,gCAAgC,GAAA,CAAA;IAC5E,GAAC,eAAe,CAAC,YAAY;;;IAAG;QAC9B,OAAA,6GAA6G;YAC7G,wFAAwF;YACxF,8EAA8E;KAAA,CAAA;IAChF,GAAC,eAAe,CAAC,cAAc;;;IAAG,cAAM,OAAA,mCAAmC,GAAA,CAAA;IAC3E,GAAC,eAAe,CAAC,kBAAkB;;;IAAG,cAAM,OAAA,uCAAuC,GAAA,CAAA;IACnF,GAAC,eAAe,CAAC,wBAAwB;;;;IAAG,UAAC,IAAY;QACvD,OAAA,MAAI,IAAI,sFAAmF;KAAA,CAAA;OAC9F;;;;;;AC3CD;IAQE,kDAAoB,OAAe,EAA+B,WAAmB;QAAjE,YAAO,GAAP,OAAO,CAAQ;QAA+B,gBAAW,GAAX,WAAW,CAAQ;QACnF,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC1C;;;;;;IAED,wDAAK;;;;;IAAL,UAAS,IAAa;QACpB,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;KACrC;;;;;;IAED,wDAAK;;;;;IAAL,UAAS,IAAa;QACpB,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;KACpC;;;;;;;IAEO,mEAAgB;;;;;;IAAxB,UAA4B,IAAa;QACvC,IAAI,MAAM,CAAC,eAAe,EAAE,EAAE;YAC5B,OAAO,IAAI,EAAE,CAAC;SACf;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAC/B;;;;;;;IAEO,oEAAiB;;;;;;IAAzB,UAA6B,IAAa;QACxC,IAAI,MAAM,CAAC,eAAe,EAAE,EAAE;YAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;SAC7C;QACD,OAAO,IAAI,EAAE,CAAC;KACf;;;;;;IAEO,wEAAqB;;;;;IAA7B,UAA8B,MAAc;;;;QAI1C,IAAI,MAAM,YAAY,MAAM,EAAE;YAC5B,OAAO;SACR;QAED,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;KAC/D;;gBAxCF,UAAU;;;;gBANkB,MAAM;6CAQK,MAAM,SAAC,WAAW;;IAuC1D,+CAAC;CAzCD,IAyCC;;;;;;IAvCa,2DAAuB;;;;;IAAE,+DAAgD;;;;;;;ACRvF;AASA,IAAa,gBAAgB,GAAG,IAAI,cAAc,CAAM,kBAAkB,CAAC;;AAC3E,IAAa,mBAAmB,GAAG,IAAI,cAAc,CAAM,qBAAqB,CAAC;;AACjF,IAAa,YAAY,GAAG,IAAI,cAAc,CAAC,cAAc,CAAC;;AAC9D,IAAa,YAAY,GAAG,IAAI,cAAc,CAAoB,cAAc,CAAC;;AACjF,IAAa,WAAW,GAAG,IAAI,cAAc,CAAoB,aAAa,CAAC;;AAE/E,IAAa,QAAQ,GAAG,WAAW;;AACnC,IAAa,gBAAgB,GAAG,mBAAmB;;AACnD,IAAa,iBAAiB,GAAG,oBAAoB;;;;AAWrD;IA2CE;;;;;;;QATA,kBAAa,GAAgB,EAAE,CAAC;;;;QAIhC,oBAAe,GAA0B;YACvC,oBAAoB,EAAE,IAAI;;YAC1B,cAAc,EAAE,IAAI;SACrB,CAAC;QAGA,IAAI,CAAC,aAAa,GAAG;YACnB,2BAA2B,EAAE,KAAK;SACnC,CAAC;QACF,IAAI,CAAC,iBAAiB,GAAG,wCAAwC,CAAC;KACnE;;gBAhDF,UAAU;;;;IAiDX,iBAAC;CAjDD,IAiDC;;;;;;;;IA1CC,qCAAyB;;IACzB,mCAOE;;;;;;;;;;;;;IAYF,uCAA+C;;;;;;;;IAO/C,mCAAgC;;;;;IAIhC,qCAGE;;;;;;;AAeJ,2BAoBC;;;;;;IAhBC,kDAAc;;;;;;IAKd,qDAAuC;;;;;;IAKvC,uDAA+B;;;;;;IAK/B,yDAAiD;;;;;;AAQnD,yBAKC;;;;;;;;;IADC,iEAA6D;;;;;;;AAM/D,2BAeC;;;;;;IAXC,4BAA6B;;;;;IAK7B,gCAAa;;;;;IAKb,gCAAwB;;;;;;;AAO1B;;;;;;IACE,0BACkB,aAAgB,EAChB,YAAe,EACf,WAAoB;QAFpB,kBAAa,GAAb,aAAa,CAAG;QAChB,iBAAY,GAAZ,YAAY,CAAG;QACf,gBAAW,GAAX,WAAW,CAAS;KAClC;IACN,uBAAC;CAAA,IAAA;;;IAJG,yCAAgC;;IAChC,wCAA+B;;IAC/B,uCAAoC;;;;;;AAOxC,yBAEC;;;;;;IADC,qDAAgD;;;;;;AAMlD,4BAEC;;;;;;IADC,8DAA8C;;;;;;AAMhD,iCAEC;;;;;;IADC,qEAAkD;;;;;;;ACxKpD;;;;AAKA,IAAa,uBAAuB,GAAG,IAAI,cAAc,CACvD,yBAAyB,CAC1B;;;;AAKD,oCAGC;;;;;;;IAFC,4DAA2B;;;;;;IAC3B,4DAA2B;;;;;;;;;;;;;ACV7B,SAAgB,yBAAyB,CAAC,MAAW;IACnD,IAAI,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE;QACjD,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;KAChC;SAAM;QACL,OAAO,MAAM,CAAC,IAAI,CAAC;KACpB;CACF;;;;;;;AAMD,SAAgB,aAAa,CAAC,OAAY;;QAClC,KAAK,GAAG,yBAAyB,CAAC,OAAO,CAAC;IAEhD;;;;IAAO,UAAS,OAAY;QAC1B,OAAO,KAAK,KAAK,yBAAyB,CAAC,OAAO,CAAC,CAAC;KACrD,EAAC;CACH;;;;;;;;;;;;AAYD,IAAa,QAAQ;;;;;;AAAG,UAAC,GAAQ,EAAE,IAAY,EAAE,GAAQ;IACvD,GAAG,gBAAQ,GAAG,CAAE,CAAC;;QAEX,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;;QACvB,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;IAElC,KAAK,CAAC,MAAM;;;;;;IAAC,UAAC,GAAG,EAAE,IAAI,EAAE,KAAK;QAC5B,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;SACjB;aAAM;YACL,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,gBAAQ,GAAG,CAAC,IAAI,CAAC,CAAE,CAAC;SAC7E;QAED,OAAO,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;KACzB,GAAE,GAAG,CAAC,CAAC;IAER,OAAO,GAAG,CAAC;CACZ,CAAA;;;;;;;;;AASD,IAAa,QAAQ;;;;;AAAG,UAAC,GAAQ,EAAE,IAAY;IAC7C,OAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM;;;;;IAAC,UAAC,GAAQ,EAAE,IAAY,IAAK,OAAA,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAA,GAAE,GAAG,CAAC;CAAA,CAAA;;;;;;;;;;AAU3E,IAAa,QAAQ;;;;AAAG,UAAC,IAAS;IAChC,OAAO,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;CACjE,CAAA;;;;;;;;;AASD,IAAa,SAAS;;;;;AAAG,UAAC,IAAS;IAAE,iBAAiB;SAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;QAAjB,gCAAiB;;;IACpD,IAAI,CAAC,OAAO,CAAC,MAAM;QAAE,OAAO,IAAI,CAAC;;QAC3B,MAAM,GAAG,OAAO,CAAC,KAAK,EAAE;IAE9B,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;QACtC,KAAK,IAAM,GAAG,IAAI,MAAM,EAAE;YACxB,IAAI,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;gBACzB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;oBAAE,MAAM,CAAC,MAAM,CAAC,IAAI,YAAI,GAAC,GAAG,IAAG,EAAE,MAAG,CAAC;gBACnD,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aACnC;iBAAM;gBACL,MAAM,CAAC,MAAM,CAAC,IAAI,YAAI,GAAC,GAAG,IAAG,MAAM,CAAC,GAAG,CAAC,MAAG,CAAC;aAC7C;SACF;KACF;IAED,OAAO,SAAS,yBAAC,IAAI,GAAK,OAAO,GAAE;CACpC,CAAA;;;;;;AC/FD;;;;AAYA,iCAGC;;;;;;;;;;;AAKD,8BAMC;;;;;IALC,qDAAc;;;;;IAEd,wDAAoB;;;;;IAEpB,oEAAyD;;;;;AAG3D,4BAOC;;;IANC,6BAAoB;;IACpB,gCAAgD;;IAChD,iCAAc;;IACd,6BAAoB;;IACpB,yCAAyC;;IACzC,iCAAgC;;;;;AAGlC,qCAGC;;;;;;IAFC,qEAA8C;;;;;IAC9C,kFAAgF;;;;;AAMlF,oCAGC;;;IAFC,qDAA+B;;IAC/B,+CAAyB;;;;;AAG3B,oCAMC;;;IALC,iDAAyC;;IACzC,2CAA4B;;IAC5B,+CAAoB;;IACpB,6CAA4B;;IAC5B,mDAAgD;;;;;AAGlD,0BAOC;;;IANC,2BAAa;;IACb,oCAAuB;;IACvB,8BAAgD;;IAChD,+BAAc;;IACd,+BAAc;;IACd,2BAAa;;;;;AAGf,gCAGC;;;IAFC,qCAAc;;IACd,mCAAsB;;;;;;AAKxB,4BAGC;;;IAFC,wCAAmB;;IACnB,oCAAe;;;;;;;;;AAQjB,SAAgB,mBAAmB,CAAC,MAA0B;IAC5D,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;;YAC9B,iBAAe,GAAkB;YACrC,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE,IAAI;YACV,gBAAgB;;;;sBAAC,OAA+B;gBAC9C,OAAO,OAAO,CAAC,cAAc,CAAC,iBAAe,CAAC,IAAI,CAAC,CAAC;aACrD;YACD,QAAQ,EAAE,EAAE;SACb;QAED,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,iBAAe,EAAE,CAAC,CAAC;KACrE;IACD,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC;CACjC;;;;;;;;AAOD,SAAgB,gBAAgB,CAAC,MAA0B;IACzD,0BAAO,MAAM,CAAC,QAAQ,CAAC,GAAE;CAC1B;;;;;;;;AAOD,SAAgB,sBAAsB,CAAC,MAAgB;IACrD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAE;;YACvC,eAAe,GAA0B;YAC7C,gBAAgB,EAAE,IAAI;YACtB,UAAU,EAAE,IAAI;YAChB,cAAc,EAAE,IAAI;YACpB,YAAY,EAAE,IAAI;YAClB,kBAAkB;;;YAAE,cAAM,QAAC,EAAE,IAAC,CAAA;SAC/B;QAED,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,iBAAiB,EAAE,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;KAC9E;IAED,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC;CACpC;;;;;;;;AAOD,SAAgB,mBAAmB,CAAC,MAAW;IAC7C,OAAO,MAAM,CAAC,iBAAiB,CAAC,CAAC;CAClC;;;;;;;;;;;;;AAYD,SAAS,mBAAmB,CAAC,KAAe;;QACpC,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE;IACjC;;;;IAAO,UAAA,GAAG,IAAI,OAAA,WAAW,CAAC,MAAM;;;;;IAAC,UAAC,GAAQ,EAAE,IAAY,IAAK,OAAA,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAA,GAAE,GAAG,CAAC,GAAA,EAAC;CACrF;;;;;;;;;;AASD,SAAS,cAAc,CAAC,KAAe;;QAC/B,QAAQ,GAAG,KAAK;;QAClB,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC;;QAC5B,CAAC,GAAG,CAAC;;QACH,CAAC,GAAG,QAAQ,CAAC,MAAM;;QAErB,IAAI,GAAG,GAAG;IACd,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE;QACd,IAAI,GAAG,IAAI,GAAG,MAAM,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;;QAEK,EAAE,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,SAAS,GAAG,IAAI,GAAG,GAAG,CAAC;IAExD,0BAAwB,EAAE,GAAC;CAC5B;;;;;;;;;;;AASD,SAAgB,UAAU,CAAC,KAAe,EAAE,MAAkB;IAC5D,IAAI,MAAM,IAAI,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,aAAa,CAAC,2BAA2B,EAAE;QACtF,OAAO,mBAAmB,CAAC,KAAK,CAAC,CAAC;KACnC;SAAM;QACL,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;KAC9B;CACF;;;;;;;;;;;;;;;;;;;;;AAoBD,SAAgB,UAAU,CAAC,YAAkC;;QACrD,QAAQ;;;;IAAG,UAAC,UAA8B;;YACxC,IAAI,GAAG,YAAY,CAAC,IAAI;;;;QAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,UAAU,GAAA,EAAC;QACrD,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,CACb,4BAA0B,UAAU,yDAAsD,CAC3F,CAAC;SACH;QAED,0BAAO,mBAAA,IAAI,CAAC,QAAQ,CAAC,GAAE,IAAI,GAAE;KAC9B,CAAA;IAED,OAAO,YAAY,CAAC,MAAM;;;;;IACxB,UAAC,MAAqB,EAAE,UAA8B;QAC9C,IAAA,8CAA0C,EAAxC,cAAI,EAAE,sBAAkC;QAChD,MAAM,oBAAC,IAAI,GAAE,GAAG,CAAC,QAAQ,IAAI,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/C,OAAO,MAAM,CAAC;KACf,GACD,EAAE,CACH,CAAC;CACH;;;;;;;;;;;;;AAYD,SAAgB,WAAW,CAAC,MAA4B;IACtD,OAAO,MAAM,CAAC,MAAM;;;;;IAClB,UAAC,MAAyC,EAAE,UAA8B;;YAClE,IAAI,sBAAG,UAAU,CAAC,QAAQ,CAAC,EAAC;QAClC,MAAM,oBAAC,IAAI,CAAC,IAAI,GAAE,GAAG,UAAU,CAAC;QAChC,OAAO,MAAM,CAAC;KACf,GACD,EAAE,CACH,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;AAsBD,SAAgB,kBAAkB,CAChC,GAAkB,EAClB,MAAkC;IAAlC,uBAAA,EAAA,WAAkC;;QAE5B,KAAK;;;;;IAAG,UAAC,KAAoB,EAAE,SAAiB;QACpD,KAAK,IAAM,GAAG,IAAI,KAAK,EAAE;YACvB,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;;oBAC7D,QAAM,GAAG,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC;gBAChC,OAAO,QAAM,KAAK,IAAI,GAAM,QAAM,SAAI,GAAK,GAAG,GAAG,CAAC;aACnD;SACF;QACD,OAAO,IAAI,CAAC;KACb,CAAA;IAED,KAAK,IAAM,GAAG,IAAI,GAAG,EAAE;QACrB,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;;gBACrB,QAAM,GAAG,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;YAC9B,MAAM,CAAC,GAAG,CAAC,GAAG,QAAM,GAAM,QAAM,SAAI,GAAK,GAAG,GAAG,CAAC;SACjD;KACF;IAED,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;;;;;;;;;;;;AAqBD,SAAgB,eAAe,CAAC,KAAoB;;QAC5C,MAAM,GAAa,EAAE;;QACrB,OAAO,GAA2B,EAAE;;QAEpC,KAAK;;;;;IAAG,UAAC,IAAY,EAAE,SAAwB;QAAxB,0BAAA,EAAA,cAAwB;QACnD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC7B,SAAS,GAAG,EAAE,CAAC;SAChB;QAED,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QAErB,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO;;;;QAAC,UAAC,GAAW;YAC9B,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC/B,MAAM,IAAI,KAAK,CACb,0BAAwB,GAAG,0BAAqB,IAAI,WAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAG,CACnF,CAAC;aACH;YAED,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;gBAChB,OAAO;aACR;YAED,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC,EAAC,CAAC;QAEH,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACnB;KACF,CAAA;IAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO;;;;IAAC,UAAA,CAAC,IAAI,OAAA,KAAK,CAAC,CAAC,CAAC,GAAA,EAAC,CAAC;IAE1C,OAAO,MAAM,CAAC,OAAO,EAAE,CAAC;CACzB;;;;;;;;AAOD,SAAgBA,UAAQ,CAAC,GAAQ;IAC/B,OAAO,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,KAAK,OAAO,GAAG,KAAK,UAAU,CAAC;CAC/E;;;;;;;AAED,SAAgB,mBAAmB,CACjC,WAAwB,EACxB,IAAsB;;QAEhB,aAAa,GAAM,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,WAAW,CAAC,IAAI,CAAC;;QACnE,YAAY,GAAM,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,IAAI,CAAC;IACpE,OAAO,IAAI,gBAAgB,CAAC,aAAa,EAAE,YAAY,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;CACtF;;;;;;ACpXD;;;;AAMA,+BAOC;;;IANC,kCAAU;;IACV,kCAIE;;;;;;;;;AAaJ,SAAgB,QAAQ;IAAC,sBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,iCAA6B;;IACpD,OAAO,gBAAgB,CAAC,YAAY,CAAC,CAAC;CACvC;;;;;;;;AAOD,SAAgB,kBAAkB;IAChC,sBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,iCAA6B;;IAE7B,OAAO,gBAAgB,CAAC,YAAY,EAAE,+BAAyB,CAAC,CAAC;CAClE;;;;;;;;AAOD,SAAgB,kBAAkB;IAChC,sBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,iCAA6B;;IAE7B,OAAO,gBAAgB,CAAC,YAAY,EAAE,+BAAyB,CAAC,CAAC;CAClE;;;;;;;;AAOD,SAAgB,gBAAgB;IAC9B,sBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,iCAA6B;;IAE7B,OAAO,gBAAgB,CAAC,YAAY,EAAE,2BAAuB,CAAC,CAAC;CAChE;;;;;;;;AAOD,SAAgB,iBAAiB;IAC/B,sBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,iCAA6B;;;QAEvB,eAAe,GAAG;;;;KAIvB;IACD,OAAO,gBAAgB,CAAC,YAAY,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;CACzE;;;;;;;;AAOD,SAAgB,eAAe;IAC7B,sBAA6B;SAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;QAA7B,iCAA6B;;IAE7B,OAAO,gBAAgB,CAAC,YAAY,EAAE,yBAAsB,CAAC,CAAC;CAC/D;;;;;;;AAED,SAAS,gBAAgB,CACvB,YAA0B,EAC1B,QAAyB;;;;AAIzB,WAAmE;IAAnE,4BAAA,EAAA,uBAAmE;;QAE7D,UAAU,GAAG,2BAA2B,CAAC,YAAY,CAAC;;QACtD,gBAAgB,GAAG,QAAQ,IAAI,wBAAwB,CAAC,QAAQ,CAAC;IACvE;;;;IAAO,UAAS,CAA4B;QAC1C,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,gBAAgB,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;KAC1E,EAAC;CACH;;;;;;AAED,SAAS,YAAY,CAAC,YAAuB,EAAE,eAA2B;IACxE,OAAO,MAAM;;;;IAAC,UAAC,GAAkB;;YACzB,UAAU,sBAAG,yBAAyB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAC;;YACnD,SAAS,GAAG,YAAY,CAAC,UAAU,CAAC;;YACpC,WAAW,GAAG,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI;QACxE,OAAO,SAAS,IAAI,WAAW,CAAC;KACjC,EAAC,CAAC;CACJ;;;;AAED,SAAS,eAAe;IACtB,OAAO,GAAG;;;;IAAC,UAAC,EAAwC;YAAtC,kBAAM,EAAE,kBAAM,EAAE,gBAAK;QACjC,0BAAyB;YACvB,MAAM,QAAA;YACN,MAAM,EAAE;gBACN,UAAU,EAAE,kCAA4B,MAAM;gBAC9C,QAAQ,EAAE,8BAA0B,MAAM;gBAC1C,KAAK,OAAA;aACN;SACF,GAAC;KACH,EAAC,CAAC;CACJ;;;;;AAED,SAAS,SAAS;IAChB,OAAO,GAAG;;;;IAAC,UAAC,GAAkB,8BAAQ,GAAG,CAAC,MAAM,KAAA,EAAC,CAAC;CACnD;;;;AAED,wBAEC;;;;;AAED,SAAS,2BAA2B,CAAC,KAAmB;IACtD,OAAO,KAAK,CAAC,MAAM;;;;;IAAC,UAAC,SAAoB,EAAE,KAAU;QACnD,SAAS,oBAAC,yBAAyB,CAAC,KAAK,CAAC,GAAE,GAAG,IAAI,CAAC;QACpD,OAAO,SAAS,CAAC;KAClB,sBAAa,EAAE,GAAC,CAAC;CACnB;;;;;AAED,SAAS,wBAAwB,CAAC,QAAwB;IACxD,OAAO,QAAQ,CAAC,MAAM;;;;;IAAC,UAAC,SAAoB,EAAE,MAAoB;QAChE,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;QACzB,OAAO,SAAS,CAAC;KAClB,sBAAa,EAAE,GAAC,CAAC;CACnB;;;;;;ACnJD;;;;;;;AAOA,SAAgB,SAAS,CACvB,qBAA4C;IAE5C;;;;IAAO,UAAC,MAAqB;QAC3B,OAAO,IAAI,UAAU;;;;QAAC,UAAC,IAAiB;YACtC,OAAO,MAAM,CAAC,SAAS,CAAC;gBACtB,IAAI;;;;0BAAC,KAAK;oBACR,qBAAqB,CAAC,KAAK;;;oBAAC,cAAM,OAAA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,EAAC,CAAC;iBACrD;gBACD,KAAK;;;;0BAAC,KAAK;oBACT,qBAAqB,CAAC,KAAK;;;oBAAC,cAAM,OAAA,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAA,EAAC,CAAC;iBACtD;gBACD,QAAQ;;;;oBACN,qBAAqB,CAAC,KAAK;;;oBAAC,cAAM,OAAA,IAAI,CAAC,QAAQ,EAAE,GAAA,EAAC,CAAC;iBACpD;aACF,CAAC,CAAC;SACJ,EAAC,CAAC;KACJ,EAAC;CACH;;;;;;ACzBD;IAME,uCAC2C,kBAAyC;QAAzC,uBAAkB,GAAlB,kBAAkB,CAAuB;KAChF;;;;;;IAEJ,6CAAK;;;;;IAAL,UAAS,IAAa;QACpB,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC5C;;;;;;IAED,6CAAK;;;;;IAAL,UAAS,IAAa;QACpB,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC5C;;gBAZF,UAAU;;;;gDAGN,MAAM,SAAC,uBAAuB;;IAUnC,oCAAC;CAbD,IAaC;;;;;;IAVG,2DAAkF;;;;;;;;;ICGpF,YAAa,YAAY;IACzB,YAAa,YAAY;IACzB,UAAW,UAAU;IACrB,SAAU,SAAS;;;;;;AAGrB,4BAIC;;;IAHC,+BAAqB;;IACrB,+BAAU;;IACV,8BAAc;;;;;;;;;;;;;;;;;;AAkBhB;;;;;;;;;;;;;;;;;IAAuCC,kCAAU;IAAjD;QAAA,qEAiBC;QAhBS,gBAAU,GAAQ,EAAE,CAAC;QACrB,sBAAgB,GAAG,KAAK,CAAC;;KAelC;;;;;IAbC,6BAAI;;;;IAAJ,UAAK,KAAS;QACZ,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,UAAU,CAAC,OAAO,oBAAC,KAAK,GAAE,CAAC;YAChC,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,iBAAM,IAAI,YAAC,KAAK,CAAC,CAAC;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;;gBAC3B,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;YACvC,iBAAM,IAAI,YAAC,SAAS,CAAC,CAAC;SACvB;QACD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;KAC/B;IACH,qBAAC;CAjBD,CAAuC,OAAO,GAiB7C;;;;;;IAhBC,oCAA6B;;;;;IAC7B,0CAAiC;;;;;AAoBnC;IACqCA,mCAA6B;IADlE;;KACqE;;gBADpE,UAAU;;IACyD,sBAAC;CAAA,CAAhC,cAAc,GAAkB;;;;;;AAOrE;IAC6BA,2BAAe;;;IAG1C,iBACE,gBAAiC,EACjC,yBAAwD;eAExD;;;;QAAM,UAAA,QAAQ;;gBACN,iBAAiB,GAAG,gBAAgB;iBACvC,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;iBAC1C,SAAS,CAAC;gBACT,IAAI;;;;gBAAE,UAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAA,CAAA;gBAC/B,KAAK;;;;gBAAE,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAA,CAAA;gBACrC,QAAQ;;;gBAAE,cAAM,OAAA,QAAQ,CAAC,QAAQ,EAAE,GAAA,CAAA;aACpC,CAAC;YAEJ,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;SACjC,EAAC;KACH;;gBAnBF,UAAU;;;;gBAKW,eAAe;gBApE5B,6BAA6B;;IAmFtC,cAAC;CAAA,CAnB4B,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CvC,IAAa,OAAO;;;;AAAG,UAAC,KAAgB;;;;AAAK;IAAC,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,yBAAc;;;QACpD,IAAI,sBAAG,KAAK,CAAC,KAAK,EAAE,EAAC;IAC3B,OAAO,IAAI,wBAAI,IAAI;;;;QAAE;YAAC,kBAAkB;iBAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;gBAAlB,6BAAkB;;YAAK,OAAA,OAAO,CAAC,KAAK,CAAC,wBAAI,QAAQ;SAAC,KAAE;CAC3E,IAAA,CAAA;;;;;;;;;;ACjBD;IACiCA,+BAA4B;IAC3D;eACE,kBAAM,EAAE,CAAC;KACV;;gBAJF,UAAU;;;;IAKX,kBAAC;CAAA,CAJgC,eAAe;;;;;;;ICH9C,uBAGU,cAA6B,EAG7B,eAA6B;QAH7B,mBAAc,GAAd,cAAc,CAAe;QAG7B,oBAAe,GAAf,eAAe,CAAc;QARhC,YAAO,GAAmB,EAAE,CAAC;QAUlC,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;IAED,sBAAY,sCAAW;;;;;QAAvB;YACE,OAAO,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC;SAC7E;;;OAAA;;;;;IAEO,wCAAgB;;;;IAAxB;;;YACQ,cAAc,GAAmB,IAAI,CAAC,iBAAiB,EAAE;QAC/D,CAAA,KAAA,IAAI,CAAC,WAAW,EAAC,IAAI,oBAAI,cAAc,GAAE;KAC1C;;;;;IAEO,yCAAiB;;;;IAAzB;;YACQ,QAAQ,GAAiB,IAAI,CAAC,eAAe,IAAI,EAAE;QACzD,OAAO,QAAQ,CAAC,GAAG;;;;QACjB,UAAC,MAAkB,+BAChB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,MAAiB,EACxE,CAAC;KACH;;gBA9BF,UAAU;;;;gBAOiB,aAAa,uBAFpC,QAAQ,YACR,QAAQ;4CAER,MAAM,SAAC,YAAY,cACnB,QAAQ;;IAsBb,oBAAC;CA/BD,IA+BC;;;IA7BC,gCAAoC;;;;;IAGlC,uCAEqC;;;;;IACrC,wCAEqC;;;;;;;;;;;;;ACKzC;IACqDA,mDAAsB;IAD3E;;KAC8E;;gBAD7E,UAAU;;IACkE,sCAAC;CAAA,CAAzB,OAAO,GAAkB;;IAI5E,4BACU,aAA2B,EAC3B,QAAyB,EACzB,cAA+C,EAC/C,cAA6B,EAC7B,YAAyB,EACzB,sBAAqD;QALrD,kBAAa,GAAb,aAAa,CAAc;QAC3B,aAAQ,GAAR,QAAQ,CAAiB;QACzB,mBAAc,GAAd,cAAc,CAAiC;QAC/C,mBAAc,GAAd,cAAc,CAAe;QAC7B,iBAAY,GAAZ,YAAY,CAAa;QACzB,2BAAsB,GAAtB,sBAAsB,CAA+B;KAC3D;;;;;;;;;IAKJ,qCAAQ;;;;;IAAR,UAAS,eAA4B;QAArC,iBAeC;;YAdO,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK;;;QAAC;YAC/C,OAAA,KAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC;SAAA,EACvC;QAED,MAAM,CAAC,SAAS,CAAC;YACf,KAAK;;;;YAAE,UAAA,KAAK;gBACV,OAAA,KAAI,CAAC,sBAAsB,CAAC,KAAK;;;gBAAC;oBAChC,IAAI;wBACF,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;qBACvC;oBAAC,WAAM,GAAE;iBACX,EAAC;aAAA,CAAA;SACL,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;KAC5D;;;;;;IAEO,6CAAgB;;;;;IAAxB,UAAyB,eAA4B;QAArD,iBAOC;QANC,IAAI,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;YAClC,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1E,OAAO,QAAQ,CAAC,eAAe,CAAC,GAAG;;;;YAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAA,EAAC,CAAC,CAAC;SAC7E;aAAM;YACL,OAAO,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;SAC7C;KACF;;;;;;IAEO,2CAAc;;;;;IAAtB,UAAuB,MAAW;QAAlC,iBAwBC;;YAvBO,IAAI,GAAuB,yBAAyB,CAAC,MAAM,CAAC;QAClE,IAAI,CAAC,IAAI,EAAE;;gBACH,KAAK,GAAG,IAAI,KAAK,CACrB,+CAA6C,MAAM,CAAC,WAAW,CAAC,IAAM,CACvE;YACD,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B;;YAEK,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;;YACxC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO;QAE3C,OAAO,oBAAC,OAAO,UACV,OAAO;;;;;;YACV,UAAC,SAAc,EAAE,UAAe;gBAC9B,IAAI,SAAS,KAAK,SAAS,EAAE;oBAC3B,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBACnC;;oBACK,aAAa,GAAG,KAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC;gBAC5D,aAAa,CAAC,SAAS;;;;gBAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAA,EAAC,CAAC;gBACxD,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,iCAA2B,CAAC,CAAC;gBAC5E,OAAO,KAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,CAAC;aACrD;WACD,CAAC,SAAS,EAAE,MAAM,CAAC,IAAqB,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KAC/D;;;;;;IAEO,kDAAqB;;;;;IAA7B,UAA8B,MAAW;QACvC,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAC7B,MAAM;;;;QACJ,UAAC,GAAkB,IAAK,OAAA,GAAG,CAAC,MAAM,KAAK,MAAM,IAAI,GAAG,CAAC,MAAM,qCAA4B,EACxF,EACD,IAAI,CAAC,CAAC,CAAC,EACP,WAAW,EAAE,CACd,CAAC;KACH;;;;;;IAEO,qDAAwB;;;;;IAAhC,UAAiC,aAAwC;QAAzE,iBAeC;QAdC,OAAO,aAAa;aACjB,IAAI,CACH,UAAU;;;;QAAC,UAAC,GAAkB;YAC5B,QAAQ,GAAG,CAAC,MAAM;gBAChB;oBACE,OAAO,EAAE,CAAC,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC1C;oBACE,OAAO,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC/B;oBACE,OAAO,KAAK,CAAC;aAChB;SACF,EAAC,CACH;aACA,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;KACxB;;gBA3FF,UAAU;;;;gBArBF,YAAY;gBAKiB,eAAe;gBAqBzB,+BAA+B;gBAnBlD,aAAa;gBADb,WAAW;gBAEX,6BAA6B;;IAyGtC,yBAAC;CA5FD,IA4FC;;;;;;IAzFG,2CAAmC;;;;;IACnC,sCAAiC;;;;;IACjC,4CAAuD;;;;;IACvD,4CAAqC;;;;;IACrC,0CAAiC;;;;;IACjC,oDAA6D;;;;;;;;;;;;ACzBjE,IAAa,UAAU;;;;AAAG,UAAC,CAAM;IAC/B,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;;QAEX,WAAW,GAAG,OAAO,CAAC,KAAK,UAAU;;QACrC,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc;IAElD,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO;;;;IAAC,UAAS,IAAI;QACjD,IACE,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;aACvB,WAAW,GAAG,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,WAAW,GAAG,IAAI,CAAC;YACrF,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI;aACf,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC;YAC9D,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EACzB;YACA,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACrB;KACF,EAAC,CAAC;IAEH,OAAO,CAAC,CAAC;CACV,CAAA;;;;;;ACvBD;IAME,yBAC8B,SAA4B,EAC3B,UAA6B;QAD9B,cAAS,GAAT,SAAS,CAAmB;QAC3B,eAAU,GAAV,UAAU,CAAmB;KACxD;;gBALL,UAAU;;;;gDAGN,MAAM,SAAC,WAAW;gDAClB,MAAM,SAAC,YAAY;;IAExB,sBAAC;CAND,IAMC;;;IAHG,oCAAwD;;IACxD,qCAA0D;;;;;;;ACR9D;IAWE,yBAAoB,KAAsB,EAAU,OAAmB;QAAnD,UAAK,GAAL,KAAK,CAAiB;QAAU,YAAO,GAAP,OAAO,CAAY;KAAI;IAE3E,sBAAY,kDAAqB;;;;;QAAjC;YACE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;SAChE;;;OAAA;IAED,sBAAY,mDAAsB;;;;;QAAlC;YACE,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;SAChE;;;OAAA;;;;IAEM,uCAAa;;;IAApB;QACE,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;YAC3B,OAAO;SACR;QAED,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC9B,OAAO,CAAC,IAAI,CAACC,eAAQ,CAACC,eAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;SACrD;aAAM,IAAI,IAAI,CAAC,sBAAsB,EAAE;YACtC,OAAO,CAAC,IAAI,CAACD,eAAQ,CAACC,eAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;SACtD;KACF;;gBAtBF,UAAU;;;;gBAFF,eAAe;gBADf,UAAU;;IA0BnB,sBAAC;CAvBD,IAuBC;;;;;;IArBa,gCAA8B;;;;;IAAE,kCAA2B;;;;;;;;;;;ACEzE;IAEE,iCACU,YAAyB,EACzB,WAA+B,EAC/B,OAAmB,EAC3B,eAAgC;QAHxB,iBAAY,GAAZ,YAAY,CAAa;QACzB,gBAAW,GAAX,WAAW,CAAoB;QAC/B,YAAO,GAAP,OAAO,CAAY;QAG3B,eAAe,CAAC,aAAa,EAAE,CAAC;KACjC;;;;;;;;IAKD,wDAAsB;;;;IAAtB;QAAA,iBAYC;;YAXO,mBAAmB,GAAG;YAC1B,QAAQ;;;YAAE,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAA,CAAA;YAC5C,QAAQ;;;;YAAE,UAAC,QAAa,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAA,CAAA;YAC7D,QAAQ;;;;YAAE,UAAC,eAA4B,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAA,CAAA;SACvF;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;YAChC,OAAO,IAAI,CAAC,iCAAiC,CAAC,mBAAmB,CAAC,CAAC;SACpE;QAED,OAAO,mBAAmB,CAAC;KAC5B;;;;;;IAEO,mEAAiC;;;;;IAAzC,UAA0C,IAA0B;QAClE,OAAO;YACL,QAAQ;;;YAAE,cAAM,OAAA,IAAI,CAAC,QAAQ,EAAE,GAAA,CAAA;YAC/B,QAAQ;;;;YAAE,UAAA,KAAK;;oBACP,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC;gBACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;aACnC,CAAA;YACD,QAAQ;;;;YAAE,UAAA,OAAO;gBACf,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC/B,CAAA;SACF,CAAC;KACH;;;;;IAED,6DAA2B;;;;IAA3B,UAA4B,OAA0B;;YAC9C,eAAe,GAAyB,IAAI,CAAC,sBAAsB,EAAE;;;YAGrE,YAAY,GAAG,eAAe,CAAC,QAAQ,EAAE;;QAE/C,eAAe,CAAC,QAAQ,cAAM,YAAY,EAAK,OAAO,CAAC,QAAQ,EAAG,CAAC;KACpE;;gBAhDF,UAAU;;;;gBATF,WAAW;gBADX,kBAAkB;gBAElB,UAAU;gBAEV,eAAe;;IAuDxB,8BAAC;CAjDD,IAiDC;;;;;;IA9CG,+CAAiC;;;;;IACjC,8CAAuC;;;;;IACvC,0CAA2B;;;;;;;;;;;;ACZ/B,SAAgB,WAAW,CAAI,GAAe;IAC5C;;;;IAAO,UAAC,aAA0B;QAChC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAACD,eAAQ,CAACC,eAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;SAClD;aAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAClC,MAAM,IAAI,KAAK,CAACD,eAAQ,CAACC,eAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;SACtD;;YAEK,QAAQ,oCAAc,aAAa,IAAU;QACnD,KAAK,IAAM,GAAG,IAAI,GAAG,EAAE;;;YAGrB,QAAQ,CAAC,GAAG,CAAC,GAAG,oBAAC,GAAG,IAAS,GAAG,CAAC,CAAC;SACnC;QAED,0BAAO,QAAQ,GAAM;KACtB,EAAC;CACH;;;;;;ACvBD;;;;AAaA;IAEE,6BAAoB,wBAAiD;QAAjD,6BAAwB,GAAxB,wBAAwB,CAAyB;KAAI;;;;;;;;;;IAKzE,gDAAkB;;;;;;IAAlB,UAAsB,WAAwB;;YACtC,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,EAAE;;;;;QAEnE,SAAS,QAAQ,CAAC,eAAoB;YACpC,OAAO,QAAQ,CAAC,eAAe,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;SACpD;;;;;;QAED,SAAS,aAAa,CAAC,eAAoB,EAAE,QAAW;;gBAChD,WAAW,GAAG,QAAQ,CAAC,eAAe,EAAE,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC;;gBACnE,QAAQ,GAAkB,WAAW,CAAC,QAAQ;YAEpD,IAAI,QAAQ,CAAC,aAAa,EAAE;;oBACpB,MAAM,GAAqB,mBAAmB,CAAI,WAAW,EAAE;oBACnE,eAAe,iBAAA;oBACf,WAAW,aAAA;iBACZ,CAAC;gBAEF,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;aAChC;YAED,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC3B,OAAO,WAAW,CAAC;;;;;;;SAOpB;;;;;;QAED,SAAS,oBAAoB,CAAC,eAAoB,EAAE,aAA+B;;gBAC3E,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC;;gBACjC,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC;YACrC,OAAO,aAAa,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;SACjD;;;;;QAED,SAAS,eAAe,CAAC,KAA2B;YAClD,OAAO,OAAO,KAAK,KAAK,UAAU,CAAC;SACpC;QAED,OAAO;YACL,QAAQ;;;YAAR;;oBACQ,eAAe,GAAG,IAAI,CAAC,QAAQ,EAAE;gBACvC,OAAO,QAAQ,CAAC,eAAe,CAAC,CAAC;aAClC;YACD,UAAU;;;;YAAV,UAAW,GAAe;;oBAClB,eAAe,GAAG,IAAI,CAAC,QAAQ,EAAE;;oBACjC,aAAa,GAAG,WAAW,CAAI,GAAG,CAAC;gBACzC,OAAO,oBAAoB,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;aAC7D;YACD,QAAQ;;;;YAAR,UAAS,GAAyB;;oBAC1B,eAAe,GAAG,IAAI,CAAC,QAAQ,EAAE;gBACvC,OAAO,eAAe,CAAC,GAAG,CAAC;sBACvB,oBAAoB,CAAC,eAAe,EAAE,GAAG,CAAC;sBAC1C,aAAa,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;aACzC;YACD,QAAQ;;;;YAAR,UAAS,OAAoB;gBAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC/B;SACF,CAAC;KACH;;gBAnEF,UAAU;;;;gBAPF,uBAAuB;;IA2EhC,0BAAC;CApED,IAoEC;;;;;;IAlEa,uDAAyD;;;;;;;ACfvE;;;AAWA;IAAA;KAsCC;;;;;IAnCe,qCAAqB;;;;IAAnC,UAAoC,IAAY;QAC9C,OAAOD,eAAQ,CAACC,eAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;KACxC;;;;;IAEa,qCAAqB;;;;IAAnC,UAAoC,IAAmB;QACrD,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,CAACD,eAAQ,CAACC,eAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;SACvD;QAED,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;SACnD;KACF;;;;;;IAEa,sCAAsB;;;;;IAApC,UACE,KAAyB,EACzB,YAA0B;;YAEpB,IAAI,GAAkB,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;;YACnD,SAAS,sBAAW,mBAAA,IAAI,GAAE,IAAI,EAAU;;YACxC,aAAa,GAAG,YAAY,CAAC,SAAS,CAAC;QAC7C,IAAI,aAAa,IAAI,aAAa,KAAK,KAAK,EAAE;YAC5C,MAAM,IAAI,KAAK,CAACD,eAAQ,CAACC,eAAI,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;SACzF;QACD,OAAO,SAAS,CAAC;KAClB;;;;;IAEa,iCAAiB;;;;IAA/B,UAAgC,KAAyB;;YACjD,IAAI,GAAkB,gBAAgB,CAAC,KAAK,CAAC;QACnD,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,CAACD,eAAQ,CAACC,eAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;SACnD;QAED,OAAO,IAAI,CAAC;KACb;IApCa,8BAAc,GAAW,IAAI,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAqCvE,sBAAC;CAtCD,IAsCC;;;IArCC,+BAAqE;;;;;;;;;;;AC6BvE;IAIE,sBACU,SAAmB,EACnB,OAAmB,EAGnB,cAA4B,EAC5B,QAAyB,EACzB,cAA+C,EAC/C,oBAAyC,EAGzC,aAAkB;QAX5B,iBAYI;QAXM,cAAS,GAAT,SAAS,CAAU;QACnB,YAAO,GAAP,OAAO,CAAY;QAGnB,mBAAc,GAAd,cAAc,CAAc;QAC5B,aAAQ,GAAR,QAAQ,CAAiB;QACzB,mBAAc,GAAd,cAAc,CAAiC;QAC/C,yBAAoB,GAApB,oBAAoB,CAAqB;QAGzC,kBAAa,GAAb,aAAa,CAAK;QAbpB,yBAAoB,GAAwB,IAAI,CAAC;QAgBjD,YAAO,GAAkB,EAAE,CAAC;QAM5B,kBAAa,GAAiB,EAAE,CAAC;QAMjC,gBAAW,GAA0B,EAAE,CAAC;QAMhD,8BAAyB,GAAG,OAAO;;;QAAC;;gBAC5B,YAAY,GAAG,KAAI;;;;;YAEzB,SAAS,aAAa,CAAC,GAAW;;oBAC1B,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC;gBACzC,OAAO,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;aACxE;;gBAEK,OAAO,GAA2B,KAAI,CAAC,cAAc;kBACvD,KAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE;kBAC/C;oBACE,cAAc;;;;8BAAC,GAAW;;4BACpB,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC;wBAC/B,IAAI,MAAM,EAAE;4BACV,OAAO,MAAM,CAAC;yBACf;wBACD;;;;wBAAO;4BAAC,cAAO;iCAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gCAAP,yBAAO;;;4BAEb,IAAI,CAAC,MAAM,EAAE;gCACX,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;6BAC7B;4BACD,OAAO,MAAM,GAAG,MAAM,wBAAI,IAAI,KAAI,SAAS,CAAC;yBAC7C,EAAC;qBACH;oBACD,kBAAkB;;;;8BAAC,YAAoC;;4BAC/C,qBAAqB,GAAG,YAAY,CAAC,OAAO,CAAC,eAAe;wBAClE,oBACK,qBAAqB,GACpB,YAAY,IAAI,EAAE,GACtB;qBACH;iBACF;YACL,OAAO,OAAO,CAAC;SAChB,EAAC,CAAC;KArDC;IAIJ,sBAAI,gCAAM;;;;QAAV;YACE,OAAO,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;SACxE;;;OAAA;IAID,sBAAI,sCAAY;;;;QAAhB;YACE,OAAO,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;SACpF;;;OAAA;IAID,sBAAY,oCAAU;;;;;QAAtB;YACE,OAAO,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;SAChF;;;OAAA;;;;;;IAqCc,0BAAa;;;;;IAA5B,UAA6B,QAAa;;YACpC,KAAK,GAAG,EAAE;QAEd,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC3B,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;SAC1B;aAAM,IAAIH,UAAQ,CAAC,QAAQ,CAAC,EAAE;YAC7B,KAAK,gBAAQ,QAAQ,CAAE,CAAC;SACzB;aAAM,IAAI,QAAQ,KAAK,SAAS,EAAE;YACjC,KAAK,GAAG,EAAE,CAAC;SACZ;aAAM;YACL,KAAK,GAAG,QAAQ,CAAC;SAClB;QAED,OAAO,KAAK,CAAC;KACd;;;;;;IAEc,gCAAmB;;;;;IAAlC,UAAmC,YAAkC;QACnE,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;KACzD;;;;IAED,kCAAW;;;IAAX;;;;;QAKE,mBAAA,IAAI,CAAC,oBAAoB,GAAE,WAAW,EAAE,CAAC;KAC1C;;;;;;;;;IAKD,0BAAG;;;;;IAAH,UAAI,YAAkC;;QACpC,YAAY,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;QACvC,IAAA,uDAAS;QACjB,IAAI,CAAC,SAAS,CAAC,MAAM;YAAE,OAAO,EAAE,CAAC;;YAE3B,UAAU,GAAkB,UAAU,CAAC,SAAS,CAAC;;YACjD,YAAY,GAAa,eAAe,CAAC,UAAU,CAAC;;YACpD,KAAK,GAA0B,kBAAkB,CAAC,UAAU,CAAC;;YAC7D,SAAS,GAAsC,WAAW,CAAC,SAAS,CAAC;;YACrE,kBAAkB,GAAkB,EAAE;;YAE5C,KAAmB,IAAA,iBAAAI,SAAA,YAAY,CAAA,0CAAA,oEAAE;gBAA5B,IAAM,MAAI,yBAAA;;oBACP,UAAU,GAAuB,SAAS,CAAC,MAAI,CAAC;;oBAChD,IAAI,GAAW,KAAK,CAAC,MAAI,CAAC;;oBAC1B,IAAI,sBAAkB,UAAU,CAAC,QAAQ,CAAC,EAAC;gBAEjD,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;oBAEhC,QAAQ,GAAgB;oBAC5B,IAAI,QAAA;oBACJ,IAAI,MAAA;oBACJ,aAAa,EAAE,KAAK;oBACpB,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;oBACxC,QAAQ,EAAE,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC;iBACpD;;;;gBAKD,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,MAAI,EAAE,IAAI,CAAC,EAAE;oBACnD,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACnC;gBAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5B;;;;;;;;;QAED,OAAO,kBAAkB,CAAC;KAC3B;;;;;;;;;IAKD,2CAAoB;;;;;IAApB,UAAqB,YAAkC;;YAC/C,OAAO,GAAyB,YAAY,IAAI,EAAE;;YAElD,YAAY,GAAkB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;;YAC/C,QAAQ,GAAG,YAAY,CAAC,MAAM;;;;;QAClC,UAAC,MAAW,EAAE,WAAwB;YACpC,OAAA,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,QAAQ,CAAC;SAAA,GAC1D,EAAE,CACH;QACD,OAAO,EAAE,QAAQ,UAAA,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC;KAC3C;;;;;;;;IAKD,4CAAqB;;;;IAArB;QAAA,iBAgBC;QAfC,IAAI,IAAI,CAAC,oBAAoB,KAAK,IAAI;YAAE,OAAO;QAC/C,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,QAAQ;aACtC,IAAI,CACH,MAAM;;;;QAAC,UAAC,GAAkB,IAAK,OAAA,GAAG,CAAC,MAAM,qCAA4B,EAAC,EACtE,QAAQ;;;;QAAC,UAAC,EAAU;gBAAR,kBAAM;YAChB,OAAA,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,QAAQ,qBAAE,MAAM,GAAE,CAAC,IAAI,CAC7C,GAAG;;;YAAC,wCAAqB,EAAE,MAAM,QAAA,EAAE,MAAM,iCAA2B,KAAA,EAAC,EACrE,cAAc,oBAAgB,EAAE,MAAM,QAAA,EAAE,MAAM,6BAAyB,GAAC,EACxE,UAAU;;;;YAAC,UAAA,KAAK;gBACd,OAAA,EAAE,oBAAgB,EAAE,MAAM,QAAA,EAAE,MAAM,2BAAwB,KAAK,OAAA,EAAE,GAAC;aAAA,EACnE,CACF;SAAA,EACF,CACF;aACA,SAAS;;;;QAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,GAAA,EAAC,CAAC;KACpD;;;;;;;;;;IAKD,oCAAa;;;;;;IAAb,UAAc,QAAyB,EAAE,MAAW;;;YAC5C,IAAI,sBAAG,yBAAyB,CAAC,MAAM,CAAC,EAAC;;YACzC,OAAO,GAAG,EAAE;;YAElB,KAAuB,IAAA,KAAAA,SAAA,IAAI,CAAC,MAAM,CAAA,gBAAA,4BAAE;gBAA/B,IAAM,QAAQ,WAAA;;oBACX,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;gBAE1C,IAAI,WAAW,EAAE;;wBACf,KAAyB,IAAA,gBAAAA,SAAA,WAAW,CAAA,wCAAA,iEAAE;4BAAjC,IAAM,UAAU,wBAAA;;gCACb,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,QAAQ,CAAC;4BAC3E,IAAI;;oCACE,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC;gCAEnE,IAAI,MAAM,YAAY,OAAO,EAAE;oCAC7B,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;iCACvB;gCAED,IAAI,MAAM,YAAY,UAAU,EAAE;;;;;;;;;oCAShC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;oCAEzC,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,EAAE;;wCAExC,MAAM,GAAG,MAAM,CAAC,IAAI,CAClB,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,oBAAC,MAAM,GAAQ,CAAC,CAAC,CAC5D,CAAC;qCACH;iCACF;qCAAM;oCACL,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;iCACrC;gCAED,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;6BACtB;4BAAC,OAAO,CAAC,EAAE;gCACV,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC7B;yBACF;;;;;;;;;iBACF;aACF;;;;;;;;;QAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACnB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACtB;QAED,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC;KAC1B;;;;;;IAEO,qCAAc;;;;;IAAtB,UACE,YAAkC;;;YAE5B,SAAS,GAAyB,EAAE;;YACpC,SAAS,GAAiB,IAAI,CAAC,YAAY;;YAEjD,KAAyB,IAAA,iBAAAA,SAAA,YAAY,CAAA,0CAAA,oEAAE;gBAAlC,IAAM,UAAU,yBAAA;;oBACb,SAAS,GAAW,eAAe,CAAC,sBAAsB,CAAC,UAAU,EAAE,SAAS,CAAC;;oBACjF,cAAc,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC;gBAC5C,IAAI,cAAc,EAAE;oBAClB,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC3B,SAAS,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;iBACnC;aACF;;;;;;;;;QAED,OAAO,EAAE,SAAS,WAAA,EAAE,CAAC;KACtB;;;;;;;IAEO,2CAAoB;;;;;;IAA5B,UAA6B,IAAmB,EAAE,IAAY;QAC5D,IAAI,CAAC,UAAU,oBAAC,IAAI,CAAC,IAAI,GAAE,GAAG,IAAI,CAAC;;;;QAInC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;;;;;;;;;;;;;;;;;IASO,oDAA6B;;;;;;;;;IAArC,UAAsC,IAAY,EAAE,IAAY;;YACxD,iCAAiC,GACrC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,SAAS;QAClD,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,iCAAiC,CAAC;KACrE;;gBA/QF,UAAU;;;;gBAzCU,QAAQ;gBAYV,UAAU;gBAsCD,YAAY,uBAFnC,QAAQ,YACR,QAAQ;gBAlByB,eAAe;gBAC5C,+BAA+B;gBAC/B,mBAAmB;gDAqBvB,QAAQ,YACR,MAAM,SAAC,mBAAmB;;IAkQ/B,mBAAC;CAhRD,IAgRC;;;;;;IA9QC,4CAAyD;;;;;IAgBzD,+BAAoC;;;;;IAMpC,qCAAyC;;;;;IAMzC,mCAAgD;;IAMhD,iDAiCG;;;;;IAhED,iCAA2B;;;;;IAC3B,+BAA2B;;;;;IAC3B,sCAEoC;;;;;IACpC,gCAAiC;;;;;IACjC,sCAAuD;;;;;IACvD,4CAAiD;;;;;IACjD,qCAE0B;;;;;;;;IC7C5B,+BACU,uBAAgD,EAChD,mBAAwC,EACxC,YAA8B;QAF9B,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,iBAAY,GAAZ,YAAY,CAAkB;KACpC;;;;;;;IAEJ,6CAAa;;;;;;IAAb,UAAiB,MAAS,EAAE,OAAsC;QAAlE,iBAWC;QAVC,IAAI,CAAC,uBAAuB;aACzB,sBAAsB,EAAE;aACxB,QAAQ,CAAC,MAAM,CAAC;aAChB,IAAI,CACH,MAAM;;;QAAC,cAAM,OAAA,CAAC,CAAC,OAAO,GAAA,EAAC,EACvB,GAAG;;;QAAC,cAAM,OAAA,KAAI,CAAC,UAAU,CAAC,mBAAA,OAAO,GAAE,MAAM,CAAC,GAAA,EAAC,EAC3C,QAAQ;;;QAAC,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,gBAAgB,GAAA,EAAC,EAClD,MAAM;;;;QAAC,UAAA,eAAe,IAAI,OAAA,CAAC,CAAC,eAAe,GAAA,EAAC,CAC7C;aACA,SAAS;;;QAAC,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,mBAAA,OAAO,GAAE,MAAM,CAAC,GAAA,EAAC,CAAC;KAC3D;;;;;;;;;IAKD,0CAAU;;;;;IAAV,UAAW,YAA2B;;;YACpC,KAA0B,IAAA,iBAAAA,SAAA,YAAY,CAAA,0CAAA,oEAAE;gBAAnC,IAAM,WAAW,yBAAA;;oBACd,QAAQ,GAAkB,WAAW,CAAC,QAAQ;gBAEpD,IAAI,QAAQ,CAAC,aAAa,EAAE;;wBACpB,eAAe,GAAgB,EAAE;;wBACjC,WAAW,GAAgB,IAAI,CAAC,uBAAuB;yBAC1D,sBAAsB,EAAE;yBACxB,QAAQ,EAAE;;wBAEP,eAAe,GAAqB,mBAAmB,CAAC,WAAW,EAAE;wBACzE,eAAe,iBAAA;wBACf,WAAW,aAAA;qBACZ,CAAC;oBAEF,QAAQ,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;iBACzC;gBAED,IAAI,QAAQ,CAAC,UAAU,EAAE;oBACvB,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;iBACxD;gBAED,WAAW,CAAC,aAAa,GAAG,IAAI,CAAC;aAClC;;;;;;;;;KACF;;;;;;;;;IAKD,+CAAe;;;;;IAAf,UAAgB,YAA2B;;;YACzC,KAA0B,IAAA,iBAAAA,SAAA,YAAY,CAAA,0CAAA,oEAAE;gBAAnC,IAAM,WAAW,yBAAA;;oBACd,QAAQ,GAAkB,WAAW,CAAC,QAAQ;gBACpD,IAAI,QAAQ,CAAC,kBAAkB,EAAE;oBAC/B,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;iBAChE;aACF;;;;;;;;;KACF;;;;;;IAEO,+CAAe;;;;;IAAvB,UAAwB,WAAwB;QAC9C,OAAO,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;KACjE;;gBAhEF,UAAU;;;;gBAJF,uBAAuB;gBADvB,mBAAmB;gBAHnB,gBAAgB;;IAyEzB,4BAAC;CAjED,IAiEC;;;;;;IA9DG,wDAAwD;;;;;IACxD,oDAAgD;;;;;IAChD,6CAAsC;;;;;;;;ICDpC,yBAAyB,GAAG,4BAA4B;;AAE9D,IAAa,2BAA2B,GAAG;IACzC,UAAU;;;;IAAE,UAAC,MAAW;QACtB,OAAO,CAAC,MAAM,IAAI,oBAAM,MAAM,IAAE,yBAAyB,CAAC,KAAK,EAAE,CAAC;KACnE,CAAA;IACD,aAAa;;;;;IAAE,UAAC,MAAW,EAAE,OAA8B;QACzD,IAAI,CAAC,MAAM;YAAE,OAAO;QACpB,oBAAM,MAAM,IAAE,yBAAyB,CAAC,GAAG,OAAO,CAAC;KACpD,CAAA;CACF;;;;AAED,+BAIC;;;IAHC,0CAAoB;;IACpB,wCAAqB;;IACrB,8CAAiD;;;;;AAGnD,kCAGC;;;IAFC,8CAAuC;;IACvC,wDAAiD;;;;;;;;;;AASnD,SAAgB,cAAc,CAC5B,SAA4B,EAC5B,UAAa,EACb,gBAAmC;;QAE7B,cAAc,GAAG,gBAAgB,IAAI,gBAAgB,CAAC,cAAc;;QACpE,SAAS;;;;IAAG,SAAS,iBAAiB;QAAC,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;;YACnD,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC;QAC1D,IAAI,WAAW,YAAY,QAAQ,EAAE;;gBAC7B,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,WAAW,CAAC,CAAC;YAC1D,OAAO,eAAe,CAAC;SACxB;QACD,OAAO,WAAW,CAAC;KACpB,GAAK;;QACA,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;IACrC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;;QAExC,gBAAgB,GAAG,qBAAqB,CAAI,UAAU,EAAE,gBAAgB,CAAC;;QAEzE,gBAAgB;;;;IAAoB,UAAC,OAA+B;QAClE,IAAA,iEAIL,EAJO,wDAAyB,EAAE,oCAIlC;QAED;;;;QAAO,SAAS,cAAc,CAAC,SAAc;;;gBAErC,OAAO,GAAG,yBAAyB,CAAC,GAAG;;;;YAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,SAAS,CAAC,GAAA,EAAC;;;;YAKxE,IAAI;gBACF,OAAO,UAAU,wBAAI,OAAO,GAAE;aAC/B;YAAC,OAAO,EAAE,EAAE;gBACX,IAAI,EAAE,YAAY,SAAS,IAAI,eAAe,CAAC,cAAc,EAAE;oBAC7D,OAAO,SAAS,CAAC;iBAClB;gBAED,MAAM,EAAE,CAAC;aACV;SACF,EAAC;KACH,CAAA;IAED,gBAAgB,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAErD,OAAO,UAAU,CAAC;CACnB;;;;;;;AAED,SAAS,qBAAqB,CAC5B,UAAa,EACb,gBAA8C;;QAExC,gBAAgB,GAAG,sBAAsB,CAAC,UAAU,CAAC;IAC3D,gBAAgB,CAAC,UAAU,GAAG,UAAU,CAAC;;QACrC,0BAA0B;;;IAAG,cAAM,QAAC,EAAE,IAAC,CAAA;IAC3C,IAAI,gBAAgB,EAAE;QACpB,gBAAgB,CAAC,cAAc,GAAG,gBAAgB,CAAC,cAAc,CAAC;QAClE,gBAAgB,CAAC,YAAY,GAAG,gBAAgB,CAAC,YAAY,CAAC;QAC9D,0BAA0B;YACxB,gBAAgB,CAAC,kBAAkB,IAAI,0BAA0B,CAAC;KACrE;;QACK,qBAAqB,gBAAQ,gBAAgB,CAAE;IACrD,gBAAgB,CAAC,kBAAkB;;;IAAG;QACpC,OAAA,uBAAuB,CAAC,qBAAqB,EAAE,0BAA0B,EAAE,CAAC;KAAA,CAAA,CAAC;IAC/E,OAAO,gBAAgB,CAAC;CACzB;;;;;;;AAED,SAAS,sBAAsB,CAC7B,OAA+B,EAC/B,gBAAuC,EACvC,SAAiC;IAAjC,0BAAA,EAAA,cAAiC;;QAE3B,oBAAoB,GAAG,gBAAgB,CAAC,kBAAkB,EAAE;;QAC5D,eAAe,GAAG,OAAO,CAAC,kBAAkB,CAAC,oBAAoB,CAAC;;QAClE,gBAAgB,GAAG,mBAAmB,CAC1C,SAAS,EACT,eAAe,EACf,gBAAgB,CAAC,cAAc,CAChC;;QAEK,yBAAyB,GAAG,gBAAgB,CAAC,GAAG;;;;IAAC,UAAA,QAAQ;;YACvD,OAAO,GAAG,sBAAsB,CAAC,QAAQ,CAAC;QAChD,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;KACzB,EAAC;IACF,OAAO;QACL,eAAe,iBAAA;QACf,yBAAyB,2BAAA;KAC1B,CAAC;CACH;;;;;;AAED,SAAS,uBAAuB,CAC9B,gBAAuC,EACvC,eAAsC;IAEtC,qBACM,2BAA2B,CAAC,UAAU,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,EAAE,IAC7E,2BAA2B,CAAC,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,EAAE,IACzE,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,EAAE,GAC5C,eAAe,EAClB;CACH;;;;;;;AAED,SAAS,mBAAmB,CAC1B,SAAiC,EACjC,eAAsC,EACtC,cAAmB;IAFnB,0BAAA,EAAA,cAAiC;;QAI3B,gBAAgB,GAAG,EAAE;;QACrB,uBAAuB,GAC3B,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,eAAe,CAAC,oBAAoB;IAChE,IAAI,cAAc,IAAI,uBAAuB,EAAE;;;YAEvC,QAAQ,GAAG,gBAAgB,CAAC,cAAc,CAAC;QACjD,IAAI,QAAQ,EAAE;YACZ,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACvC;KACF;IACD,IAAI,SAAS,EAAE;QACb,gBAAgB,CAAC,IAAI,OAArB,gBAAgB,WAAS,SAAS,GAAE;KACrC;IACD,OAAO,gBAAgB,CAAC;CACzB;;;;;;;AAMD,SAAgB,sBAAsB,CAAC,QAAa;;QAC5C,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,IAAI,gBAAgB,CAAC,QAAQ,CAAC;IAC5E,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,gBAAgB;;;IAAM,cAAM,OAAA,QAAQ,GAAA,EAAC,CAAC;CACpE;;;;;;;IC7JC,eACU,YAAyB,EACzB,wBAAiD,EACjD,OAAmB,EACnB,0BAAyD,EACzD,aAA2B,EAGnC,iBAAsB;QAPd,iBAAY,GAAZ,YAAY,CAAa;QACzB,6BAAwB,GAAxB,wBAAwB,CAAyB;QACjD,YAAO,GAAP,OAAO,CAAY;QACnB,+BAA0B,GAA1B,0BAA0B,CAA+B;QACzD,kBAAa,GAAb,aAAa,CAAc;QAKnC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;KACzC;;;;;;;;;IAKD,wBAAQ;;;;;IAAR,UAAS,eAA4B;QACnC,OAAO,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;KACzF;;;;;IAQD,sBAAM;;;;IAAN,UAAO,QAAa;QAApB,iBAkBC;;YAjBO,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC;QACzD,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAC3B,GAAG,CAAC,UAAU,CAAC,EACf,UAAU;;;;QAAC,UAAC,GAAU;;YAEZ,IAAA,6DAAc;YAEtB,IAAI,GAAG,YAAY,SAAS,IAAI,cAAc,EAAE;gBAC9C,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;aACtB;;YAGD,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;SACxB,EAAC,EACF,oBAAoB,EAAE,EACtB,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAC3C,CAAC;KACH;;;;;IASD,0BAAU;;;;IAAV,UAAW,QAAa;QACtB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KAC5C;;;;;IAQD,8BAAc;;;;IAAd,UAAe,QAAa;;YACpB,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC;QACzD,OAAO,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;KACjD;;;;;;;;;IAKD,yBAAS;;;;;IAAT,UAAU,EAAyB;QACjC,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;KACzF;;;;;;;;IAKD,wBAAQ;;;;IAAR;QACE,OAAO,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,EAAE,CAAC,QAAQ,EAAE,CAAC;KAC1E;;;;;;;;;;;IAMD,qBAAK;;;;;;IAAL,UAAM,KAAU;QACd,OAAO,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KAC/E;;;;;;IAEO,uCAAuB;;;;;IAA/B,UAAgC,QAAa;;YACrC,cAAc,GAAG,sBAAsB,CAAC,QAAQ,CAAC;;YACjD,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,yBAAyB,EAAE;QACrE,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC;KACvC;;;;;;IAEO,+BAAe;;;;;IAAvB,UAAwB,iBAAsB;;YACtC,KAAK,GAAgB,IAAI,CAAC,YAAY,CAAC,KAAK;;YAC5C,YAAY,GAAY,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC;QACvE,IAAI,YAAY,EAAE;;gBACV,oBAAoB,GAAY,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC;;gBAClF,WAAW,GAAgB,oBAAoB;+BAC5C,IAAI,CAAC,OAAO,CAAC,aAAa,EAAK,iBAAiB,IACrD,iBAAiB;YAErB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACrC;KACF;;gBA7GF,UAAU;;;;gBANF,WAAW;gBAFX,uBAAuB;gBAIvB,UAAU;gBALV,6BAA6B;gBAO7B,YAAY;gDAUhB,QAAQ,YACR,MAAM,SAAC,mBAAmB;;IAqG/B,YAAC;CA9GD,IA8GC;;;;;;IA3GG,6BAAiC;;;;;IACjC,yCAAyD;;;;;IACzD,wBAA2B;;;;;IAC3B,2CAAiE;;;;;IACjE,8BAAmC;;;;;;;ACtBvC;;;;;AAUA;IAKE,uBAAY,KAAY,EAAE,MAAkB;QAC1C,aAAa,CAAC,KAAK,GAAG,KAAK,CAAC;QAC5B,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;KAC/B;;;;IAED,mCAAW;;;IAAX;QACE,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC;QAC3B,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC;KAC7B;IAXa,mBAAK,GAAiB,IAAI,CAAC;IAC3B,oBAAM,GAAsB,IAAI,CAAC;;gBAHhD,UAAU;;;;gBARF,KAAK;gBACL,UAAU;;IAqBnB,oBAAC;CAdD,IAcC;;;IAZC,oBAAyC;;IACzC,qBAA+C;;;;;;;;;;ACRjD;;;;IAAA;KAKC;IAJC,sBAAW,iBAAI;;;;QAAf;;YAEE,OAAO,QAAQ,CAAC;SACjB;;;OAAA;IACH,gBAAC;CAAA,IAAA;;;;AAKD;;;;IAME,qBAAmB,WAAyB;QAAzB,gBAAW,GAAX,WAAW,CAAc;KAAI;IALhD,sBAAW,mBAAI;;;;QAAf;;YAEE,OAAO,gBAAgB,CAAC;SACzB;;;OAAA;IAGH,kBAAC;CAAA,IAAA;;;IADa,kCAAgC;;;;;;;ACrB9C;AAGA,IAAa,oBAAoB,GAAG,IAAI,aAAa,CAAU,CAAC,CAAC;;;;;;;;;;;;;AAajE,SAAgB,sBAAsB;IACpC,IAAI;;;;YAGI,EAAE,GAAG,oBAAC,MAAM,IAAS,EAAE;;YACvB,kBAAkB,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,UAAU;;YAClD,oBAAoB,GAAG,CAAC,kBAAkB,IAAI,SAAS,EAAE;QAC/D,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;KACjD;IAAC,WAAM;QACN,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClC;YAAS;QACR,oBAAoB,CAAC,QAAQ,EAAE,CAAC;KACjC;CACF;;;;;;AC7BD;;;;AAgBA;IAEE,wBACE,OAAqB,EACrB,uBAAgD,EAChD,MAAa,EACb,OAAsB,EAGtB,MAAiC,EACjC,qBAA4C;QAH5C,uBAAA,EAAA,WAEiC;;QAIjC,sBAAsB,EAAE,CAAC;;;YAGnB,OAAO,GAAsB,OAAO,CAAC,oBAAoB,CAAC,MAAM,CAAC;QAEvE,uBAAuB,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;;QAG7D,OAAO,CAAC,qBAAqB,EAAE,CAAC;;QAGhC,qBAAqB,CAAC,aAAa,CAAC,IAAI,SAAS,EAAE,EAAE,OAAO,CAAC,CAAC;KAC/D;;gBAzBF,QAAQ;;;;gBAdA,YAAY;gBACZ,uBAAuB;gBACvB,KAAK;gBACL,aAAa;4CAkBjB,QAAQ,YACR,MAAM,SAAC,gBAAgB;gBAhBnB,qBAAqB;;IAkC9B,qBAAC;CA1BD;;;;;;AChBA;;;;AAcA;IAEE,2BACE,MAAa,EACb,uBAAgD,EAChD,OAAqB,EAGrB,MAAmC,EACnC,qBAA4C;QAH5C,uBAAA,EAAA,WAEmC;;;;YAK7B,eAAe,GAAyB,iBAAiB,CAAC,aAAa,CAAC,MAAM,CAAC;;;YAG/E,OAAO,GAAsB,OAAO,CAAC,oBAAoB,CAAC,eAAe,CAAC;QAEhF,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE;YACzB,uBAAuB,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;;YAG7D,qBAAqB,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;SACjF;KACF;;;;;;IAEc,+BAAa;;;;;IAA5B,UAA6B,MAAmC;QAAnC,uBAAA,EAAA,WAAmC;QAC9D,OAAO,MAAM,CAAC,MAAM;;;;;QAClB,UAAC,KAA2B,EAAE,MAA4B,IAAK,OAAA,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAA,GACnF,EAAE,CACH,CAAC;KACH;;gBA/BF,QAAQ;;;;gBAZA,KAAK;gBACL,uBAAuB;gBACvB,YAAY;4CAgBhB,QAAQ,YACR,MAAM,SAAC,mBAAmB;gBAftB,qBAAqB;;IAwC9B,wBAAC;CAhCD;;;;;;;;;ACkCA;IAAA;KAqHC;;;;;;;;;;IA9Ge,kBAAO;;;;;;IAArB,UACE,MAAyB,EACzB,OAA+B;QAD/B,uBAAA,EAAA,WAAyB;QACzB,wBAAA,EAAA,YAA+B;QAE/B,OAAO;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS;gBACP,YAAY;gBACZ,mBAAmB;gBACnB,OAAO;gBACP,eAAe;gBACf,gBAAgB;gBAChB,eAAe;gBACf,eAAe;gBACf,qBAAqB;gBACrB,kBAAkB;gBAClB,+BAA+B;gBAC/B,uBAAuB;gBACvB,6BAA6B;gBAC7B,KAAK;gBACL,WAAW;gBACX,aAAa;gBACb,aAAa;eACV,MAAM,EACN,UAAU,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC,CAClD;SACF,CAAC;KACH;;;;;;;;;IAKa,qBAAU;;;;;IAAxB,UAAyB,MAAyB;QAAzB,uBAAA,EAAA,WAAyB;QAChD,OAAO;YACL,QAAQ,EAAE,iBAAiB;YAC3B,SAAS;gBACP,YAAY;gBACZ,aAAa;eACV,MAAM;gBACT;oBACE,OAAO,EAAE,mBAAmB;oBAC5B,KAAK,EAAE,IAAI;oBACX,QAAQ,EAAE,MAAM;iBACjB;cACF;SACF,CAAC;KACH;;;;;;;IAEc,6BAAkB;;;;;;IAAjC,UACE,MAAoB,EACpB,OAA0B;QAE1B,OAAO;YACL;gBACE,OAAO,EAAE,YAAY;gBACrB,QAAQ,EAAE,mBAAmB;aAC9B;YACD;gBACE,OAAO,EAAE,WAAW;gBACpB,QAAQ,EAAE,SAAS;aACpB;YACD;gBACE,OAAO,EAAE,uBAAuB;gBAChC,QAAQ,EAAE,OAAO,CAAC,iBAAiB,IAAI,wCAAwC;aAChF;YACD;gBACE,OAAO,EAAE,gBAAgB;gBACzB,QAAQ,EAAE,MAAM;aACjB;YACD;gBACE,OAAO,EAAE,UAAU,CAAC,YAAY;gBAChC,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,OAAO,EAAE,UAAU;gBACnB,UAAU,EAAE,UAAU,CAAC,iBAAiB;gBACxC,IAAI,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC;aAChC;YACD;gBACE,OAAO,EAAE,sBAAsB;gBAC/B,UAAU,EAAE,UAAU,CAAC,2BAA2B;gBAClD,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,CAAC,gBAAgB,CAAC;aACzB;YACD;gBACE,OAAO,EAAE,mBAAmB;gBAC5B,UAAU,EAAE,UAAU,CAAC,eAAe;aACvC;YACD;gBACE,OAAO,EAAE,0BAA0B;gBACnC,WAAW,EAAE,mBAAmB;aACjC;YACD;gBACE,OAAO,EAAE,kBAAkB;gBAC3B,WAAW,EAAE,YAAY;aAC1B;SACF,CAAC;KACH;;;;;;IAEc,4BAAiB;;;;;IAAhC,UAAiC,OAA0B;QACzD,OAAO,SAAS,CAAC,IAAI,UAAU,EAAE,EAAE,OAAO,CAAC,CAAC;KAC7C;;;;;;IAEc,sCAA2B;;;;;IAA1C,UAA2C,YAA8B;QACvE;;;QAAO,cAAM,OAAA,YAAY,CAAC,SAAS,EAAE,GAAA,EAAC;KACvC;;;;;IAEc,0BAAe;;;;IAA9B;QACE,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC;KAC3B;IAlHuB,uBAAY,GAAG,IAAI,cAAc,CAAoB,cAAc,CAAC,CAAC;;gBAF9F,QAAQ;;IAqHT,iBAAC;CArHD,IAqHC;;;;;;IAnHC,wBAA6F;;;;;;;;;;;;;AC3C/F,SAAgB,MAAM,CACpB,OAAkC,EAClC,OAAuB;IAEvB;;;;;IAAO,UAAC,MAAW,EAAE,IAAqB;;;YAClC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC;QAEzD,IAAI,cAAc,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;SACtE;;YAEK,IAAI,GAAG,mBAAmB,CAAC,MAAM,CAAC,WAAW,CAAC;QAEpD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;SACrB;;YAED,KAAqB,IAAA,YAAAA,SAAA,OAAO,CAAA,gCAAA,qDAAE;gBAAzB,IAAM,MAAM,oBAAA;;oBACT,IAAI,GAAG,MAAM,CAAC,IAAI;gBAExB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;iBACzB;gBAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;oBACtB,EAAE,EAAE,IAAI;oBACR,OAAO,EAAE,OAAO,IAAI,EAAE;oBACtB,IAAI,MAAA;iBACL,CAAC,CAAC;aACJ;;;;;;;;;KACF,EAAC;CACH;;;;;;ACtCD;;;;;;;AAQA,SAAgB,4BAA4B,CAAC,MAAW;;;;;IAKtD,oBAAoB,CAAC,SAAS;;;;IAAC,UAAA,oBAAoB;QACjD,IAAI,oBAAoB,EAAE;;+BACH;YACrB,IAAI,CAAC,eAAe,EAAE;;gBAEpB,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,wBAAwB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;aACtF;SACF;KACF,EAAC,CAAC;CACJ;;;;;;;;;;ACfD,gCAIC;;;IAHC,iCAAoB;;IACpB,gDAAwC;;IACxC,mDAAwC;;;;;;;;AAM1C,SAAgB,KAAK,CAAI,OAAwB;;;;;IAC/C,SAAS,eAAe,CAAC,mBAAuC;;YACxD,kBAAkB,GACtB,mBAAmB,CAAC,gBAAgB,CAAC,IAAI,EAAE;QAC7C,uCAAY,kBAAkB,EAAK,OAAO,IAAsB;KACjE;;;;;IAED,SAAS,cAAc,CAAC,MAA4B;QAC1C,IAAA,kBAAI,EAAE,gDAAmB,EAAE,sDAAsB;QACjD,IAAA,0CAAQ,EAAE,0CAAQ,EAAE,kCAAI;;YAC1B,SAAS,GACb,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI;QACpE,eAAe,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;QAEjD,IAAI,mBAAmB,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;;gBAC1C,aAAa,GAA2B,mBAAmB,CAAC,QAAQ,CAAC,IAAI,EAAE;YACjF,IAAI,CAAC,OAAO,gBAAQ,IAAI,CAAC,OAAO,EAAK,aAAa,CAAC,OAAO,CAAE,CAAC;SAC9D;QAED,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;KACvB;IAED;;;;IAAO,UAAC,MAAkB;QACxB,4BAA4B,CAAC,MAAM,CAAC,CAAC;;YAC/B,UAAU,GAAuB,MAAM;;YACvC,IAAI,GAAkB,mBAAmB,CAAC,UAAU,CAAC;;YACrD,mBAAmB,GAAuB,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC;;YAC3E,sBAAsB,GAAoB,eAAe,CAAC,mBAAmB,CAAC;QACpF,cAAc,CAAC,EAAE,IAAI,MAAA,EAAE,mBAAmB,qBAAA,EAAE,sBAAsB,wBAAA,EAAE,CAAC,CAAC;QACtE,UAAU,CAAC,gBAAgB,CAAC,GAAG,sBAAsB,CAAC;KACvD,EAAC;CACH;;;;;;;ICzCK,gBAAgB,GAAG,EAAE;;;;;;AAE3B,SAAgB,sBAAsB,CAAU,QAAa;IAC3D,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,4BAA4B,CAAC,EAAE,CAAC,CAAC;KAClF;IAED,OAAO,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;CAC7C;;;;;;;AAED,SAAgB,gBAAgB,CAAC,IAAY,EAAE,WAAiB,EAAE,KAAoB;IAApB,sBAAA,EAAA,UAAoB;IACpF,WAAW,GAAG,CAAC,WAAW,GAAG,oBAAoB,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC;IAEtE,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;;YAC7B,UAAU,GAAa,KAAK,CAAC,MAAM;wBACpC,WAAW,GAAK,KAAK,IACtB,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;QAC1B,OAAO,UAAU,CAAC,UAAU,qBAAE,aAAa,CAAC,MAAM,GAAE,CAAC;KACtD;IAED,OAAO,WAAW,CAAC;CACpB;;;;;;AAKD,SAAgB,oBAAoB,CAAC,IAAY;;QACzC,aAAa,GAAW,IAAI,CAAC,MAAM,GAAG,CAAC;;QACvC,cAAc,GAAY,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,gBAAgB;IACnF,OAAO,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,GAAG,IAAI,CAAC;CAC7D;;;;;;ACtCD;;;;;;;AAKA,SAAgB,MAAM,CAAI,WAAe;IAAE,eAAkB;SAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;QAAlB,8BAAkB;;IAC3D;;;;;IAAO,UAAS,MAAM,EAAE,GAAG;;;YACnB,IAAI,GAAW,GAAG,CAAC,QAAQ,EAAE;;YAC7B,UAAU,GAAG,OAAK,IAAI,eAAY;;YAClC,QAAQ,GAAG,gBAAgB,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,CAAC;QAE3D,MAAM,CAAC,gBAAgB,CAAC,MAAM;YAC5B,GAAC,UAAU,IAAG;gBACZ,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;aACnB;YACD,GAAC,IAAI,IAAG;gBACN,UAAU,EAAE,IAAI;gBAChB,YAAY,EAAE,IAAI;gBAClB,GAAG;;;gBAAH;oBACE,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,GAAG,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAClF;aACF;gBACD,CAAC;KACJ,EAAC;CACH;;;;;;ACzBD;;;;;AAKA,SAAgB,eAAe,CAAC,OAA8B;IAC5D;;;;;;;IACE,SAAS,QAAQ,CACf,MAAW,EACX,UAAkB,EAClB,UAAsC;QAEtC,IAAI,UAAU,EAAE;;;gBAER,UAAU,GAAG,UAAU,CAAC,KAAK,IAAI,oBAAM,UAAU,IAAE,UAAU;YACnE,IAAI,UAAU,EAAE;gBACd,2BAA2B,CAAC,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;aAChE;SACF;aAAM;;YAEL,2BAA2B,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SAC5D;KACF,KACD;CACH;;;;;;ACzBD;;;AAWA,8BAQC;;;IAPCC,+BAAoB;;IACpBA,kCAAgD;;IAChDA,mCAAc;;IACdA,+BAAoB;;IAGpBA,mCAAgC;;;;;AAGlC,sCAOC;;;IAJCC,6CAA4B;;IAC5BA,iDAAoB;;IACpBA,+CAA4B;;IAC5BA,qDAAgD;;;;;;AAGlD,SAAgBC,qBAAmB,CAAC,MAAoC;IACtE,OAAOC,mBAA2B,CAAC,MAAM,CAAC,CAAC;CAC5C;;;;;AAED,SAAgBC,kBAAgB,CAAC,MAAoC;IACnE,OAAOC,gBAAwB,CAAC,MAAM,CAAC,CAAC;CACzC;;;;;AAED,SAAgBC,wBAAsB,CAAC,MAAgB;IACrD,OAAOC,sBAA8B,CAAC,MAAM,CAAC,CAAC;CAC/C;;;;;AAED,SAAgBC,qBAAmB,CAAC,MAAW;IAC7C,OAAOC,mBAA2B,CAAC,MAAM,CAAC,CAAC;CAC5C;;;;;;AC5CD;;;;;;AAOA,SAAgB,QAAQ,CAAI,SAAe;IACzC;;;;;;;IAAO,UACL,MAAW,EACX,GAAoB,EACpB,UAAuD;;YAEjD,WAAW,GAAG,EAAE,UAAU,IAAI,UAAU,CAAC,KAAK,KAAK,IAAI,CAAC;QAE9D,IAAI,WAAW,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;SACxE;;YAEK,UAAU,GAAG,UAAU,CAAC,KAAK;;YAC7B,UAAU,GAAG,cAAc,CAAC,SAAS,qBAAE,UAAU,IAAS;YAC9D,cAAc,EAAE,MAAM;YACtB,YAAY,EAAE,GAAG,CAAC,QAAQ,EAAE;YAC5B,kBAAkB;;;;gBAChB,OAAO,EAAE,CAAC;aACX;SACF,CAAC;;YACI,aAAa,GAAG;YACpB,YAAY,EAAE,IAAI;YAClB,GAAG;;;;gBACD,OAAO,UAAU,CAAC;aACnB;SACF;;QAED,oBAAM,aAAa,IAAE,YAAY,CAAC,GAAG,UAAU,CAAC;QAChD,OAAO,aAAa,CAAC;KACtB,EAAC;CACH;;;;;;ACrCD;IAIA;KASC;;;;;;IAPC,yCAAK;;;;;IAAL,UAAS,IAAa;QACpB,OAAO,IAAI,EAAE,CAAC;KACf;;;;;;IAED,yCAAK;;;;;IAAL,UAAS,IAAa;QACpB,OAAO,IAAI,EAAE,CAAC;KACf;;gBARF,UAAU;;IASX,gCAAC;CATD;;;;;;ACHA;;;AAMA;;;;IACE,oBAA6B,IAAkB;QAA/C,iBAOC;QAP4B,SAAI,GAAJ,IAAI,CAAc;;YACvC,gBAAgB,GAAG,sBAAsB,oBAAM,IAAI,GAAC;QAC1D,gBAAgB,CAAC,gBAAgB;;;;QAAG,UAClC,cAAsC;YAEtC,OAAO,cAAc,CAAC,cAAc,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;SACjD,CAAA,CAAC;KACH;;;;IAED,4BAAO;;;IAAP;QACE,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;;;;IAED,6BAAQ;;;IAAR;QACE,OAAO,gBAAc,IAAI,CAAC,IAAI,MAAG,CAAC;KACnC;IACH,iBAAC;CAAA,IAAA;;;;;;IAhBa,0BAAmC;;;;;;;;;;;;;;;;;;;;;;;;;"}