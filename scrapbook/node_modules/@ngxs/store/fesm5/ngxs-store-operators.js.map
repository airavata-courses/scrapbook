{"version":3,"file":"ngxs-store-operators.js","sources":["ng://@ngxs/store/operators/append.ts","ng://@ngxs/store/operators/compose.ts","ng://@ngxs/store/operators/utils.ts","ng://@ngxs/store/operators/iif.ts","ng://@ngxs/store/operators/insert-item.ts","ng://@ngxs/store/operators/patch.ts","ng://@ngxs/store/operators/update-item.ts","ng://@ngxs/store/operators/remove-item.ts"],"sourcesContent":["import { StateOperator } from '@ngxs/store';\r\nimport { RepairType } from './utils';\r\n\r\n/**\r\n * @param items - Specific items to append to the end of an array\r\n */\r\nexport function append<T>(items: T[]): StateOperator<RepairType<T>[]> {\r\n  return function appendOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\r\n    // If `items` is `undefined` or `null` or `[]` but `existing` is provided\r\n    // just return `existing`\r\n    const itemsNotProvidedButExistingIs = (!items || !items.length) && existing;\r\n    if (itemsNotProvidedButExistingIs) {\r\n      return existing as RepairType<T>[];\r\n    }\r\n\r\n    if (Array.isArray(existing)) {\r\n      return existing.concat(items as RepairType<T>[]);\r\n    }\r\n\r\n    // For example if some property is added dynamically\r\n    // and didn't exist before thus it's not `ArrayLike`\r\n    return items as RepairType<T>[];\r\n  };\r\n}\r\n","import { StateOperator } from '@ngxs/store';\r\n\r\nexport function compose<T>(...operators: StateOperator<T>[]): StateOperator<T> {\r\n  return function composeOperator(existing: Readonly<T>): T {\r\n    return operators.reduce((accumulator, operator) => operator(accumulator), existing);\r\n  };\r\n}\r\n","import { StateOperator } from '@ngxs/store';\r\n\r\nimport { Predicate } from './internals';\r\n\r\nexport function isStateOperator<T>(value: T | StateOperator<T>): value is StateOperator<T> {\r\n  return typeof value === 'function';\r\n}\r\n\r\nexport function isUndefined(value: any): value is undefined {\r\n  return typeof value === 'undefined';\r\n}\r\n\r\nexport function isPredicate<T>(value: Predicate<T> | boolean | number): value is Predicate<T> {\r\n  return typeof value === 'function';\r\n}\r\n\r\nexport function isNumber(value: any): value is number {\r\n  return typeof value === 'number';\r\n}\r\n\r\nexport function invalidIndex(index: number): boolean {\r\n  return Number.isNaN(index) || index === -1;\r\n}\r\n\r\nexport function isNil<T>(value: T | null | undefined): value is null | undefined {\r\n  return value === null || isUndefined(value);\r\n}\r\n\r\nexport type RepairType<T> = T extends true ? boolean : (T extends false ? boolean : T);\r\n","import { StateOperator } from '@ngxs/store';\r\n\r\nimport { isStateOperator, isUndefined, isPredicate, RepairType } from './utils';\r\nimport { Predicate } from './internals';\r\n\r\nfunction retrieveValue<T>(\r\n  operatorOrValue: StateOperator<T> | T,\r\n  existing?: Readonly<RepairType<T>>\r\n): RepairType<T> {\r\n  // If state operator is a function\r\n  // then call it with an original value\r\n  if (isStateOperator(operatorOrValue)) {\r\n    const value = operatorOrValue(existing! as Readonly<T>);\r\n    return value as RepairType<T>;\r\n  }\r\n\r\n  // If operator or value was not provided\r\n  // e.g. `elseOperatorOrValue` is `undefined`\r\n  // then we just return an original value\r\n  if (isUndefined(operatorOrValue)) {\r\n    return (<any>existing)! as RepairType<T>;\r\n  }\r\n\r\n  return operatorOrValue as RepairType<T>;\r\n}\r\n\r\n/**\r\n * @param condition - Condition can be a plain boolean value or a function,\r\n * that returns boolean, also this function can take a value as an argument\r\n * to which this state operator applies\r\n * @param trueOperatorOrValue - Any value or a state operator\r\n * @param elseOperatorOrValue - Any value or a state operator\r\n */\r\nexport function iif<T>(\r\n  condition: Predicate<T> | boolean,\r\n  trueOperatorOrValue: StateOperator<T> | T,\r\n  elseOperatorOrValue?: StateOperator<T> | T\r\n): StateOperator<RepairType<T>> {\r\n  return function iifOperator(existing: Readonly<RepairType<T>>): RepairType<T> {\r\n    // Convert the value to a boolean\r\n    let result = !!condition;\r\n    // but if it is a function then run it to get the result\r\n    if (isPredicate(condition)) {\r\n      result = condition(existing);\r\n    }\r\n\r\n    if (result) {\r\n      return retrieveValue<T>(trueOperatorOrValue, existing as RepairType<T>);\r\n    }\r\n\r\n    return retrieveValue<T>(elseOperatorOrValue!, existing as RepairType<T>);\r\n  };\r\n}\r\n","import { StateOperator } from '@ngxs/store';\r\nimport { isNil, RepairType } from './utils';\r\n\r\n/**\r\n * @param value - Value to insert\r\n * @param [beforePosition] -  Specified index to insert value before, optional\r\n */\r\nexport function insertItem<T>(\r\n  value: T,\r\n  beforePosition?: number\r\n): StateOperator<RepairType<T>[]> {\r\n  return function insertItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\r\n    // Have to check explicitly for `null` and `undefined`\r\n    // because `value` can be `0`, thus `!value` will return `true`\r\n    if (isNil(value) && existing) {\r\n      return existing as RepairType<T>[];\r\n    }\r\n\r\n    // Property may be dynamic and might not existed before\r\n    if (!Array.isArray(existing)) {\r\n      return [value as RepairType<T>];\r\n    }\r\n\r\n    const clone = existing.slice();\r\n\r\n    let index = 0;\r\n\r\n    // No need to call `isNumber`\r\n    // as we are checking `> 0` not `>= 0`\r\n    // everything except number will return false here\r\n    if (beforePosition! > 0) {\r\n      index = beforePosition!;\r\n    }\r\n\r\n    clone.splice(index, 0, value as RepairType<T>);\r\n    return clone;\r\n  };\r\n}\r\n","import { StateOperator } from '@ngxs/store';\r\nimport { isStateOperator } from './utils';\r\n\r\nexport type PatchSpec<T> = { [P in keyof T]?: T[P] | StateOperator<NonNullable<T[P]>> };\r\n\r\ntype PatchValues<T> = {\r\n  readonly [P in keyof T]?: T[P] extends (...args: any[]) => infer R ? R : T[P];\r\n};\r\n\r\ntype PatchOperator<T> = <U extends PatchValues<T>>(existing: Readonly<U>) => U;\r\n\r\nexport function patch<T>(patchObject: PatchSpec<T>): PatchOperator<T> {\r\n  return function patchStateOperator<U extends PatchValues<T>>(existing: Readonly<U>): U {\r\n    let clone = null;\r\n    for (const k in patchObject) {\r\n      const newValue = patchObject[k];\r\n      const existingPropValue = existing[k];\r\n      const newPropValue = isStateOperator(newValue)\r\n        ? newValue(<any>existingPropValue)\r\n        : newValue;\r\n      if (newPropValue !== existingPropValue) {\r\n        if (!clone) {\r\n          clone = { ...(<any>existing) };\r\n        }\r\n        clone[k] = newPropValue;\r\n      }\r\n    }\r\n    return clone || existing;\r\n  };\r\n}\r\n","import { StateOperator } from '@ngxs/store';\r\n\r\nimport { isStateOperator, isPredicate, isNumber, invalidIndex, RepairType } from './utils';\r\nimport { Predicate } from './internals';\r\n\r\n/**\r\n * @param selector - Index of item in the array or a predicate function\r\n * that can be provided in `Array.prototype.findIndex`\r\n * @param operatorOrValue - New value under the `selector` index or a\r\n * function that can be applied to an existing value\r\n */\r\nexport function updateItem<T>(\r\n  selector: number | Predicate<T>,\r\n  operatorOrValue: T | StateOperator<T>\r\n): StateOperator<RepairType<T>[]> {\r\n  return function updateItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\r\n    let index = -1;\r\n\r\n    if (isPredicate(selector)) {\r\n      index = existing.findIndex(selector);\r\n    } else if (isNumber(selector)) {\r\n      index = selector;\r\n    }\r\n\r\n    if (invalidIndex(index)) {\r\n      return existing as RepairType<T>[];\r\n    }\r\n\r\n    let value: T = null!;\r\n    // Need to check if the new item value will change the existing item value\r\n    // then, only if it will change it then clone the array and set the item\r\n    if (isStateOperator(operatorOrValue)) {\r\n      value = operatorOrValue(existing[index] as Readonly<T>);\r\n    } else {\r\n      value = operatorOrValue;\r\n    }\r\n\r\n    // If the value hasn't been mutated\r\n    // then we just return `existing` array\r\n    if (value === existing[index]) {\r\n      return existing as RepairType<T>[];\r\n    }\r\n\r\n    const clone = existing.slice();\r\n    clone[index] = value as RepairType<T>;\r\n    return clone;\r\n  };\r\n}\r\n","import { StateOperator } from '@ngxs/store';\r\nimport { Predicate } from './internals';\r\nimport { isPredicate, isNumber, invalidIndex, RepairType } from './utils';\r\n\r\n/**\r\n * @param selector - index or predicate to remove an item from an array by\r\n */\r\nexport function removeItem<T>(\r\n  selector: number | Predicate<T>\r\n): StateOperator<RepairType<T>[]> {\r\n  return function removeItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\r\n    let index = -1;\r\n\r\n    if (isPredicate(selector)) {\r\n      index = existing.findIndex(selector);\r\n    } else if (isNumber(selector)) {\r\n      index = selector;\r\n    }\r\n\r\n    if (invalidIndex(index)) {\r\n      return existing as RepairType<T>[];\r\n    }\r\n\r\n    const clone = existing.slice();\r\n    clone.splice(index, 1);\r\n    return clone;\r\n  };\r\n}\r\n"],"names":[],"mappings":"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"}