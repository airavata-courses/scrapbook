/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const VALIDATION_CODE = {
    STATE_NAME: 'STATE_NAME',
    STATE_UNIQUE: 'STATE_UNIQUE',
    STATE_NAME_PROPERTY: 'STATE_NAME_PROPERTY',
    STATE_DECORATOR: 'STATE_DECORATOR',
    INCORRECT_PRODUCTION: 'INCORRECT_PRODUCTION',
    INCORRECT_DEVELOPMENT: 'INCORRECT_DEVELOPMENT',
    SELECT_FACTORY_NOT_CONNECTED: 'SELECT_FACTORY_NOT_CONNECTED',
    ACTION_DECORATOR: 'ACTION_DECORATOR',
    SELECTOR_DECORATOR: 'SELECTOR_DECORATOR',
    ZONE_WARNING: 'ZONE_WARNING',
    PATCHING_ARRAY: 'PATCHING_ARRAY',
    PATCHING_PRIMITIVE: 'PATCHING_PRIMITIVE',
    UNDECORATED_STATE_IN_IVY: 'UNDECORATED_STATE_IN_IVY',
};
export { VALIDATION_CODE };
/** @type {?} */
export const CONFIG_MESSAGES = {
    [VALIDATION_CODE.STATE_NAME]: (/**
     * @param {?} name
     * @return {?}
     */
    (name) => `${name} is not a valid state name. It needs to be a valid object property name.`),
    [VALIDATION_CODE.STATE_NAME_PROPERTY]: (/**
     * @return {?}
     */
    () => `States must register a 'name' property`),
    [VALIDATION_CODE.STATE_UNIQUE]: (/**
     * @param {?} current
     * @param {?} newName
     * @param {?} oldName
     * @return {?}
     */
    (current, newName, oldName) => `State name '${current}' from ${newName} already exists in ${oldName}`),
    [VALIDATION_CODE.STATE_DECORATOR]: (/**
     * @return {?}
     */
    () => 'States must be decorated with @State() decorator'),
    [VALIDATION_CODE.INCORRECT_PRODUCTION]: (/**
     * @return {?}
     */
    () => 'Angular is running in production mode but NGXS is still running in the development mode!\n' +
        'Please set developmentMode to false on the NgxsModule options when in production mode.\n' +
        'NgxsModule.forRoot(states, { developmentMode: !environment.production })'),
    [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: (/**
     * @return {?}
     */
    () => 'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\n' +
        'NgxsModule.forRoot(states, { developmentMode: !environment.production })'),
    [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: (/**
     * @return {?}
     */
    () => 'You have forgotten to import the NGXS module!'),
    [VALIDATION_CODE.ACTION_DECORATOR]: (/**
     * @return {?}
     */
    () => '@Action() decorator cannot be used with static methods'),
    [VALIDATION_CODE.SELECTOR_DECORATOR]: (/**
     * @return {?}
     */
    () => 'Selectors only work on methods'),
    [VALIDATION_CODE.ZONE_WARNING]: (/**
     * @return {?}
     */
    () => 'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\n' +
        'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\n' +
        'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })'),
    [VALIDATION_CODE.PATCHING_ARRAY]: (/**
     * @return {?}
     */
    () => 'Patching arrays is not supported.'),
    [VALIDATION_CODE.PATCHING_PRIMITIVE]: (/**
     * @return {?}
     */
    () => 'Patching primitives is not supported.'),
    [VALIDATION_CODE.UNDECORATED_STATE_IN_IVY]: (/**
     * @param {?} name
     * @return {?}
     */
    (name) => `'${name}' class should be decorated with @Injectable() right after the @State() decorator`)
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvY29uZmlncy9tZXNzYWdlcy5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0lBQ0UsWUFBYSxZQUFZO0lBQ3pCLGNBQWUsY0FBYztJQUM3QixxQkFBc0IscUJBQXFCO0lBQzNDLGlCQUFrQixpQkFBaUI7SUFDbkMsc0JBQXVCLHNCQUFzQjtJQUM3Qyx1QkFBd0IsdUJBQXVCO0lBQy9DLDhCQUErQiw4QkFBOEI7SUFDN0Qsa0JBQW1CLGtCQUFrQjtJQUNyQyxvQkFBcUIsb0JBQW9CO0lBQ3pDLGNBQWUsY0FBYztJQUM3QixnQkFBaUIsZ0JBQWdCO0lBQ2pDLG9CQUFxQixvQkFBb0I7SUFDekMsMEJBQTJCLDBCQUEwQjs7OztBQUd2RCxNQUFNLE9BQU8sZUFBZSxHQUFHO0lBQzdCLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQzs7OztJQUFFLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FDN0MsR0FBRyxJQUFJLDBFQUEwRSxDQUFBO0lBQ25GLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDOzs7SUFBRSxHQUFHLEVBQUUsQ0FBQyx3Q0FBd0MsQ0FBQTtJQUNyRixDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUM7Ozs7OztJQUFFLENBQUMsT0FBZSxFQUFFLE9BQWUsRUFBRSxPQUFlLEVBQUUsRUFBRSxDQUNwRixlQUFlLE9BQU8sVUFBVSxPQUFPLHNCQUFzQixPQUFPLEVBQUUsQ0FBQTtJQUN4RSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUM7OztJQUFFLEdBQUcsRUFBRSxDQUFDLGtEQUFrRCxDQUFBO0lBQzNGLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDOzs7SUFBRSxHQUFHLEVBQUUsQ0FDM0MsNEZBQTRGO1FBQzVGLDBGQUEwRjtRQUMxRiwwRUFBMEUsQ0FBQTtJQUM1RSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQzs7O0lBQUUsR0FBRyxFQUFFLENBQzVDLDhHQUE4RztRQUM5RywwRUFBMEUsQ0FBQTtJQUM1RSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsQ0FBQzs7O0lBQUUsR0FBRyxFQUFFLENBQ25ELCtDQUErQyxDQUFBO0lBQ2pELENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDOzs7SUFBRSxHQUFHLEVBQUUsQ0FDdkMsd0RBQXdELENBQUE7SUFDMUQsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUM7OztJQUFFLEdBQUcsRUFBRSxDQUFDLGdDQUFnQyxDQUFBO0lBQzVFLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQzs7O0lBQUUsR0FBRyxFQUFFLENBQ25DLDZHQUE2RztRQUM3Ryx3RkFBd0Y7UUFDeEYsOEVBQThFLENBQUE7SUFDaEYsQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDOzs7SUFBRSxHQUFHLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQTtJQUMzRSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQzs7O0lBQUUsR0FBRyxFQUFFLENBQUMsdUNBQXVDLENBQUE7SUFDbkYsQ0FBQyxlQUFlLENBQUMsd0JBQXdCLENBQUM7Ozs7SUFBRSxDQUFDLElBQVksRUFBRSxFQUFFLENBQzNELElBQUksSUFBSSxtRkFBbUYsQ0FBQTtDQUM5RiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIFZBTElEQVRJT05fQ09ERSB7XHJcbiAgU1RBVEVfTkFNRSA9ICdTVEFURV9OQU1FJyxcclxuICBTVEFURV9VTklRVUUgPSAnU1RBVEVfVU5JUVVFJyxcclxuICBTVEFURV9OQU1FX1BST1BFUlRZID0gJ1NUQVRFX05BTUVfUFJPUEVSVFknLFxyXG4gIFNUQVRFX0RFQ09SQVRPUiA9ICdTVEFURV9ERUNPUkFUT1InLFxyXG4gIElOQ09SUkVDVF9QUk9EVUNUSU9OID0gJ0lOQ09SUkVDVF9QUk9EVUNUSU9OJyxcclxuICBJTkNPUlJFQ1RfREVWRUxPUE1FTlQgPSAnSU5DT1JSRUNUX0RFVkVMT1BNRU5UJyxcclxuICBTRUxFQ1RfRkFDVE9SWV9OT1RfQ09OTkVDVEVEID0gJ1NFTEVDVF9GQUNUT1JZX05PVF9DT05ORUNURUQnLFxyXG4gIEFDVElPTl9ERUNPUkFUT1IgPSAnQUNUSU9OX0RFQ09SQVRPUicsXHJcbiAgU0VMRUNUT1JfREVDT1JBVE9SID0gJ1NFTEVDVE9SX0RFQ09SQVRPUicsXHJcbiAgWk9ORV9XQVJOSU5HID0gJ1pPTkVfV0FSTklORycsXHJcbiAgUEFUQ0hJTkdfQVJSQVkgPSAnUEFUQ0hJTkdfQVJSQVknLFxyXG4gIFBBVENISU5HX1BSSU1JVElWRSA9ICdQQVRDSElOR19QUklNSVRJVkUnLFxyXG4gIFVOREVDT1JBVEVEX1NUQVRFX0lOX0lWWSA9ICdVTkRFQ09SQVRFRF9TVEFURV9JTl9JVlknXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDT05GSUdfTUVTU0FHRVMgPSB7XHJcbiAgW1ZBTElEQVRJT05fQ09ERS5TVEFURV9OQU1FXTogKG5hbWU6IHN0cmluZykgPT5cclxuICAgIGAke25hbWV9IGlzIG5vdCBhIHZhbGlkIHN0YXRlIG5hbWUuIEl0IG5lZWRzIHRvIGJlIGEgdmFsaWQgb2JqZWN0IHByb3BlcnR5IG5hbWUuYCxcclxuICBbVkFMSURBVElPTl9DT0RFLlNUQVRFX05BTUVfUFJPUEVSVFldOiAoKSA9PiBgU3RhdGVzIG11c3QgcmVnaXN0ZXIgYSAnbmFtZScgcHJvcGVydHlgLFxyXG4gIFtWQUxJREFUSU9OX0NPREUuU1RBVEVfVU5JUVVFXTogKGN1cnJlbnQ6IHN0cmluZywgbmV3TmFtZTogc3RyaW5nLCBvbGROYW1lOiBzdHJpbmcpID0+XHJcbiAgICBgU3RhdGUgbmFtZSAnJHtjdXJyZW50fScgZnJvbSAke25ld05hbWV9IGFscmVhZHkgZXhpc3RzIGluICR7b2xkTmFtZX1gLFxyXG4gIFtWQUxJREFUSU9OX0NPREUuU1RBVEVfREVDT1JBVE9SXTogKCkgPT4gJ1N0YXRlcyBtdXN0IGJlIGRlY29yYXRlZCB3aXRoIEBTdGF0ZSgpIGRlY29yYXRvcicsXHJcbiAgW1ZBTElEQVRJT05fQ09ERS5JTkNPUlJFQ1RfUFJPRFVDVElPTl06ICgpID0+XHJcbiAgICAnQW5ndWxhciBpcyBydW5uaW5nIGluIHByb2R1Y3Rpb24gbW9kZSBidXQgTkdYUyBpcyBzdGlsbCBydW5uaW5nIGluIHRoZSBkZXZlbG9wbWVudCBtb2RlIVxcbicgK1xyXG4gICAgJ1BsZWFzZSBzZXQgZGV2ZWxvcG1lbnRNb2RlIHRvIGZhbHNlIG9uIHRoZSBOZ3hzTW9kdWxlIG9wdGlvbnMgd2hlbiBpbiBwcm9kdWN0aW9uIG1vZGUuXFxuJyArXHJcbiAgICAnTmd4c01vZHVsZS5mb3JSb290KHN0YXRlcywgeyBkZXZlbG9wbWVudE1vZGU6ICFlbnZpcm9ubWVudC5wcm9kdWN0aW9uIH0pJyxcclxuICBbVkFMSURBVElPTl9DT0RFLklOQ09SUkVDVF9ERVZFTE9QTUVOVF06ICgpID0+XHJcbiAgICAnUkVDT01NRU5EQVRJT046IFNldCBkZXZlbG9wbWVudE1vZGUgdG8gdHJ1ZSBvbiB0aGUgTmd4c01vZHVsZSB3aGVuIEFuZ3VsYXIgaXMgcnVubmluZyBpbiBkZXZlbG9wbWVudCBtb2RlLlxcbicgK1xyXG4gICAgJ05neHNNb2R1bGUuZm9yUm9vdChzdGF0ZXMsIHsgZGV2ZWxvcG1lbnRNb2RlOiAhZW52aXJvbm1lbnQucHJvZHVjdGlvbiB9KScsXHJcbiAgW1ZBTElEQVRJT05fQ09ERS5TRUxFQ1RfRkFDVE9SWV9OT1RfQ09OTkVDVEVEXTogKCkgPT5cclxuICAgICdZb3UgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IHRoZSBOR1hTIG1vZHVsZSEnLFxyXG4gIFtWQUxJREFUSU9OX0NPREUuQUNUSU9OX0RFQ09SQVRPUl06ICgpID0+XHJcbiAgICAnQEFjdGlvbigpIGRlY29yYXRvciBjYW5ub3QgYmUgdXNlZCB3aXRoIHN0YXRpYyBtZXRob2RzJyxcclxuICBbVkFMSURBVElPTl9DT0RFLlNFTEVDVE9SX0RFQ09SQVRPUl06ICgpID0+ICdTZWxlY3RvcnMgb25seSB3b3JrIG9uIG1ldGhvZHMnLFxyXG4gIFtWQUxJREFUSU9OX0NPREUuWk9ORV9XQVJOSU5HXTogKCkgPT5cclxuICAgICdZb3VyIGFwcGxpY2F0aW9uIHdhcyBib290c3RyYXBwZWQgd2l0aCBub29wZWQgem9uZSBhbmQgeW91ciBleGVjdXRpb24gc3RyYXRlZ3kgcmVxdWlyZXMgYW4gYWN0dWFsIE5nWm9uZSFcXG4nICtcclxuICAgICdQbGVhc2Ugc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZXhlY3V0aW9uU3RyYXRlZ3kgcHJvcGVydHkgdG8gTm9vcE5neHNFeGVjdXRpb25TdHJhdGVneS5cXG4nICtcclxuICAgICdOZ3hzTW9kdWxlLmZvclJvb3Qoc3RhdGVzLCB7IGV4ZWN1dGlvblN0cmF0ZWd5OiBOb29wTmd4c0V4ZWN1dGlvblN0cmF0ZWd5IH0pJyxcclxuICBbVkFMSURBVElPTl9DT0RFLlBBVENISU5HX0FSUkFZXTogKCkgPT4gJ1BhdGNoaW5nIGFycmF5cyBpcyBub3Qgc3VwcG9ydGVkLicsXHJcbiAgW1ZBTElEQVRJT05fQ09ERS5QQVRDSElOR19QUklNSVRJVkVdOiAoKSA9PiAnUGF0Y2hpbmcgcHJpbWl0aXZlcyBpcyBub3Qgc3VwcG9ydGVkLicsXHJcbiAgW1ZBTElEQVRJT05fQ09ERS5VTkRFQ09SQVRFRF9TVEFURV9JTl9JVlldOiAobmFtZTogc3RyaW5nKSA9PlxyXG4gICAgYCcke25hbWV9JyBjbGFzcyBzaG91bGQgYmUgZGVjb3JhdGVkIHdpdGggQEluamVjdGFibGUoKSByaWdodCBhZnRlciB0aGUgQFN0YXRlKCkgZGVjb3JhdG9yYFxyXG59O1xyXG4iXX0=