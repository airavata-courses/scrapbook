/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Public event api of the router
 */
var /**
 * Public event api of the router
 */
Navigate = /** @class */ (function () {
    function Navigate(path, queryParams, extras) {
        this.path = path;
        this.queryParams = queryParams;
        this.extras = extras;
    }
    Object.defineProperty(Navigate, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] Navigate';
        },
        enumerable: true,
        configurable: true
    });
    return Navigate;
}());
/**
 * Public event api of the router
 */
export { Navigate };
if (false) {
    /** @type {?} */
    Navigate.prototype.path;
    /** @type {?} */
    Navigate.prototype.queryParams;
    /** @type {?} */
    Navigate.prototype.extras;
}
/**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
var /**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
RouterNavigation = /** @class */ (function () {
    function RouterNavigation(routerState, event, trigger) {
        if (trigger === void 0) { trigger = 'none'; }
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
    Object.defineProperty(RouterNavigation, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterNavigation';
        },
        enumerable: true,
        configurable: true
    });
    return RouterNavigation;
}());
/**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
export { RouterNavigation };
if (false) {
    /** @type {?} */
    RouterNavigation.prototype.routerState;
    /** @type {?} */
    RouterNavigation.prototype.event;
    /** @type {?} */
    RouterNavigation.prototype.trigger;
}
/**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
var /**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
RouterCancel = /** @class */ (function () {
    function RouterCancel(routerState, storeState, event, trigger) {
        if (trigger === void 0) { trigger = 'none'; }
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
        this.trigger = trigger;
    }
    Object.defineProperty(RouterCancel, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterCancel';
        },
        enumerable: true,
        configurable: true
    });
    return RouterCancel;
}());
/**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
export { RouterCancel };
if (false) {
    /** @type {?} */
    RouterCancel.prototype.routerState;
    /** @type {?} */
    RouterCancel.prototype.storeState;
    /** @type {?} */
    RouterCancel.prototype.event;
    /** @type {?} */
    RouterCancel.prototype.trigger;
}
/**
 * An action dispatched when the router errors.
 * @template T, V
 */
var /**
 * An action dispatched when the router errors.
 * @template T, V
 */
RouterError = /** @class */ (function () {
    function RouterError(routerState, storeState, event, trigger) {
        if (trigger === void 0) { trigger = 'none'; }
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
        this.trigger = trigger;
    }
    Object.defineProperty(RouterError, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterError';
        },
        enumerable: true,
        configurable: true
    });
    return RouterError;
}());
/**
 * An action dispatched when the router errors.
 * @template T, V
 */
export { RouterError };
if (false) {
    /** @type {?} */
    RouterError.prototype.routerState;
    /** @type {?} */
    RouterError.prototype.storeState;
    /** @type {?} */
    RouterError.prototype.event;
    /** @type {?} */
    RouterError.prototype.trigger;
}
/**
 * An action dispatched when the `ResolveEnd` event is triggered.
 * @template T
 */
var /**
 * An action dispatched when the `ResolveEnd` event is triggered.
 * @template T
 */
RouterDataResolved = /** @class */ (function () {
    function RouterDataResolved(routerState, event, trigger) {
        if (trigger === void 0) { trigger = 'none'; }
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
    Object.defineProperty(RouterDataResolved, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterDataResolved';
        },
        enumerable: true,
        configurable: true
    });
    return RouterDataResolved;
}());
/**
 * An action dispatched when the `ResolveEnd` event is triggered.
 * @template T
 */
export { RouterDataResolved };
if (false) {
    /** @type {?} */
    RouterDataResolved.prototype.routerState;
    /** @type {?} */
    RouterDataResolved.prototype.event;
    /** @type {?} */
    RouterDataResolved.prototype.trigger;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmFjdGlvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9yb3V0ZXItcGx1Z2luLyIsInNvdXJjZXMiOlsic3JjL3JvdXRlci5hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFlQTs7OztJQUtFLGtCQUNTLElBQVcsRUFDWCxXQUFvQixFQUNwQixNQUF5QjtRQUZ6QixTQUFJLEdBQUosSUFBSSxDQUFPO1FBQ1gsZ0JBQVcsR0FBWCxXQUFXLENBQVM7UUFDcEIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7SUFDL0IsQ0FBQztJQVJKLHNCQUFXLGdCQUFJOzs7O1FBQWY7WUFDRSxzSUFBc0k7WUFDdEksT0FBTyxtQkFBbUIsQ0FBQztRQUM3QixDQUFDOzs7T0FBQTtJQU1ILGVBQUM7QUFBRCxDQUFDLEFBVkQsSUFVQzs7Ozs7OztJQUpHLHdCQUFrQjs7SUFDbEIsK0JBQTJCOztJQUMzQiwwQkFBZ0M7Ozs7Ozs7Ozs7O0FBYXBDOzs7Ozs7Ozs7O0lBS0UsMEJBQ1MsV0FBYyxFQUNkLEtBQXVCLEVBQ3ZCLE9BQStCO1FBQS9CLHdCQUFBLEVBQUEsZ0JBQStCO1FBRi9CLGdCQUFXLEdBQVgsV0FBVyxDQUFHO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFDckMsQ0FBQztJQVJKLHNCQUFXLHdCQUFJOzs7O1FBQWY7WUFDRSxzSUFBc0k7WUFDdEksT0FBTywyQkFBMkIsQ0FBQztRQUNyQyxDQUFDOzs7T0FBQTtJQU1ILHVCQUFDO0FBQUQsQ0FBQyxBQVZELElBVUM7Ozs7Ozs7Ozs7Ozs7SUFKRyx1Q0FBcUI7O0lBQ3JCLGlDQUE4Qjs7SUFDOUIsbUNBQXNDOzs7Ozs7QUFPMUM7Ozs7O0lBS0Usc0JBQ1MsV0FBYyxFQUNkLFVBQWEsRUFDYixLQUF1QixFQUN2QixPQUErQjtRQUEvQix3QkFBQSxFQUFBLGdCQUErQjtRQUgvQixnQkFBVyxHQUFYLFdBQVcsQ0FBRztRQUNkLGVBQVUsR0FBVixVQUFVLENBQUc7UUFDYixVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUN2QixZQUFPLEdBQVAsT0FBTyxDQUF3QjtJQUNyQyxDQUFDO0lBVEosc0JBQVcsb0JBQUk7Ozs7UUFBZjtZQUNFLHNJQUFzSTtZQUN0SSxPQUFPLHVCQUF1QixDQUFDO1FBQ2pDLENBQUM7OztPQUFBO0lBT0gsbUJBQUM7QUFBRCxDQUFDLEFBWEQsSUFXQzs7Ozs7Ozs7SUFMRyxtQ0FBcUI7O0lBQ3JCLGtDQUFvQjs7SUFDcEIsNkJBQThCOztJQUM5QiwrQkFBc0M7Ozs7OztBQU8xQzs7Ozs7SUFLRSxxQkFDUyxXQUFjLEVBQ2QsVUFBYSxFQUNiLEtBQXNCLEVBQ3RCLE9BQStCO1FBQS9CLHdCQUFBLEVBQUEsZ0JBQStCO1FBSC9CLGdCQUFXLEdBQVgsV0FBVyxDQUFHO1FBQ2QsZUFBVSxHQUFWLFVBQVUsQ0FBRztRQUNiLFVBQUssR0FBTCxLQUFLLENBQWlCO1FBQ3RCLFlBQU8sR0FBUCxPQUFPLENBQXdCO0lBQ3JDLENBQUM7SUFUSixzQkFBVyxtQkFBSTs7OztRQUFmO1lBQ0Usc0lBQXNJO1lBQ3RJLE9BQU8sc0JBQXNCLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFPSCxrQkFBQztBQUFELENBQUMsQUFYRCxJQVdDOzs7Ozs7OztJQUxHLGtDQUFxQjs7SUFDckIsaUNBQW9COztJQUNwQiw0QkFBNkI7O0lBQzdCLDhCQUFzQzs7Ozs7O0FBTzFDOzs7OztJQUtFLDRCQUNTLFdBQWMsRUFDZCxLQUFpQixFQUNqQixPQUErQjtRQUEvQix3QkFBQSxFQUFBLGdCQUErQjtRQUYvQixnQkFBVyxHQUFYLFdBQVcsQ0FBRztRQUNkLFVBQUssR0FBTCxLQUFLLENBQVk7UUFDakIsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFDckMsQ0FBQztJQVJKLHNCQUFXLDBCQUFJOzs7O1FBQWY7WUFDRSxzSUFBc0k7WUFDdEksT0FBTyw2QkFBNkIsQ0FBQztRQUN2QyxDQUFDOzs7T0FBQTtJQU1ILHlCQUFDO0FBQUQsQ0FBQyxBQVZELElBVUM7Ozs7Ozs7O0lBSkcseUNBQXFCOztJQUNyQixtQ0FBd0I7O0lBQ3hCLHFDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgTmF2aWdhdGlvbkNhbmNlbCxcclxuICBOYXZpZ2F0aW9uRXJyb3IsXHJcbiAgTmF2aWdhdGlvbkV4dHJhcyxcclxuICBQYXJhbXMsXHJcbiAgUm91dGVyU3RhdGVTbmFwc2hvdCxcclxuICBSb3V0ZXNSZWNvZ25pemVkLFxyXG4gIFJlc29sdmVFbmRcclxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuaW1wb3J0IHsgUm91dGVyVHJpZ2dlciB9IGZyb20gJy4vcm91dGVyLnN0YXRlJztcclxuXHJcbi8qKlxyXG4gKiBQdWJsaWMgZXZlbnQgYXBpIG9mIHRoZSByb3V0ZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBOYXZpZ2F0ZSB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW1JvdXRlcl0gTmF2aWdhdGUnO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBwYXRoOiBhbnlbXSxcclxuICAgIHB1YmxpYyBxdWVyeVBhcmFtcz86IFBhcmFtcyxcclxuICAgIHB1YmxpYyBleHRyYXM/OiBOYXZpZ2F0aW9uRXh0cmFzXHJcbiAgKSB7fVxyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQW5ndWxhciBSb3V0ZXJzIGludGVybmFsIHN0YXRlIGV2ZW50c1xyXG4gKlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgbmF2aWdhdGVzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJvdXRlck5hdmlnYXRpb248VCA9IFJvdXRlclN0YXRlU25hcHNob3Q+IHtcclxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAvLyBOT1RFOiBOb3QgbmVjZXNzYXJ5IHRvIGRlY2xhcmUgdGhlIHR5cGUgaW4gdGhpcyB3YXkgaW4geW91ciBjb2RlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25neHMvc3RvcmUvcHVsbC82NDQjaXNzdWVjb21tZW50LTQzNjAwMzEzOFxyXG4gICAgcmV0dXJuICdbUm91dGVyXSBSb3V0ZXJOYXZpZ2F0aW9uJztcclxuICB9XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcm91dGVyU3RhdGU6IFQsXHJcbiAgICBwdWJsaWMgZXZlbnQ6IFJvdXRlc1JlY29nbml6ZWQsXHJcbiAgICBwdWJsaWMgdHJpZ2dlcjogUm91dGVyVHJpZ2dlciA9ICdub25lJ1xyXG4gICkge31cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGFjdGlvbiBkaXNwYXRjaGVkIHdoZW4gdGhlIHJvdXRlciBjYW5jZWwgbmF2aWdhdGlvbi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJDYW5jZWw8VCwgViA9IFJvdXRlclN0YXRlU25hcHNob3Q+IHtcclxuICBzdGF0aWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAvLyBOT1RFOiBOb3QgbmVjZXNzYXJ5IHRvIGRlY2xhcmUgdGhlIHR5cGUgaW4gdGhpcyB3YXkgaW4geW91ciBjb2RlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25neHMvc3RvcmUvcHVsbC82NDQjaXNzdWVjb21tZW50LTQzNjAwMzEzOFxyXG4gICAgcmV0dXJuICdbUm91dGVyXSBSb3V0ZXJDYW5jZWwnO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByb3V0ZXJTdGF0ZTogVixcclxuICAgIHB1YmxpYyBzdG9yZVN0YXRlOiBULFxyXG4gICAgcHVibGljIGV2ZW50OiBOYXZpZ2F0aW9uQ2FuY2VsLFxyXG4gICAgcHVibGljIHRyaWdnZXI6IFJvdXRlclRyaWdnZXIgPSAnbm9uZSdcclxuICApIHt9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgZXJyb3JzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJvdXRlckVycm9yPFQsIFYgPSBSb3V0ZXJTdGF0ZVNuYXBzaG90PiB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW1JvdXRlcl0gUm91dGVyRXJyb3InO1xyXG4gIH1cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByb3V0ZXJTdGF0ZTogVixcclxuICAgIHB1YmxpYyBzdG9yZVN0YXRlOiBULFxyXG4gICAgcHVibGljIGV2ZW50OiBOYXZpZ2F0aW9uRXJyb3IsXHJcbiAgICBwdWJsaWMgdHJpZ2dlcjogUm91dGVyVHJpZ2dlciA9ICdub25lJ1xyXG4gICkge31cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGFjdGlvbiBkaXNwYXRjaGVkIHdoZW4gdGhlIGBSZXNvbHZlRW5kYCBldmVudCBpcyB0cmlnZ2VyZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUm91dGVyRGF0YVJlc29sdmVkPFQgPSBSb3V0ZXJTdGF0ZVNuYXBzaG90PiB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW1JvdXRlcl0gUm91dGVyRGF0YVJlc29sdmVkJztcclxuICB9XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcm91dGVyU3RhdGU6IFQsXHJcbiAgICBwdWJsaWMgZXZlbnQ6IFJlc29sdmVFbmQsXHJcbiAgICBwdWJsaWMgdHJpZ2dlcjogUm91dGVyVHJpZ2dlciA9ICdub25lJ1xyXG4gICkge31cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIHVuaW9uIHR5cGUgb2Ygcm91dGVyIGFjdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSb3V0ZXJBY3Rpb248VCwgViA9IFJvdXRlclN0YXRlU25hcHNob3Q+ID1cclxuICB8IFJvdXRlck5hdmlnYXRpb248Vj5cclxuICB8IFJvdXRlckNhbmNlbDxULCBWPlxyXG4gIHwgUm91dGVyRXJyb3I8VCwgVj5cclxuICB8IFJvdXRlckRhdGFSZXNvbHZlZDxWPjtcclxuIl19