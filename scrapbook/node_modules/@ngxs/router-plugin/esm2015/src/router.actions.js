/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Public event api of the router
 */
export class Navigate {
    /**
     * @param {?} path
     * @param {?=} queryParams
     * @param {?=} extras
     */
    constructor(path, queryParams, extras) {
        this.path = path;
        this.queryParams = queryParams;
        this.extras = extras;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Router] Navigate';
    }
}
if (false) {
    /** @type {?} */
    Navigate.prototype.path;
    /** @type {?} */
    Navigate.prototype.queryParams;
    /** @type {?} */
    Navigate.prototype.extras;
}
/**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
export class RouterNavigation {
    /**
     * @param {?} routerState
     * @param {?} event
     * @param {?=} trigger
     */
    constructor(routerState, event, trigger = 'none') {
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Router] RouterNavigation';
    }
}
if (false) {
    /** @type {?} */
    RouterNavigation.prototype.routerState;
    /** @type {?} */
    RouterNavigation.prototype.event;
    /** @type {?} */
    RouterNavigation.prototype.trigger;
}
/**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
export class RouterCancel {
    /**
     * @param {?} routerState
     * @param {?} storeState
     * @param {?} event
     * @param {?=} trigger
     */
    constructor(routerState, storeState, event, trigger = 'none') {
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
        this.trigger = trigger;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Router] RouterCancel';
    }
}
if (false) {
    /** @type {?} */
    RouterCancel.prototype.routerState;
    /** @type {?} */
    RouterCancel.prototype.storeState;
    /** @type {?} */
    RouterCancel.prototype.event;
    /** @type {?} */
    RouterCancel.prototype.trigger;
}
/**
 * An action dispatched when the router errors.
 * @template T, V
 */
export class RouterError {
    /**
     * @param {?} routerState
     * @param {?} storeState
     * @param {?} event
     * @param {?=} trigger
     */
    constructor(routerState, storeState, event, trigger = 'none') {
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
        this.trigger = trigger;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Router] RouterError';
    }
}
if (false) {
    /** @type {?} */
    RouterError.prototype.routerState;
    /** @type {?} */
    RouterError.prototype.storeState;
    /** @type {?} */
    RouterError.prototype.event;
    /** @type {?} */
    RouterError.prototype.trigger;
}
/**
 * An action dispatched when the `ResolveEnd` event is triggered.
 * @template T
 */
export class RouterDataResolved {
    /**
     * @param {?} routerState
     * @param {?} event
     * @param {?=} trigger
     */
    constructor(routerState, event, trigger = 'none') {
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
    /**
     * @return {?}
     */
    static get type() {
        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
        return '[Router] RouterDataResolved';
    }
}
if (false) {
    /** @type {?} */
    RouterDataResolved.prototype.routerState;
    /** @type {?} */
    RouterDataResolved.prototype.event;
    /** @type {?} */
    RouterDataResolved.prototype.trigger;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmFjdGlvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9yb3V0ZXItcGx1Z2luLyIsInNvdXJjZXMiOlsic3JjL3JvdXRlci5hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFlQSxNQUFNLE9BQU8sUUFBUTs7Ozs7O0lBS25CLFlBQ1MsSUFBVyxFQUNYLFdBQW9CLEVBQ3BCLE1BQXlCO1FBRnpCLFNBQUksR0FBSixJQUFJLENBQU87UUFDWCxnQkFBVyxHQUFYLFdBQVcsQ0FBUztRQUNwQixXQUFNLEdBQU4sTUFBTSxDQUFtQjtJQUMvQixDQUFDOzs7O0lBUkosTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0NBTUY7OztJQUpHLHdCQUFrQjs7SUFDbEIsK0JBQTJCOztJQUMzQiwwQkFBZ0M7Ozs7Ozs7Ozs7O0FBYXBDLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7OztJQUszQixZQUNTLFdBQWMsRUFDZCxLQUF1QixFQUN2QixVQUF5QixNQUFNO1FBRi9CLGdCQUFXLEdBQVgsV0FBVyxDQUFHO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFDckMsQ0FBQzs7OztJQVJKLE1BQU0sS0FBSyxJQUFJO1FBQ2Isc0lBQXNJO1FBQ3RJLE9BQU8sMkJBQTJCLENBQUM7SUFDckMsQ0FBQztDQU1GOzs7SUFKRyx1Q0FBcUI7O0lBQ3JCLGlDQUE4Qjs7SUFDOUIsbUNBQXNDOzs7Ozs7QUFPMUMsTUFBTSxPQUFPLFlBQVk7Ozs7Ozs7SUFLdkIsWUFDUyxXQUFjLEVBQ2QsVUFBYSxFQUNiLEtBQXVCLEVBQ3ZCLFVBQXlCLE1BQU07UUFIL0IsZ0JBQVcsR0FBWCxXQUFXLENBQUc7UUFDZCxlQUFVLEdBQVYsVUFBVSxDQUFHO1FBQ2IsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFDckMsQ0FBQzs7OztJQVRKLE1BQU0sS0FBSyxJQUFJO1FBQ2Isc0lBQXNJO1FBQ3RJLE9BQU8sdUJBQXVCLENBQUM7SUFDakMsQ0FBQztDQU9GOzs7SUFMRyxtQ0FBcUI7O0lBQ3JCLGtDQUFvQjs7SUFDcEIsNkJBQThCOztJQUM5QiwrQkFBc0M7Ozs7OztBQU8xQyxNQUFNLE9BQU8sV0FBVzs7Ozs7OztJQUt0QixZQUNTLFdBQWMsRUFDZCxVQUFhLEVBQ2IsS0FBc0IsRUFDdEIsVUFBeUIsTUFBTTtRQUgvQixnQkFBVyxHQUFYLFdBQVcsQ0FBRztRQUNkLGVBQVUsR0FBVixVQUFVLENBQUc7UUFDYixVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUN0QixZQUFPLEdBQVAsT0FBTyxDQUF3QjtJQUNyQyxDQUFDOzs7O0lBVEosTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTyxzQkFBc0IsQ0FBQztJQUNoQyxDQUFDO0NBT0Y7OztJQUxHLGtDQUFxQjs7SUFDckIsaUNBQW9COztJQUNwQiw0QkFBNkI7O0lBQzdCLDhCQUFzQzs7Ozs7O0FBTzFDLE1BQU0sT0FBTyxrQkFBa0I7Ozs7OztJQUs3QixZQUNTLFdBQWMsRUFDZCxLQUFpQixFQUNqQixVQUF5QixNQUFNO1FBRi9CLGdCQUFXLEdBQVgsV0FBVyxDQUFHO1FBQ2QsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUNqQixZQUFPLEdBQVAsT0FBTyxDQUF3QjtJQUNyQyxDQUFDOzs7O0lBUkosTUFBTSxLQUFLLElBQUk7UUFDYixzSUFBc0k7UUFDdEksT0FBTyw2QkFBNkIsQ0FBQztJQUN2QyxDQUFDO0NBTUY7OztJQUpHLHlDQUFxQjs7SUFDckIsbUNBQXdCOztJQUN4QixxQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIE5hdmlnYXRpb25DYW5jZWwsXHJcbiAgTmF2aWdhdGlvbkVycm9yLFxyXG4gIE5hdmlnYXRpb25FeHRyYXMsXHJcbiAgUGFyYW1zLFxyXG4gIFJvdXRlclN0YXRlU25hcHNob3QsXHJcbiAgUm91dGVzUmVjb2duaXplZCxcclxuICBSZXNvbHZlRW5kXHJcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbmltcG9ydCB7IFJvdXRlclRyaWdnZXIgfSBmcm9tICcuL3JvdXRlci5zdGF0ZSc7XHJcblxyXG4vKipcclxuICogUHVibGljIGV2ZW50IGFwaSBvZiB0aGUgcm91dGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmF2aWdhdGUge1xyXG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcclxuICAgIC8vIE5PVEU6IE5vdCBuZWNlc3NhcnkgdG8gZGVjbGFyZSB0aGUgdHlwZSBpbiB0aGlzIHdheSBpbiB5b3VyIGNvZGUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmd4cy9zdG9yZS9wdWxsLzY0NCNpc3N1ZWNvbW1lbnQtNDM2MDAzMTM4XHJcbiAgICByZXR1cm4gJ1tSb3V0ZXJdIE5hdmlnYXRlJztcclxuICB9XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcGF0aDogYW55W10sXHJcbiAgICBwdWJsaWMgcXVlcnlQYXJhbXM/OiBQYXJhbXMsXHJcbiAgICBwdWJsaWMgZXh0cmFzPzogTmF2aWdhdGlvbkV4dHJhc1xyXG4gICkge31cclxufVxyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEFuZ3VsYXIgUm91dGVycyBpbnRlcm5hbCBzdGF0ZSBldmVudHNcclxuICpcclxuICovXHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIGRpc3BhdGNoZWQgd2hlbiB0aGUgcm91dGVyIG5hdmlnYXRlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJOYXZpZ2F0aW9uPFQgPSBSb3V0ZXJTdGF0ZVNuYXBzaG90PiB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW1JvdXRlcl0gUm91dGVyTmF2aWdhdGlvbic7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHJvdXRlclN0YXRlOiBULFxyXG4gICAgcHVibGljIGV2ZW50OiBSb3V0ZXNSZWNvZ25pemVkLFxyXG4gICAgcHVibGljIHRyaWdnZXI6IFJvdXRlclRyaWdnZXIgPSAnbm9uZSdcclxuICApIHt9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSByb3V0ZXIgY2FuY2VsIG5hdmlnYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUm91dGVyQ2FuY2VsPFQsIFYgPSBSb3V0ZXJTdGF0ZVNuYXBzaG90PiB7XHJcbiAgc3RhdGljIGdldCB0eXBlKCkge1xyXG4gICAgLy8gTk9URTogTm90IG5lY2Vzc2FyeSB0byBkZWNsYXJlIHRoZSB0eXBlIGluIHRoaXMgd2F5IGluIHlvdXIgY29kZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9uZ3hzL3N0b3JlL3B1bGwvNjQ0I2lzc3VlY29tbWVudC00MzYwMDMxMzhcclxuICAgIHJldHVybiAnW1JvdXRlcl0gUm91dGVyQ2FuY2VsJztcclxuICB9XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcm91dGVyU3RhdGU6IFYsXHJcbiAgICBwdWJsaWMgc3RvcmVTdGF0ZTogVCxcclxuICAgIHB1YmxpYyBldmVudDogTmF2aWdhdGlvbkNhbmNlbCxcclxuICAgIHB1YmxpYyB0cmlnZ2VyOiBSb3V0ZXJUcmlnZ2VyID0gJ25vbmUnXHJcbiAgKSB7fVxyXG59XHJcblxyXG4vKipcclxuICogQW4gYWN0aW9uIGRpc3BhdGNoZWQgd2hlbiB0aGUgcm91dGVyIGVycm9ycy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJFcnJvcjxULCBWID0gUm91dGVyU3RhdGVTbmFwc2hvdD4ge1xyXG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcclxuICAgIC8vIE5PVEU6IE5vdCBuZWNlc3NhcnkgdG8gZGVjbGFyZSB0aGUgdHlwZSBpbiB0aGlzIHdheSBpbiB5b3VyIGNvZGUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmd4cy9zdG9yZS9wdWxsLzY0NCNpc3N1ZWNvbW1lbnQtNDM2MDAzMTM4XHJcbiAgICByZXR1cm4gJ1tSb3V0ZXJdIFJvdXRlckVycm9yJztcclxuICB9XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcm91dGVyU3RhdGU6IFYsXHJcbiAgICBwdWJsaWMgc3RvcmVTdGF0ZTogVCxcclxuICAgIHB1YmxpYyBldmVudDogTmF2aWdhdGlvbkVycm9yLFxyXG4gICAgcHVibGljIHRyaWdnZXI6IFJvdXRlclRyaWdnZXIgPSAnbm9uZSdcclxuICApIHt9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhY3Rpb24gZGlzcGF0Y2hlZCB3aGVuIHRoZSBgUmVzb2x2ZUVuZGAgZXZlbnQgaXMgdHJpZ2dlcmVkLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJvdXRlckRhdGFSZXNvbHZlZDxUID0gUm91dGVyU3RhdGVTbmFwc2hvdD4ge1xyXG4gIHN0YXRpYyBnZXQgdHlwZSgpIHtcclxuICAgIC8vIE5PVEU6IE5vdCBuZWNlc3NhcnkgdG8gZGVjbGFyZSB0aGUgdHlwZSBpbiB0aGlzIHdheSBpbiB5b3VyIGNvZGUuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbmd4cy9zdG9yZS9wdWxsLzY0NCNpc3N1ZWNvbW1lbnQtNDM2MDAzMTM4XHJcbiAgICByZXR1cm4gJ1tSb3V0ZXJdIFJvdXRlckRhdGFSZXNvbHZlZCc7XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHJvdXRlclN0YXRlOiBULFxyXG4gICAgcHVibGljIGV2ZW50OiBSZXNvbHZlRW5kLFxyXG4gICAgcHVibGljIHRyaWdnZXI6IFJvdXRlclRyaWdnZXIgPSAnbm9uZSdcclxuICApIHt9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiB1bmlvbiB0eXBlIG9mIHJvdXRlciBhY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUm91dGVyQWN0aW9uPFQsIFYgPSBSb3V0ZXJTdGF0ZVNuYXBzaG90PiA9XHJcbiAgfCBSb3V0ZXJOYXZpZ2F0aW9uPFY+XHJcbiAgfCBSb3V0ZXJDYW5jZWw8VCwgVj5cclxuICB8IFJvdXRlckVycm9yPFQsIFY+XHJcbiAgfCBSb3V0ZXJEYXRhUmVzb2x2ZWQ8Vj47XHJcbiJdfQ==