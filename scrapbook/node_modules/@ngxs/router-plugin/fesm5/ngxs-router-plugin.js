import { NgZone, Injectable, NgModule } from '@angular/core';
import { Store, Action, Selector, State, NgxsModule } from '@ngxs/store';
import { __assign, __decorate, __metadata } from 'tslib';
import { NavigationStart, RoutesRecognized, ResolveEnd, NavigationCancel, NavigationError, NavigationEnd, Router, UrlSerializer } from '@angular/router';
import { LocationStrategy, Location } from '@angular/common';
import { isAngularInTestMode } from '@ngxs/store/internals';
import { first } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Public event api of the router
 */
var  /**
 * Public event api of the router
 */
Navigate = /** @class */ (function () {
    function Navigate(path, queryParams, extras) {
        this.path = path;
        this.queryParams = queryParams;
        this.extras = extras;
    }
    Object.defineProperty(Navigate, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] Navigate';
        },
        enumerable: true,
        configurable: true
    });
    return Navigate;
}());
if (false) {
    /** @type {?} */
    Navigate.prototype.path;
    /** @type {?} */
    Navigate.prototype.queryParams;
    /** @type {?} */
    Navigate.prototype.extras;
}
/**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
var  /**
 *
 * Angular Routers internal state events
 *
 */
/**
 * An action dispatched when the router navigates.
 * @template T
 */
RouterNavigation = /** @class */ (function () {
    function RouterNavigation(routerState, event, trigger) {
        if (trigger === void 0) { trigger = 'none'; }
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
    Object.defineProperty(RouterNavigation, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterNavigation';
        },
        enumerable: true,
        configurable: true
    });
    return RouterNavigation;
}());
if (false) {
    /** @type {?} */
    RouterNavigation.prototype.routerState;
    /** @type {?} */
    RouterNavigation.prototype.event;
    /** @type {?} */
    RouterNavigation.prototype.trigger;
}
/**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
var  /**
 * An action dispatched when the router cancel navigation.
 * @template T, V
 */
RouterCancel = /** @class */ (function () {
    function RouterCancel(routerState, storeState, event, trigger) {
        if (trigger === void 0) { trigger = 'none'; }
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
        this.trigger = trigger;
    }
    Object.defineProperty(RouterCancel, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterCancel';
        },
        enumerable: true,
        configurable: true
    });
    return RouterCancel;
}());
if (false) {
    /** @type {?} */
    RouterCancel.prototype.routerState;
    /** @type {?} */
    RouterCancel.prototype.storeState;
    /** @type {?} */
    RouterCancel.prototype.event;
    /** @type {?} */
    RouterCancel.prototype.trigger;
}
/**
 * An action dispatched when the router errors.
 * @template T, V
 */
var  /**
 * An action dispatched when the router errors.
 * @template T, V
 */
RouterError = /** @class */ (function () {
    function RouterError(routerState, storeState, event, trigger) {
        if (trigger === void 0) { trigger = 'none'; }
        this.routerState = routerState;
        this.storeState = storeState;
        this.event = event;
        this.trigger = trigger;
    }
    Object.defineProperty(RouterError, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterError';
        },
        enumerable: true,
        configurable: true
    });
    return RouterError;
}());
if (false) {
    /** @type {?} */
    RouterError.prototype.routerState;
    /** @type {?} */
    RouterError.prototype.storeState;
    /** @type {?} */
    RouterError.prototype.event;
    /** @type {?} */
    RouterError.prototype.trigger;
}
/**
 * An action dispatched when the `ResolveEnd` event is triggered.
 * @template T
 */
var  /**
 * An action dispatched when the `ResolveEnd` event is triggered.
 * @template T
 */
RouterDataResolved = /** @class */ (function () {
    function RouterDataResolved(routerState, event, trigger) {
        if (trigger === void 0) { trigger = 'none'; }
        this.routerState = routerState;
        this.event = event;
        this.trigger = trigger;
    }
    Object.defineProperty(RouterDataResolved, "type", {
        get: /**
         * @return {?}
         */
        function () {
            // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138
            return '[Router] RouterDataResolved';
        },
        enumerable: true,
        configurable: true
    });
    return RouterDataResolved;
}());
if (false) {
    /** @type {?} */
    RouterDataResolved.prototype.routerState;
    /** @type {?} */
    RouterDataResolved.prototype.event;
    /** @type {?} */
    RouterDataResolved.prototype.trigger;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var  /**
 * @abstract
 * @template T
 */
RouterStateSerializer = /** @class */ (function () {
    function RouterStateSerializer() {
    }
    return RouterStateSerializer;
}());
if (false) {
    /**
     * @abstract
     * @param {?} routerState
     * @return {?}
     */
    RouterStateSerializer.prototype.serialize = function (routerState) { };
}
/**
 * @record
 */
function SerializedRouterStateSnapshot() { }
if (false) {
    /** @type {?} */
    SerializedRouterStateSnapshot.prototype.root;
    /** @type {?} */
    SerializedRouterStateSnapshot.prototype.url;
}
var DefaultRouterStateSerializer = /** @class */ (function () {
    function DefaultRouterStateSerializer() {
    }
    /**
     * @param {?} routerState
     * @return {?}
     */
    DefaultRouterStateSerializer.prototype.serialize = /**
     * @param {?} routerState
     * @return {?}
     */
    function (routerState) {
        return {
            root: this.serializeRoute(routerState.root),
            url: routerState.url
        };
    };
    /**
     * @private
     * @param {?} route
     * @return {?}
     */
    DefaultRouterStateSerializer.prototype.serializeRoute = /**
     * @private
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var _this = this;
        /** @type {?} */
        var children = route.children.map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return _this.serializeRoute(c); }));
        return {
            url: route.url,
            params: route.params,
            queryParams: route.queryParams,
            fragment: route.fragment,
            data: route.data,
            outlet: route.outlet,
            component: null,
            routeConfig: null,
            root: (/** @type {?} */ (null)),
            parent: null,
            firstChild: children[0],
            children: children,
            pathFromRoot: (/** @type {?} */ (null)),
            paramMap: route.paramMap,
            queryParamMap: route.queryParamMap,
            toString: route.toString
        };
    };
    return DefaultRouterStateSerializer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 * @template T
 */
function RouterStateModel() { }
if (false) {
    /** @type {?|undefined} */
    RouterStateModel.prototype.state;
    /** @type {?|undefined} */
    RouterStateModel.prototype.navigationId;
    /** @type {?} */
    RouterStateModel.prototype.trigger;
}
var RouterState = /** @class */ (function () {
    function RouterState(_store, _router, _serializer, _ngZone, _urlSerializer, _locationStrategy, _location) {
        this._store = _store;
        this._router = _router;
        this._serializer = _serializer;
        this._ngZone = _ngZone;
        this._urlSerializer = _urlSerializer;
        this._locationStrategy = _locationStrategy;
        this._location = _location;
        /**
         * Determines how navigation was performed by the `RouterState` itself
         * or outside via `new Navigate(...)`
         */
        this._trigger = 'none';
        /**
         * That's the serialized state from the `Router` class
         */
        this._routerState = null;
        /**
         * That's the value of the `RouterState` state
         */
        this._storeState = null;
        this._lastRoutesRecognized = (/** @type {?} */ (null));
        this.setUpStoreListener();
        this.setUpRouterEventsListener();
        this.checkInitialNavigationOnce();
    }
    RouterState_1 = RouterState;
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    RouterState.state = /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    RouterState.url = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state && state.state.url;
    };
    /**
     * @param {?} _
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.navigate = /**
     * @param {?} _
     * @param {?} action
     * @return {?}
     */
    function (_, action) {
        var _this = this;
        return this._ngZone.run((/**
         * @return {?}
         */
        function () {
            return _this._router.navigate(action.path, __assign({ queryParams: action.queryParams }, action.extras));
        }));
    };
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.angularRouterAction = /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    function (ctx, action) {
        ctx.setState(__assign({}, ctx.getState(), { trigger: action.trigger, state: action.routerState, navigationId: action.event.id }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpStoreListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._store.select(RouterState_1).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            _this.navigateIfNeeded(state);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpRouterEventsListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof NavigationStart) {
                _this.navigationStart();
            }
            else if (event instanceof RoutesRecognized) {
                _this._lastRoutesRecognized = event;
            }
            else if (event instanceof ResolveEnd) {
                _this.dispatchRouterDataResolved(event);
            }
            else if (event instanceof NavigationCancel) {
                _this.dispatchRouterCancel(event);
                _this.reset();
            }
            else if (event instanceof NavigationError) {
                _this.dispatchRouterError(event);
                _this.reset();
            }
            else if (event instanceof NavigationEnd) {
                _this.navigationEnd();
                _this.reset();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.navigationStart = /**
     * @private
     * @return {?}
     */
    function () {
        this._routerState = this._serializer.serialize(this._router.routerState.snapshot);
        if (this._trigger !== 'none') {
            this._storeState = this._store.selectSnapshot(RouterState_1);
        }
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.navigationEnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.shouldDispatchRouterNavigation()) {
            this.dispatchRouterNavigation();
        }
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.shouldDispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this._storeState)
            return true;
        return this._trigger !== 'store';
    };
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    RouterState.prototype.navigateIfNeeded = /**
     * @private
     * @param {?} state
     * @return {?}
     */
    function (state) {
        var _this = this;
        /** @type {?} */
        var canSkipNavigation = !this._storeState ||
            !this._storeState.state ||
            !state ||
            state.trigger === 'router' ||
            this._router.url === this._storeState.state.url;
        if (canSkipNavigation) {
            return;
        }
        this._trigger = 'store';
        this._ngZone.run((/**
         * @return {?}
         */
        function () {
            _this._router.navigateByUrl((/** @type {?} */ ((/** @type {?} */ (_this._storeState)).state)).url);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.dispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nextRouterState = this._serializer.serialize(this._lastRoutesRecognized.state);
        this.dispatchRouterAction(new RouterNavigation(nextRouterState, new RoutesRecognized(this._lastRoutesRecognized.id, this._lastRoutesRecognized.url, this._lastRoutesRecognized.urlAfterRedirects, nextRouterState), this._trigger));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterCancel = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterCancel((/** @type {?} */ (this._routerState)), this._storeState, event, this._trigger));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterError = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterError((/** @type {?} */ (this._routerState)), this._storeState, new NavigationError(event.id, event.url, "" + event), this._trigger));
    };
    /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.dispatchRouterAction = /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    function (action) {
        this._trigger = 'router';
        try {
            this._store.dispatch(action);
        }
        finally {
            this._trigger = 'none';
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterDataResolved = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var routerState = this._serializer.serialize(event.state);
        this.dispatchRouterAction(new RouterDataResolved(routerState, event, this._trigger));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.reset = /**
     * @private
     * @return {?}
     */
    function () {
        this._trigger = 'none';
        this._storeState = null;
        this._routerState = null;
    };
    /**
     * No sense to mess up the `setUpRouterEventsListener` method as we have
     * to perform this check only once and unsubscribe after the first event
     * is triggered
     */
    /**
     * No sense to mess up the `setUpRouterEventsListener` method as we have
     * to perform this check only once and unsubscribe after the first event
     * is triggered
     * @private
     * @return {?}
     */
    RouterState.prototype.checkInitialNavigationOnce = /**
     * No sense to mess up the `setUpRouterEventsListener` method as we have
     * to perform this check only once and unsubscribe after the first event
     * is triggered
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (isAngularInTestMode()) {
            return;
        }
        this._router.events
            .pipe(first((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event instanceof RoutesRecognized; })))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            // `location.pathname` always equals manually entered URL in the address bar
            // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized
            // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the
            // `RouterNavigation` action will be dispatched and the user will be redirected to the
            // previously saved URL. We want to prevent such behavior, so we perform this check
            var url = _a.url;
            // `location.pathname` always equals manually entered URL in the address bar
            // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized
            // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the
            // `RouterNavigation` action will be dispatched and the user will be redirected to the
            // previously saved URL. We want to prevent such behavior, so we perform this check
            // `url` is a recognized URL by the Angular's router, while `currentUrl` is an actual URL
            // entered in the browser's address bar
            // `PathLocationStrategy.prototype.path()` returns a concatenation of
            // `PlatformLocation.pathname` and normalized `PlatformLocation.search`.
            // `Location.prototype.normalize` strips base href from the URL,
            // if `baseHref` (declared in angular.json) for example is `/en`
            // and the URL is `/test#anchor` - then `_locationStrategy.path(true)` will return `/en/test#anchor`,
            // but `/en/test#anchor` is not known to the Angular's router, so we have to strip `/en`
            // from the URL
            /** @type {?} */
            var currentUrl = _this._location.normalize(_this._locationStrategy.path(true));
            /** @type {?} */
            var currentUrlTree = _this._urlSerializer.parse(currentUrl);
            // We need to serialize the URL because in that example `/test/?redirect=https://google.com/`
            // Angular will recognize it as `/test?redirect=https:%2F%2Fwww.google.com%2F`
            // so we have to run the `currentUrl` via the `UrlSerializer` that will encode characters
            /** @type {?} */
            var currentSerializedUrl = _this._urlSerializer.serialize(currentUrlTree);
            // If URLs differ from each other - we've got to perform a redirect to the manually entered URL
            // in the address bar, as it must have a priority
            if (currentSerializedUrl !== url) {
                _this._router.navigateByUrl(currentUrl);
            }
        }));
    };
    var RouterState_1;
    RouterState.ctorParameters = function () { return [
        { type: Store },
        { type: Router },
        { type: RouterStateSerializer },
        { type: NgZone },
        { type: UrlSerializer },
        { type: LocationStrategy },
        { type: Location }
    ]; };
    RouterState.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RouterState.ctorParameters = function () { return [
        { type: Store },
        { type: Router },
        { type: RouterStateSerializer },
        { type: NgZone },
        { type: UrlSerializer },
        { type: LocationStrategy },
        { type: Location }
    ]; };
    __decorate([
        Action(Navigate),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Navigate]),
        __metadata("design:returntype", void 0)
    ], RouterState.prototype, "navigate", null);
    __decorate([
        Action([RouterNavigation, RouterError, RouterCancel, RouterDataResolved]),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], RouterState.prototype, "angularRouterAction", null);
    __decorate([
        Selector(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], RouterState, "state", null);
    __decorate([
        Selector(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Object)
    ], RouterState, "url", null);
    RouterState = RouterState_1 = __decorate([
        State({
            name: 'router',
            defaults: {
                state: undefined,
                navigationId: undefined,
                trigger: 'none'
            }
        }),
        __metadata("design:paramtypes", [Store,
            Router,
            RouterStateSerializer,
            NgZone,
            UrlSerializer,
            LocationStrategy,
            Location])
    ], RouterState);
    return RouterState;
}());
if (false) {
    /**
     * Determines how navigation was performed by the `RouterState` itself
     * or outside via `new Navigate(...)`
     * @type {?}
     * @private
     */
    RouterState.prototype._trigger;
    /**
     * That's the serialized state from the `Router` class
     * @type {?}
     * @private
     */
    RouterState.prototype._routerState;
    /**
     * That's the value of the `RouterState` state
     * @type {?}
     * @private
     */
    RouterState.prototype._storeState;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._lastRoutesRecognized;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._store;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._router;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._serializer;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._urlSerializer;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._locationStrategy;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._location;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsRouterPluginModule = /** @class */ (function () {
    function NgxsRouterPluginModule() {
    }
    /**
     * @return {?}
     */
    NgxsRouterPluginModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxsRouterPluginModule,
            providers: [{ provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer }]
        };
    };
    NgxsRouterPluginModule.decorators = [
        { type: NgModule, args: [{
                    imports: [NgxsModule.forFeature([RouterState])]
                },] }
    ];
    return NgxsRouterPluginModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DefaultRouterStateSerializer, Navigate, NgxsRouterPluginModule, RouterCancel, RouterDataResolved, RouterError, RouterNavigation, RouterState, RouterStateSerializer };
//# sourceMappingURL=ngxs-router-plugin.js.map
