{"version":3,"file":"ngxs-router-plugin.js","sources":["ng://@ngxs/router-plugin/src/router.actions.ts","ng://@ngxs/router-plugin/src/serializer.ts","ng://@ngxs/router-plugin/src/router.state.ts","ng://@ngxs/router-plugin/src/router.module.ts"],"sourcesContent":["import {\r\n  NavigationCancel,\r\n  NavigationError,\r\n  NavigationExtras,\r\n  Params,\r\n  RouterStateSnapshot,\r\n  RoutesRecognized,\r\n  ResolveEnd\r\n} from '@angular/router';\r\n\r\nimport { RouterTrigger } from './router.state';\r\n\r\n/**\r\n * Public event api of the router\r\n */\r\nexport class Navigate {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] Navigate';\r\n  }\r\n  constructor(\r\n    public path: any[],\r\n    public queryParams?: Params,\r\n    public extras?: NavigationExtras\r\n  ) {}\r\n}\r\n\r\n/**\r\n *\r\n * Angular Routers internal state events\r\n *\r\n */\r\n\r\n/**\r\n * An action dispatched when the router navigates.\r\n */\r\nexport class RouterNavigation<T = RouterStateSnapshot> {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] RouterNavigation';\r\n  }\r\n  constructor(\r\n    public routerState: T,\r\n    public event: RoutesRecognized,\r\n    public trigger: RouterTrigger = 'none'\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An action dispatched when the router cancel navigation.\r\n */\r\nexport class RouterCancel<T, V = RouterStateSnapshot> {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] RouterCancel';\r\n  }\r\n  constructor(\r\n    public routerState: V,\r\n    public storeState: T,\r\n    public event: NavigationCancel,\r\n    public trigger: RouterTrigger = 'none'\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An action dispatched when the router errors.\r\n */\r\nexport class RouterError<T, V = RouterStateSnapshot> {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] RouterError';\r\n  }\r\n  constructor(\r\n    public routerState: V,\r\n    public storeState: T,\r\n    public event: NavigationError,\r\n    public trigger: RouterTrigger = 'none'\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An action dispatched when the `ResolveEnd` event is triggered.\r\n */\r\nexport class RouterDataResolved<T = RouterStateSnapshot> {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] RouterDataResolved';\r\n  }\r\n  constructor(\r\n    public routerState: T,\r\n    public event: ResolveEnd,\r\n    public trigger: RouterTrigger = 'none'\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An union type of router actions.\r\n */\r\nexport type RouterAction<T, V = RouterStateSnapshot> =\r\n  | RouterNavigation<V>\r\n  | RouterCancel<T, V>\r\n  | RouterError<T, V>\r\n  | RouterDataResolved<V>;\r\n","import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nexport abstract class RouterStateSerializer<T> {\r\n  abstract serialize(routerState: RouterStateSnapshot): T;\r\n}\r\n\r\nexport interface SerializedRouterStateSnapshot {\r\n  root: ActivatedRouteSnapshot;\r\n  url: string;\r\n}\r\n\r\nexport class DefaultRouterStateSerializer\r\n  implements RouterStateSerializer<SerializedRouterStateSnapshot> {\r\n  serialize(routerState: RouterStateSnapshot): SerializedRouterStateSnapshot {\r\n    return {\r\n      root: this.serializeRoute(routerState.root),\r\n      url: routerState.url\r\n    };\r\n  }\r\n\r\n  private serializeRoute(route: ActivatedRouteSnapshot): ActivatedRouteSnapshot {\r\n    const children = route.children.map(c => this.serializeRoute(c));\r\n    return {\r\n      url: route.url,\r\n      params: route.params,\r\n      queryParams: route.queryParams,\r\n      fragment: route.fragment,\r\n      data: route.data,\r\n      outlet: route.outlet,\r\n      component: null,\r\n      routeConfig: null,\r\n      root: null as any,\r\n      parent: null,\r\n      firstChild: children[0],\r\n      children: children,\r\n      pathFromRoot: null as any,\r\n      paramMap: route.paramMap,\r\n      queryParamMap: route.queryParamMap,\r\n      toString: route.toString\r\n    };\r\n  }\r\n}\r\n","import { NgZone, Injectable } from '@angular/core';\r\nimport {\r\n  NavigationCancel,\r\n  NavigationError,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  RoutesRecognized,\r\n  ResolveEnd,\r\n  UrlSerializer,\r\n  NavigationStart,\r\n  NavigationEnd\r\n} from '@angular/router';\r\nimport { LocationStrategy, Location } from '@angular/common';\r\nimport { Action, Selector, State, StateContext, Store } from '@ngxs/store';\r\nimport { isAngularInTestMode } from '@ngxs/store/internals';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport {\r\n  Navigate,\r\n  RouterAction,\r\n  RouterCancel,\r\n  RouterError,\r\n  RouterNavigation,\r\n  RouterDataResolved\r\n} from './router.actions';\r\nimport { RouterStateSerializer } from './serializer';\r\n\r\nexport interface RouterStateModel<T = RouterStateSnapshot> {\r\n  state?: T;\r\n  navigationId?: number;\r\n  trigger: RouterTrigger;\r\n}\r\n\r\nexport type RouterTrigger = 'none' | 'router' | 'store';\r\n\r\n@State<RouterStateModel>({\r\n  name: 'router',\r\n  defaults: {\r\n    state: undefined,\r\n    navigationId: undefined,\r\n    trigger: 'none'\r\n  }\r\n})\r\n@Injectable()\r\nexport class RouterState {\r\n  /**\r\n   * Determines how navigation was performed by the `RouterState` itself\r\n   * or outside via `new Navigate(...)`\r\n   */\r\n  private _trigger: RouterTrigger = 'none';\r\n\r\n  /**\r\n   * That's the serialized state from the `Router` class\r\n   */\r\n  private _routerState: RouterStateSnapshot | null = null;\r\n\r\n  /**\r\n   * That's the value of the `RouterState` state\r\n   */\r\n  private _storeState: RouterStateModel | null = null;\r\n\r\n  private _lastRoutesRecognized: RoutesRecognized = null!;\r\n\r\n  @Selector()\r\n  static state<T = RouterStateSnapshot>(state: RouterStateModel<T>) {\r\n    return state && state.state;\r\n  }\r\n\r\n  @Selector()\r\n  static url(state: RouterStateModel): string | undefined {\r\n    return state && state.state && state.state.url;\r\n  }\r\n\r\n  constructor(\r\n    private _store: Store,\r\n    private _router: Router,\r\n    private _serializer: RouterStateSerializer<RouterStateSnapshot>,\r\n    private _ngZone: NgZone,\r\n    private _urlSerializer: UrlSerializer,\r\n    private _locationStrategy: LocationStrategy,\r\n    private _location: Location\r\n  ) {\r\n    this.setUpStoreListener();\r\n    this.setUpRouterEventsListener();\r\n    this.checkInitialNavigationOnce();\r\n  }\r\n\r\n  @Action(Navigate)\r\n  navigate(_: StateContext<RouterStateModel>, action: Navigate) {\r\n    return this._ngZone.run(() =>\r\n      this._router.navigate(action.path, {\r\n        queryParams: action.queryParams,\r\n        ...action.extras\r\n      })\r\n    );\r\n  }\r\n\r\n  @Action([RouterNavigation, RouterError, RouterCancel, RouterDataResolved])\r\n  angularRouterAction(\r\n    ctx: StateContext<RouterStateModel>,\r\n    action: RouterAction<RouterStateModel, RouterStateSnapshot>\r\n  ): void {\r\n    ctx.setState({\r\n      ...ctx.getState(),\r\n      trigger: action.trigger,\r\n      state: action.routerState,\r\n      navigationId: action.event.id\r\n    });\r\n  }\r\n\r\n  private setUpStoreListener(): void {\r\n    this._store.select(RouterState).subscribe((state: RouterStateModel | undefined) => {\r\n      this.navigateIfNeeded(state);\r\n    });\r\n  }\r\n\r\n  private setUpRouterEventsListener(): void {\r\n    this._router.events.subscribe(event => {\r\n      if (event instanceof NavigationStart) {\r\n        this.navigationStart();\r\n      } else if (event instanceof RoutesRecognized) {\r\n        this._lastRoutesRecognized = event;\r\n      } else if (event instanceof ResolveEnd) {\r\n        this.dispatchRouterDataResolved(event);\r\n      } else if (event instanceof NavigationCancel) {\r\n        this.dispatchRouterCancel(event);\r\n        this.reset();\r\n      } else if (event instanceof NavigationError) {\r\n        this.dispatchRouterError(event);\r\n        this.reset();\r\n      } else if (event instanceof NavigationEnd) {\r\n        this.navigationEnd();\r\n        this.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  private navigationStart(): void {\r\n    this._routerState = this._serializer.serialize(this._router.routerState.snapshot);\r\n\r\n    if (this._trigger !== 'none') {\r\n      this._storeState = this._store.selectSnapshot(RouterState);\r\n    }\r\n  }\r\n\r\n  private navigationEnd(): void {\r\n    if (this.shouldDispatchRouterNavigation()) {\r\n      this.dispatchRouterNavigation();\r\n    }\r\n  }\r\n\r\n  private shouldDispatchRouterNavigation(): boolean {\r\n    if (!this._storeState) return true;\r\n    return this._trigger !== 'store';\r\n  }\r\n\r\n  private navigateIfNeeded(state: RouterStateModel | undefined): void {\r\n    const canSkipNavigation =\r\n      !this._storeState ||\r\n      !this._storeState.state ||\r\n      !state ||\r\n      state.trigger === 'router' ||\r\n      this._router.url === this._storeState.state.url;\r\n\r\n    if (canSkipNavigation) {\r\n      return;\r\n    }\r\n\r\n    this._trigger = 'store';\r\n    this._ngZone.run(() => {\r\n      this._router.navigateByUrl(this._storeState!.state!.url);\r\n    });\r\n  }\r\n\r\n  private dispatchRouterNavigation(): void {\r\n    const nextRouterState = this._serializer.serialize(this._lastRoutesRecognized.state);\r\n\r\n    this.dispatchRouterAction(\r\n      new RouterNavigation(\r\n        nextRouterState,\r\n        new RoutesRecognized(\r\n          this._lastRoutesRecognized.id,\r\n          this._lastRoutesRecognized.url,\r\n          this._lastRoutesRecognized.urlAfterRedirects,\r\n          nextRouterState\r\n        ),\r\n        this._trigger\r\n      )\r\n    );\r\n  }\r\n\r\n  private dispatchRouterCancel(event: NavigationCancel): void {\r\n    this.dispatchRouterAction(\r\n      new RouterCancel(this._routerState!, this._storeState, event, this._trigger)\r\n    );\r\n  }\r\n\r\n  private dispatchRouterError(event: NavigationError): void {\r\n    this.dispatchRouterAction(\r\n      new RouterError(\r\n        this._routerState!,\r\n        this._storeState,\r\n        new NavigationError(event.id, event.url, `${event}`),\r\n        this._trigger\r\n      )\r\n    );\r\n  }\r\n\r\n  private dispatchRouterAction<T>(action: RouterAction<T>): void {\r\n    this._trigger = 'router';\r\n\r\n    try {\r\n      this._store.dispatch(action);\r\n    } finally {\r\n      this._trigger = 'none';\r\n    }\r\n  }\r\n\r\n  private dispatchRouterDataResolved(event: ResolveEnd): void {\r\n    const routerState = this._serializer.serialize(event.state);\r\n    this.dispatchRouterAction(new RouterDataResolved(routerState, event, this._trigger));\r\n  }\r\n\r\n  private reset(): void {\r\n    this._trigger = 'none';\r\n    this._storeState = null;\r\n    this._routerState = null;\r\n  }\r\n\r\n  /**\r\n   * No sense to mess up the `setUpRouterEventsListener` method as we have\r\n   * to perform this check only once and unsubscribe after the first event\r\n   * is triggered\r\n   */\r\n  private checkInitialNavigationOnce(): void {\r\n    if (isAngularInTestMode()) {\r\n      return;\r\n    }\r\n\r\n    this._router.events\r\n      .pipe(first((event): event is RoutesRecognized => event instanceof RoutesRecognized))\r\n      .subscribe(({ url }) => {\r\n        // `location.pathname` always equals manually entered URL in the address bar\r\n        // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized\r\n        // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the\r\n        // `RouterNavigation` action will be dispatched and the user will be redirected to the\r\n        // previously saved URL. We want to prevent such behavior, so we perform this check\r\n\r\n        // `url` is a recognized URL by the Angular's router, while `currentUrl` is an actual URL\r\n        // entered in the browser's address bar\r\n        // `PathLocationStrategy.prototype.path()` returns a concatenation of\r\n        // `PlatformLocation.pathname` and normalized `PlatformLocation.search`.\r\n\r\n        // `Location.prototype.normalize` strips base href from the URL,\r\n        // if `baseHref` (declared in angular.json) for example is `/en`\r\n        // and the URL is `/test#anchor` - then `_locationStrategy.path(true)` will return `/en/test#anchor`,\r\n        // but `/en/test#anchor` is not known to the Angular's router, so we have to strip `/en`\r\n        // from the URL\r\n        const currentUrl = this._location.normalize(this._locationStrategy.path(true));\r\n        const currentUrlTree = this._urlSerializer.parse(currentUrl);\r\n        // We need to serialize the URL because in that example `/test/?redirect=https://google.com/`\r\n        // Angular will recognize it as `/test?redirect=https:%2F%2Fwww.google.com%2F`\r\n        // so we have to run the `currentUrl` via the `UrlSerializer` that will encode characters\r\n        const currentSerializedUrl = this._urlSerializer.serialize(currentUrlTree);\r\n\r\n        // If URLs differ from each other - we've got to perform a redirect to the manually entered URL\r\n        // in the address bar, as it must have a priority\r\n        if (currentSerializedUrl !== url) {\r\n          this._router.navigateByUrl(currentUrl);\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { NgxsModule } from '@ngxs/store';\r\n\r\nimport { RouterState } from './router.state';\r\nimport { DefaultRouterStateSerializer, RouterStateSerializer } from './serializer';\r\n\r\n@NgModule({\r\n  imports: [NgxsModule.forFeature([RouterState])]\r\n})\r\nexport class NgxsRouterPluginModule {\r\n  static forRoot(): ModuleWithProviders<NgxsRouterPluginModule> {\r\n    return {\r\n      ngModule: NgxsRouterPluginModule,\r\n      providers: [{ provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer }]\r\n    };\r\n  }\r\n}\r\n"],"names":["tslib_1.__decorate"],"mappings":"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"}