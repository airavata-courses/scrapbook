{"version":3,"file":"ngxs-storage-plugin.js","sources":["ng://@ngxs/storage-plugin/src/symbols.ts","ng://@ngxs/storage-plugin/src/internals.ts","ng://@ngxs/storage-plugin/src/storage.plugin.ts","ng://@ngxs/storage-plugin/src/storage.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nimport { StorageKey } from './internals';\r\n\r\nexport const enum StorageOption {\r\n  LocalStorage,\r\n  SessionStorage\r\n}\r\n\r\nexport interface NgxsStoragePluginOptions {\r\n  /**\r\n   * Key for the state slice to store in the storage engine.\r\n   */\r\n  key?: undefined | StorageKey;\r\n\r\n  /**\r\n   * Storage engine to use. Deaults to localStorage but can provide\r\n   *\r\n   * sessionStorage or custom implementation of the StorageEngine interface\r\n   */\r\n  storage?: StorageOption;\r\n\r\n  /**\r\n   * Migration strategies.\r\n   */\r\n  migrations?: {\r\n    /**\r\n     * Version to key off.\r\n     */\r\n    version: number | string;\r\n\r\n    /**\r\n     * Method to migrate the previous state.\r\n     */\r\n    migrate: (state: any) => any;\r\n\r\n    /**\r\n     * Key to migrate.\r\n     */\r\n    key?: string;\r\n\r\n    /**\r\n     * Key for the version. Defaults to 'version'.\r\n     */\r\n    versionKey?: string;\r\n  }[];\r\n\r\n  /**\r\n   * Serailizer for the object before its pushed into the engine.\r\n   */\r\n  serialize?(obj: any): string;\r\n\r\n  /**\r\n   * Deserializer for the object before its pulled out of the engine.\r\n   */\r\n  deserialize?(obj: any): any;\r\n\r\n  /**\r\n   * Method to alter object before serialization.\r\n   */\r\n  beforeSerialize?(obj: any, key: string): any;\r\n\r\n  /**\r\n   * Method to alter object after deserialization.\r\n   */\r\n  afterDeserialize?(obj: any, key: string): any;\r\n}\r\n\r\nexport const NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken('NGXS_STORAGE_PLUGIN_OPTION');\r\n\r\nexport const STORAGE_ENGINE = new InjectionToken('STORAGE_ENGINE');\r\n\r\nexport interface StorageEngine {\r\n  readonly length: number;\r\n  getItem(key: string): any;\r\n  setItem(key: string, val: any): void;\r\n  removeItem(key: string): void;\r\n  clear(): void;\r\n}\r\n","import { isPlatformServer } from '@angular/common';\r\nimport { StateClass } from '@ngxs/store/internals';\r\nimport { StateToken } from '@ngxs/store';\r\n\r\nimport { StorageOption, StorageEngine, NgxsStoragePluginOptions } from './symbols';\r\n\r\n/**\r\n * If the `key` option is not provided then the below constant\r\n * will be used as a default key\r\n */\r\nexport const DEFAULT_STATE_KEY = '@@STATE';\r\n\r\n/**\r\n * Internal type definition for the `key` option provided\r\n * in the `forRoot` method when importing module\r\n */\r\nexport type StorageKey =\r\n  | string\r\n  | StateClass\r\n  | StateToken<any>\r\n  | (string | StateClass | StateToken<any>)[];\r\n\r\n/**\r\n * This key is used to retrieve static metadatas on state classes.\r\n * This constant is taken from the core codebase\r\n */\r\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\n\r\nfunction transformKeyOption(key: StorageKey): string[] {\r\n  if (!Array.isArray(key)) {\r\n    key = [key];\r\n  }\r\n\r\n  return key.map((token: string | StateClass | StateToken<any>) => {\r\n    // If it has the `NGXS_OPTIONS_META` key then it means the developer\r\n    // has provided state class like `key: [AuthState]`.\r\n    if (token.hasOwnProperty(META_OPTIONS_KEY)) {\r\n      // The `name` property will be an actual state name or a `StateToken`.\r\n      token = (token as any)[META_OPTIONS_KEY].name;\r\n    }\r\n\r\n    return token instanceof StateToken ? token.getName() : (token as string);\r\n  });\r\n}\r\n\r\nexport function storageOptionsFactory(\r\n  options: NgxsStoragePluginOptions | undefined\r\n): NgxsStoragePluginOptions {\r\n  if (options !== undefined && options.key) {\r\n    options.key = transformKeyOption(options.key);\r\n  }\r\n\r\n  return {\r\n    key: [DEFAULT_STATE_KEY],\r\n    storage: StorageOption.LocalStorage,\r\n    serialize: JSON.stringify,\r\n    deserialize: JSON.parse,\r\n    beforeSerialize: obj => obj,\r\n    afterDeserialize: obj => obj,\r\n    ...options\r\n  };\r\n}\r\n\r\nexport function engineFactory(\r\n  options: NgxsStoragePluginOptions,\r\n  platformId: string\r\n): StorageEngine | null {\r\n  if (isPlatformServer(platformId)) {\r\n    return null;\r\n  }\r\n\r\n  if (options.storage === StorageOption.LocalStorage) {\r\n    return localStorage;\r\n  } else if (options.storage === StorageOption.SessionStorage) {\r\n    return sessionStorage;\r\n  }\r\n\r\n  return null;\r\n}\r\n","import { PLATFORM_ID, Inject, Injectable } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport {\r\n  NgxsPlugin,\r\n  setValue,\r\n  getValue,\r\n  InitState,\r\n  UpdateState,\r\n  actionMatcher,\r\n  NgxsNextPluginFn\r\n} from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport {\r\n  StorageEngine,\r\n  NgxsStoragePluginOptions,\r\n  STORAGE_ENGINE,\r\n  NGXS_STORAGE_PLUGIN_OPTIONS\r\n} from './symbols';\r\nimport { DEFAULT_STATE_KEY } from './internals';\r\n\r\n@Injectable()\r\nexport class NgxsStoragePlugin implements NgxsPlugin {\r\n  constructor(\r\n    @Inject(NGXS_STORAGE_PLUGIN_OPTIONS) private _options: NgxsStoragePluginOptions,\r\n    @Inject(STORAGE_ENGINE) private _engine: StorageEngine,\r\n    @Inject(PLATFORM_ID) private _platformId: string\r\n  ) {}\r\n\r\n  handle(state: any, event: any, next: NgxsNextPluginFn) {\r\n    if (isPlatformServer(this._platformId) && this._engine === null) {\r\n      return next(state, event);\r\n    }\r\n\r\n    // We cast to `string[]` here as we're sure that this option has been\r\n    // transformed by the `storageOptionsFactory` function that provided token\r\n    const keys = this._options.key as string[];\r\n    const matches = actionMatcher(event);\r\n    const isInitAction = matches(InitState) || matches(UpdateState);\r\n    let hasMigration = false;\r\n\r\n    if (isInitAction) {\r\n      for (const key of keys) {\r\n        const isMaster = key === DEFAULT_STATE_KEY;\r\n        let val: any = this._engine.getItem(key!);\r\n\r\n        if (val !== 'undefined' && typeof val !== 'undefined' && val !== null) {\r\n          try {\r\n            const newVal = this._options.deserialize!(val);\r\n            val = this._options.afterDeserialize!(newVal, key);\r\n          } catch (e) {\r\n            console.error(\r\n              'Error ocurred while deserializing the store value, falling back to empty object.'\r\n            );\r\n            val = {};\r\n          }\r\n\r\n          if (this._options.migrations) {\r\n            this._options.migrations.forEach(strategy => {\r\n              const versionMatch =\r\n                strategy.version === getValue(val, strategy.versionKey || 'version');\r\n              const keyMatch = (!strategy.key && isMaster) || strategy.key === key;\r\n              if (versionMatch && keyMatch) {\r\n                val = strategy.migrate(val);\r\n                hasMigration = true;\r\n              }\r\n            });\r\n          }\r\n\r\n          if (!isMaster) {\r\n            state = setValue(state, key!, val);\r\n          } else {\r\n            state = { ...state, ...val };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return next(state, event).pipe(\r\n      tap(nextState => {\r\n        if (!isInitAction || (isInitAction && hasMigration)) {\r\n          for (const key of keys) {\r\n            let val = nextState;\r\n\r\n            if (key !== DEFAULT_STATE_KEY) {\r\n              val = getValue(nextState, key!);\r\n            }\r\n\r\n            try {\r\n              const newVal = this._options.beforeSerialize!(val, key);\r\n              this._engine.setItem(key!, this._options.serialize!(newVal));\r\n            } catch (e) {\r\n              console.error(\r\n                'Error ocurred while serializing the store value, value not updated.'\r\n              );\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders, PLATFORM_ID, InjectionToken } from '@angular/core';\r\nimport { NGXS_PLUGINS } from '@ngxs/store';\r\n\r\nimport {\r\n  NgxsStoragePluginOptions,\r\n  STORAGE_ENGINE,\r\n  NGXS_STORAGE_PLUGIN_OPTIONS\r\n} from './symbols';\r\nimport { NgxsStoragePlugin } from './storage.plugin';\r\nimport { storageOptionsFactory, engineFactory } from './internals';\r\n\r\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\r\n\r\n@NgModule()\r\nexport class NgxsStoragePluginModule {\r\n  static forRoot(\r\n    options?: NgxsStoragePluginOptions\r\n  ): ModuleWithProviders<NgxsStoragePluginModule> {\r\n    return {\r\n      ngModule: NgxsStoragePluginModule,\r\n      providers: [\r\n        {\r\n          provide: NGXS_PLUGINS,\r\n          useClass: NgxsStoragePlugin,\r\n          multi: true\r\n        },\r\n        {\r\n          provide: USER_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NGXS_STORAGE_PLUGIN_OPTIONS,\r\n          useFactory: storageOptionsFactory,\r\n          deps: [USER_OPTIONS]\r\n        },\r\n        {\r\n          provide: STORAGE_ENGINE,\r\n          useFactory: engineFactory,\r\n          deps: [NGXS_STORAGE_PLUGIN_OPTIONS, PLATFORM_ID]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}