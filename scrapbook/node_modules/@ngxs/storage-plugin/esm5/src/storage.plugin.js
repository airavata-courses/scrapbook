/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { PLATFORM_ID, Inject, Injectable } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { setValue, getValue, InitState, UpdateState, actionMatcher } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { STORAGE_ENGINE, NGXS_STORAGE_PLUGIN_OPTIONS } from './symbols';
import { DEFAULT_STATE_KEY } from './internals';
var NgxsStoragePlugin = /** @class */ (function () {
    function NgxsStoragePlugin(_options, _engine, _platformId) {
        this._options = _options;
        this._engine = _engine;
        this._platformId = _platformId;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsStoragePlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        var _this = this;
        var e_1, _a;
        if (isPlatformServer(this._platformId) && this._engine === null) {
            return next(state, event);
        }
        // We cast to `string[]` here as we're sure that this option has been
        // transformed by the `storageOptionsFactory` function that provided token
        /** @type {?} */
        var keys = (/** @type {?} */ (this._options.key));
        /** @type {?} */
        var matches = actionMatcher(event);
        /** @type {?} */
        var isInitAction = matches(InitState) || matches(UpdateState);
        /** @type {?} */
        var hasMigration = false;
        if (isInitAction) {
            var _loop_1 = function (key) {
                /** @type {?} */
                var isMaster = key === DEFAULT_STATE_KEY;
                /** @type {?} */
                var val = this_1._engine.getItem((/** @type {?} */ (key)));
                if (val !== 'undefined' && typeof val !== 'undefined' && val !== null) {
                    try {
                        /** @type {?} */
                        var newVal = (/** @type {?} */ (this_1._options.deserialize))(val);
                        val = (/** @type {?} */ (this_1._options.afterDeserialize))(newVal, key);
                    }
                    catch (e) {
                        console.error('Error ocurred while deserializing the store value, falling back to empty object.');
                        val = {};
                    }
                    if (this_1._options.migrations) {
                        this_1._options.migrations.forEach((/**
                         * @param {?} strategy
                         * @return {?}
                         */
                        function (strategy) {
                            /** @type {?} */
                            var versionMatch = strategy.version === getValue(val, strategy.versionKey || 'version');
                            /** @type {?} */
                            var keyMatch = (!strategy.key && isMaster) || strategy.key === key;
                            if (versionMatch && keyMatch) {
                                val = strategy.migrate(val);
                                hasMigration = true;
                            }
                        }));
                    }
                    if (!isMaster) {
                        state = setValue(state, (/** @type {?} */ (key)), val);
                    }
                    else {
                        state = tslib_1.__assign({}, state, val);
                    }
                }
            };
            var this_1 = this;
            try {
                for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    _loop_1(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return next(state, event).pipe(tap((/**
         * @param {?} nextState
         * @return {?}
         */
        function (nextState) {
            var e_2, _a;
            if (!isInitAction || (isInitAction && hasMigration)) {
                try {
                    for (var keys_2 = tslib_1.__values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                        var key = keys_2_1.value;
                        /** @type {?} */
                        var val = nextState;
                        if (key !== DEFAULT_STATE_KEY) {
                            val = getValue(nextState, (/** @type {?} */ (key)));
                        }
                        try {
                            /** @type {?} */
                            var newVal = (/** @type {?} */ (_this._options.beforeSerialize))(val, key);
                            _this._engine.setItem((/** @type {?} */ (key)), (/** @type {?} */ (_this._options.serialize))(newVal));
                        }
                        catch (e) {
                            console.error('Error ocurred while serializing the store value, value not updated.');
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (keys_2_1 && !keys_2_1.done && (_a = keys_2.return)) _a.call(keys_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        })));
    };
    NgxsStoragePlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsStoragePlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_STORAGE_PLUGIN_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [STORAGE_ENGINE,] }] },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return NgxsStoragePlugin;
}());
export { NgxsStoragePlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._engine;
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5wbHVnaW4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yYWdlLXBsdWdpbi8iLCJzb3VyY2VzIjpbInNyYy9zdG9yYWdlLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBRUwsUUFBUSxFQUNSLFFBQVEsRUFDUixTQUFTLEVBQ1QsV0FBVyxFQUNYLGFBQWEsRUFFZCxNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUdMLGNBQWMsRUFDZCwyQkFBMkIsRUFDNUIsTUFBTSxXQUFXLENBQUM7QUFDbkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWhEO0lBRUUsMkJBQytDLFFBQWtDLEVBQy9DLE9BQXNCLEVBQ3pCLFdBQW1CO1FBRkgsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDL0MsWUFBTyxHQUFQLE9BQU8sQ0FBZTtRQUN6QixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtJQUMvQyxDQUFDOzs7Ozs7O0lBRUosa0NBQU07Ozs7OztJQUFOLFVBQU8sS0FBVSxFQUFFLEtBQVUsRUFBRSxJQUFzQjtRQUFyRCxpQkF1RUM7O1FBdEVDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQy9ELE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQjs7OztZQUlLLElBQUksR0FBRyxtQkFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBWTs7WUFDcEMsT0FBTyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENB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LE9BQU8sQ0FBQyxFQUFFOzRCQUNWLE9BQU8sQ0FBQyxLQUFLLENBQ1gscUVBQXFFLENBQ3RFLENBQUM7eUJBQ0g7cUJBQ0Y7Ozs7Ozs7OzthQUNGO1FBQ0gsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7O2dCQS9FRixVQUFVOzs7O2dEQUdOLE1BQU0sU0FBQywyQkFBMkI7Z0RBQ2xDLE1BQU0sU0FBQyxjQUFjOzZDQUNyQixNQUFNLFNBQUMsV0FBVzs7SUEyRXZCLHdCQUFDO0NBQUEsQUFoRkQsSUFnRkM7U0EvRVksaUJBQWlCOzs7Ozs7SUFFMUIscUNBQStFOzs7OztJQUMvRSxvQ0FBc0Q7Ozs7O0lBQ3RELHdDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7XHJcbiAgTmd4c1BsdWdpbixcclxuICBzZXRWYWx1ZSxcclxuICBnZXRWYWx1ZSxcclxuICBJbml0U3RhdGUsXHJcbiAgVXBkYXRlU3RhdGUsXHJcbiAgYWN0aW9uTWF0Y2hlcixcclxuICBOZ3hzTmV4dFBsdWdpbkZuXHJcbn0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQge1xyXG4gIFN0b3JhZ2VFbmdpbmUsXHJcbiAgTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zLFxyXG4gIFNUT1JBR0VfRU5HSU5FLFxyXG4gIE5HWFNfU1RPUkFHRV9QTFVHSU5fT1BUSU9OU1xyXG59IGZyb20gJy4vc3ltYm9scyc7XHJcbmltcG9ydCB7IERFRkFVTFRfU1RBVEVfS0VZIH0gZnJvbSAnLi9pbnRlcm5hbHMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c1N0b3JhZ2VQbHVnaW4gaW1wbGVtZW50cyBOZ3hzUGx1Z2luIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoTkdYU19TVE9SQUdFX1BMVUdJTl9PUFRJT05TKSBwcml2YXRlIF9vcHRpb25zOiBOZ3hzU3RvcmFnZVBsdWdpbk9wdGlvbnMsXHJcbiAgICBASW5qZWN0KFNUT1JBR0VfRU5HSU5FKSBwcml2YXRlIF9lbmdpbmU6IFN0b3JhZ2VFbmdpbmUsXHJcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIF9wbGF0Zm9ybUlkOiBzdHJpbmdcclxuICApIHt9XHJcblxyXG4gIGhhbmRsZShzdGF0ZTogYW55LCBldmVudDogYW55LCBuZXh0OiBOZ3hzTmV4dFBsdWdpbkZuKSB7XHJcbiAgICBpZiAoaXNQbGF0Zm9ybVNlcnZlcih0aGlzLl9wbGF0Zm9ybUlkKSAmJiB0aGlzLl9lbmdpbmUgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIG5leHQoc3RhdGUsIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBXZSBjYXN0IHRvIGBzdHJpbmdbXWAgaGVyZSBhcyB3ZSdyZSBzdXJlIHRoYXQgdGhpcyBvcHRpb24gaGFzIGJlZW5cclxuICAgIC8vIHRyYW5zZm9ybWVkIGJ5IHRoZSBgc3RvcmFnZU9wdGlvbnNGYWN0b3J5YCBmdW5jdGlvbiB0aGF0IHByb3ZpZGVkIHRva2VuXHJcbiAgICBjb25zdCBrZXlzID0gdGhpcy5fb3B0aW9ucy5rZXkgYXMgc3RyaW5nW107XHJcbiAgICBjb25zdCBtYXRjaGVzID0gYWN0aW9uTWF0Y2hlcihldmVudCk7XHJcbiAgICBjb25zdCBpc0luaXRBY3Rpb24gPSBtYXRjaGVzKEluaXRTdGF0ZSkgfHwgbWF0Y2hlcyhVcGRhdGVTdGF0ZSk7XHJcbiAgICBsZXQgaGFzTWlncmF0aW9uID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKGlzSW5pdEFjdGlvbikge1xyXG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgY29uc3QgaXNNYXN0ZXIgPSBrZXkgPT09IERFRkFVTFRfU1RBVEVfS0VZO1xyXG4gICAgICAgIGxldCB2YWw6IGFueSA9IHRoaXMuX2VuZ2luZS5nZXRJdGVtKGtleSEpO1xyXG5cclxuICAgICAgICBpZiAodmFsICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdmFsICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgIT09IG51bGwpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbCA9IHRoaXMuX29wdGlvbnMuZGVzZXJpYWxpemUhKHZhbCk7XHJcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuX29wdGlvbnMuYWZ0ZXJEZXNlcmlhbGl6ZSEobmV3VmFsLCBrZXkpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICAgICdFcnJvciBvY3VycmVkIHdoaWxlIGRlc2VyaWFsaXppbmcgdGhlIHN0b3JlIHZhbHVlLCBmYWxsaW5nIGJhY2sgdG8gZW1wdHkgb2JqZWN0LidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdmFsID0ge307XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMubWlncmF0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLm1pZ3JhdGlvbnMuZm9yRWFjaChzdHJhdGVneSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgdmVyc2lvbk1hdGNoID1cclxuICAgICAgICAgICAgICAgIHN0cmF0ZWd5LnZlcnNpb24gPT09IGdldFZhbHVlKHZhbCwgc3RyYXRlZ3kudmVyc2lvbktleSB8fCAndmVyc2lvbicpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGtleU1hdGNoID0gKCFzdHJhdGVneS5rZXkgJiYgaXNNYXN0ZXIpIHx8IHN0cmF0ZWd5LmtleSA9PT0ga2V5O1xyXG4gICAgICAgICAgICAgIGlmICh2ZXJzaW9uTWF0Y2ggJiYga2V5TWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIHZhbCA9IHN0cmF0ZWd5Lm1pZ3JhdGUodmFsKTtcclxuICAgICAgICAgICAgICAgIGhhc01pZ3JhdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoIWlzTWFzdGVyKSB7XHJcbiAgICAgICAgICAgIHN0YXRlID0gc2V0VmFsdWUoc3RhdGUsIGtleSEsIHZhbCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGF0ZSA9IHsgLi4uc3RhdGUsIC4uLnZhbCB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0KHN0YXRlLCBldmVudCkucGlwZShcclxuICAgICAgdGFwKG5leHRTdGF0ZSA9PiB7XHJcbiAgICAgICAgaWYgKCFpc0luaXRBY3Rpb24gfHwgKGlzSW5pdEFjdGlvbiAmJiBoYXNNaWdyYXRpb24pKSB7XHJcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWwgPSBuZXh0U3RhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoa2V5ICE9PSBERUZBVUxUX1NUQVRFX0tFWSkge1xyXG4gICAgICAgICAgICAgIHZhbCA9IGdldFZhbHVlKG5leHRTdGF0ZSwga2V5ISk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbmV3VmFsID0gdGhpcy5fb3B0aW9ucy5iZWZvcmVTZXJpYWxpemUhKHZhbCwga2V5KTtcclxuICAgICAgICAgICAgICB0aGlzLl9lbmdpbmUuc2V0SXRlbShrZXkhLCB0aGlzLl9vcHRpb25zLnNlcmlhbGl6ZSEobmV3VmFsKSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICAgICAgJ0Vycm9yIG9jdXJyZWQgd2hpbGUgc2VyaWFsaXppbmcgdGhlIHN0b3JlIHZhbHVlLCB2YWx1ZSBub3QgdXBkYXRlZC4nXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==