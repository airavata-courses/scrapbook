/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isPlatformServer } from '@angular/common';
import { StateToken } from '@ngxs/store';
/**
 * If the `key` option is not provided then the below constant
 * will be used as a default key
 * @type {?}
 */
export var DEFAULT_STATE_KEY = '@@STATE';
/**
 * This key is used to retrieve static metadatas on state classes.
 * This constant is taken from the core codebase
 * @type {?}
 */
var META_OPTIONS_KEY = 'NGXS_OPTIONS_META';
/**
 * @param {?} key
 * @return {?}
 */
function transformKeyOption(key) {
    if (!Array.isArray(key)) {
        key = [key];
    }
    return key.map((/**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        // If it has the `NGXS_OPTIONS_META` key then it means the developer
        // has provided state class like `key: [AuthState]`.
        if (token.hasOwnProperty(META_OPTIONS_KEY)) {
            // The `name` property will be an actual state name or a `StateToken`.
            token = ((/** @type {?} */ (token)))[META_OPTIONS_KEY].name;
        }
        return token instanceof StateToken ? token.getName() : ((/** @type {?} */ (token)));
    }));
}
/**
 * @param {?} options
 * @return {?}
 */
export function storageOptionsFactory(options) {
    if (options !== undefined && options.key) {
        options.key = transformKeyOption(options.key);
    }
    return tslib_1.__assign({ key: [DEFAULT_STATE_KEY], storage: 0 /* LocalStorage */, serialize: JSON.stringify, deserialize: JSON.parse, beforeSerialize: (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { return obj; }), afterDeserialize: (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { return obj; }) }, options);
}
/**
 * @param {?} options
 * @param {?} platformId
 * @return {?}
 */
export function engineFactory(options, platformId) {
    if (isPlatformServer(platformId)) {
        return null;
    }
    if (options.storage === 0 /* LocalStorage */) {
        return localStorage;
    }
    else if (options.storage === 1 /* SessionStorage */) {
        return sessionStorage;
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmFnZS1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7Ozs7O0FBUXpDLE1BQU0sS0FBTyxpQkFBaUIsR0FBRyxTQUFTOzs7Ozs7SUFnQnBDLGdCQUFnQixHQUFHLG1CQUFtQjs7Ozs7QUFFNUMsU0FBUyxrQkFBa0IsQ0FBQyxHQUFlO0lBQ3pDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2I7SUFFRCxPQUFPLEdBQUcsQ0FBQyxHQUFHOzs7O0lBQUMsVUFBQyxLQUE0QztRQUMxRCxvRUFBb0U7UUFDcEUsb0RBQW9EO1FBQ3BELElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQzFDLHNFQUFzRTtZQUN0RSxLQUFLLEdBQUcsQ0FBQyxtQkFBQSxLQUFLLEVBQU8sQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDO1NBQy9DO1FBRUQsT0FBTyxLQUFLLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQUEsS0FBSyxFQUFVLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUMsQ0FBQztBQUNMLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxPQUE2QztJQUU3QyxJQUFJLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtRQUN4QyxPQUFPLENBQUMsR0FBRyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMvQztJQUVELDBCQUNFLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQ3hCLE9BQU8sd0JBQ1AsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQ3pCLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUN2QixlQUFlOzs7O1FBQUUsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLEVBQUgsQ0FBRyxHQUMzQixnQkFBZ0I7Ozs7UUFBRSxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsRUFBSCxDQUFHLEtBQ3pCLE9BQU8sRUFDVjtBQUNKLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQzNCLE9BQWlDLEVBQ2pDLFVBQWtCO0lBRWxCLElBQUksZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDaEMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELElBQUksT0FBTyxDQUFDLE9BQU8seUJBQStCLEVBQUU7UUFDbEQsT0FBTyxZQUFZLENBQUM7S0FDckI7U0FBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLDJCQUFpQyxFQUFFO1FBQzNELE9BQU8sY0FBYyxDQUFDO0tBQ3ZCO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFN0YXRlQ2xhc3MgfSBmcm9tICdAbmd4cy9zdG9yZS9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBTdGF0ZVRva2VuIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5cclxuaW1wb3J0IHsgU3RvcmFnZU9wdGlvbiwgU3RvcmFnZUVuZ2luZSwgTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zIH0gZnJvbSAnLi9zeW1ib2xzJztcclxuXHJcbi8qKlxyXG4gKiBJZiB0aGUgYGtleWAgb3B0aW9uIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBiZWxvdyBjb25zdGFudFxyXG4gKiB3aWxsIGJlIHVzZWQgYXMgYSBkZWZhdWx0IGtleVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU1RBVEVfS0VZID0gJ0BAU1RBVEUnO1xyXG5cclxuLyoqXHJcbiAqIEludGVybmFsIHR5cGUgZGVmaW5pdGlvbiBmb3IgdGhlIGBrZXlgIG9wdGlvbiBwcm92aWRlZFxyXG4gKiBpbiB0aGUgYGZvclJvb3RgIG1ldGhvZCB3aGVuIGltcG9ydGluZyBtb2R1bGVcclxuICovXHJcbmV4cG9ydCB0eXBlIFN0b3JhZ2VLZXkgPVxyXG4gIHwgc3RyaW5nXHJcbiAgfCBTdGF0ZUNsYXNzXHJcbiAgfCBTdGF0ZVRva2VuPGFueT5cclxuICB8IChzdHJpbmcgfCBTdGF0ZUNsYXNzIHwgU3RhdGVUb2tlbjxhbnk+KVtdO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMga2V5IGlzIHVzZWQgdG8gcmV0cmlldmUgc3RhdGljIG1ldGFkYXRhcyBvbiBzdGF0ZSBjbGFzc2VzLlxyXG4gKiBUaGlzIGNvbnN0YW50IGlzIHRha2VuIGZyb20gdGhlIGNvcmUgY29kZWJhc2VcclxuICovXHJcbmNvbnN0IE1FVEFfT1BUSU9OU19LRVkgPSAnTkdYU19PUFRJT05TX01FVEEnO1xyXG5cclxuZnVuY3Rpb24gdHJhbnNmb3JtS2V5T3B0aW9uKGtleTogU3RvcmFnZUtleSk6IHN0cmluZ1tdIHtcclxuICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5KSkge1xyXG4gICAga2V5ID0gW2tleV07XHJcbiAgfVxyXG5cclxuICByZXR1cm4ga2V5Lm1hcCgodG9rZW46IHN0cmluZyB8IFN0YXRlQ2xhc3MgfCBTdGF0ZVRva2VuPGFueT4pID0+IHtcclxuICAgIC8vIElmIGl0IGhhcyB0aGUgYE5HWFNfT1BUSU9OU19NRVRBYCBrZXkgdGhlbiBpdCBtZWFucyB0aGUgZGV2ZWxvcGVyXHJcbiAgICAvLyBoYXMgcHJvdmlkZWQgc3RhdGUgY2xhc3MgbGlrZSBga2V5OiBbQXV0aFN0YXRlXWAuXHJcbiAgICBpZiAodG9rZW4uaGFzT3duUHJvcGVydHkoTUVUQV9PUFRJT05TX0tFWSkpIHtcclxuICAgICAgLy8gVGhlIGBuYW1lYCBwcm9wZXJ0eSB3aWxsIGJlIGFuIGFjdHVhbCBzdGF0ZSBuYW1lIG9yIGEgYFN0YXRlVG9rZW5gLlxyXG4gICAgICB0b2tlbiA9ICh0b2tlbiBhcyBhbnkpW01FVEFfT1BUSU9OU19LRVldLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRva2VuIGluc3RhbmNlb2YgU3RhdGVUb2tlbiA/IHRva2VuLmdldE5hbWUoKSA6ICh0b2tlbiBhcyBzdHJpbmcpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RvcmFnZU9wdGlvbnNGYWN0b3J5KFxyXG4gIG9wdGlvbnM6IE5neHNTdG9yYWdlUGx1Z2luT3B0aW9ucyB8IHVuZGVmaW5lZFxyXG4pOiBOZ3hzU3RvcmFnZVBsdWdpbk9wdGlvbnMge1xyXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5rZXkpIHtcclxuICAgIG9wdGlvbnMua2V5ID0gdHJhbnNmb3JtS2V5T3B0aW9uKG9wdGlvbnMua2V5KTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBrZXk6IFtERUZBVUxUX1NUQVRFX0tFWV0sXHJcbiAgICBzdG9yYWdlOiBTdG9yYWdlT3B0aW9uLkxvY2FsU3RvcmFnZSxcclxuICAgIHNlcmlhbGl6ZTogSlNPTi5zdHJpbmdpZnksXHJcbiAgICBkZXNlcmlhbGl6ZTogSlNPTi5wYXJzZSxcclxuICAgIGJlZm9yZVNlcmlhbGl6ZTogb2JqID0+IG9iaixcclxuICAgIGFmdGVyRGVzZXJpYWxpemU6IG9iaiA9PiBvYmosXHJcbiAgICAuLi5vcHRpb25zXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVuZ2luZUZhY3RvcnkoXHJcbiAgb3B0aW9uczogTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zLFxyXG4gIHBsYXRmb3JtSWQ6IHN0cmluZ1xyXG4pOiBTdG9yYWdlRW5naW5lIHwgbnVsbCB7XHJcbiAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIocGxhdGZvcm1JZCkpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9wdGlvbnMuc3RvcmFnZSA9PT0gU3RvcmFnZU9wdGlvbi5Mb2NhbFN0b3JhZ2UpIHtcclxuICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XHJcbiAgfSBlbHNlIGlmIChvcHRpb25zLnN0b3JhZ2UgPT09IFN0b3JhZ2VPcHRpb24uU2Vzc2lvblN0b3JhZ2UpIHtcclxuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBudWxsO1xyXG59XHJcbiJdfQ==