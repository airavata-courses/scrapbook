/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformServer } from '@angular/common';
import { StateToken } from '@ngxs/store';
/**
 * If the `key` option is not provided then the below constant
 * will be used as a default key
 * @type {?}
 */
export const DEFAULT_STATE_KEY = '@@STATE';
/**
 * This key is used to retrieve static metadatas on state classes.
 * This constant is taken from the core codebase
 * @type {?}
 */
const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';
/**
 * @param {?} key
 * @return {?}
 */
function transformKeyOption(key) {
    if (!Array.isArray(key)) {
        key = [key];
    }
    return key.map((/**
     * @param {?} token
     * @return {?}
     */
    (token) => {
        // If it has the `NGXS_OPTIONS_META` key then it means the developer
        // has provided state class like `key: [AuthState]`.
        if (token.hasOwnProperty(META_OPTIONS_KEY)) {
            // The `name` property will be an actual state name or a `StateToken`.
            token = ((/** @type {?} */ (token)))[META_OPTIONS_KEY].name;
        }
        return token instanceof StateToken ? token.getName() : ((/** @type {?} */ (token)));
    }));
}
/**
 * @param {?} options
 * @return {?}
 */
export function storageOptionsFactory(options) {
    if (options !== undefined && options.key) {
        options.key = transformKeyOption(options.key);
    }
    return Object.assign({ key: [DEFAULT_STATE_KEY], storage: 0 /* LocalStorage */, serialize: JSON.stringify, deserialize: JSON.parse, beforeSerialize: (/**
         * @param {?} obj
         * @return {?}
         */
        obj => obj), afterDeserialize: (/**
         * @param {?} obj
         * @return {?}
         */
        obj => obj) }, options);
}
/**
 * @param {?} options
 * @param {?} platformId
 * @return {?}
 */
export function engineFactory(options, platformId) {
    if (isPlatformServer(platformId)) {
        return null;
    }
    if (options.storage === 0 /* LocalStorage */) {
        return localStorage;
    }
    else if (options.storage === 1 /* SessionStorage */) {
        return sessionStorage;
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmFnZS1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvaW50ZXJuYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDOzs7Ozs7QUFRekMsTUFBTSxPQUFPLGlCQUFpQixHQUFHLFNBQVM7Ozs7OztNQWdCcEMsZ0JBQWdCLEdBQUcsbUJBQW1COzs7OztBQUU1QyxTQUFTLGtCQUFrQixDQUFDLEdBQWU7SUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdkIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDYjtJQUVELE9BQU8sR0FBRyxDQUFDLEdBQUc7Ozs7SUFBQyxDQUFDLEtBQTRDLEVBQUUsRUFBRTtRQUM5RCxvRUFBb0U7UUFDcEUsb0RBQW9EO1FBQ3BELElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQzFDLHNFQUFzRTtZQUN0RSxLQUFLLEdBQUcsQ0FBQyxtQkFBQSxLQUFLLEVBQU8sQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDO1NBQy9DO1FBRUQsT0FBTyxLQUFLLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQUEsS0FBSyxFQUFVLENBQUMsQ0FBQztJQUMzRSxDQUFDLEVBQUMsQ0FBQztBQUNMLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxPQUE2QztJQUU3QyxJQUFJLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtRQUN4QyxPQUFPLENBQUMsR0FBRyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMvQztJQUVELHVCQUNFLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQ3hCLE9BQU8sd0JBQ1AsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQ3pCLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUN2QixlQUFlOzs7O1FBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQzNCLGdCQUFnQjs7OztRQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUN6QixPQUFPLEVBQ1Y7QUFDSixDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUMzQixPQUFpQyxFQUNqQyxVQUFrQjtJQUVsQixJQUFJLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ2hDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLHlCQUErQixFQUFFO1FBQ2xELE9BQU8sWUFBWSxDQUFDO0tBQ3JCO1NBQU0sSUFBSSxPQUFPLENBQUMsT0FBTywyQkFBaUMsRUFBRTtRQUMzRCxPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBTdGF0ZUNsYXNzIH0gZnJvbSAnQG5neHMvc3RvcmUvaW50ZXJuYWxzJztcclxuaW1wb3J0IHsgU3RhdGVUb2tlbiB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcclxuXHJcbmltcG9ydCB7IFN0b3JhZ2VPcHRpb24sIFN0b3JhZ2VFbmdpbmUsIE5neHNTdG9yYWdlUGx1Z2luT3B0aW9ucyB9IGZyb20gJy4vc3ltYm9scyc7XHJcblxyXG4vKipcclxuICogSWYgdGhlIGBrZXlgIG9wdGlvbiBpcyBub3QgcHJvdmlkZWQgdGhlbiB0aGUgYmVsb3cgY29uc3RhbnRcclxuICogd2lsbCBiZSB1c2VkIGFzIGEgZGVmYXVsdCBrZXlcclxuICovXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NUQVRFX0tFWSA9ICdAQFNUQVRFJztcclxuXHJcbi8qKlxyXG4gKiBJbnRlcm5hbCB0eXBlIGRlZmluaXRpb24gZm9yIHRoZSBga2V5YCBvcHRpb24gcHJvdmlkZWRcclxuICogaW4gdGhlIGBmb3JSb290YCBtZXRob2Qgd2hlbiBpbXBvcnRpbmcgbW9kdWxlXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBTdG9yYWdlS2V5ID1cclxuICB8IHN0cmluZ1xyXG4gIHwgU3RhdGVDbGFzc1xyXG4gIHwgU3RhdGVUb2tlbjxhbnk+XHJcbiAgfCAoc3RyaW5nIHwgU3RhdGVDbGFzcyB8IFN0YXRlVG9rZW48YW55PilbXTtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGtleSBpcyB1c2VkIHRvIHJldHJpZXZlIHN0YXRpYyBtZXRhZGF0YXMgb24gc3RhdGUgY2xhc3Nlcy5cclxuICogVGhpcyBjb25zdGFudCBpcyB0YWtlbiBmcm9tIHRoZSBjb3JlIGNvZGViYXNlXHJcbiAqL1xyXG5jb25zdCBNRVRBX09QVElPTlNfS0VZID0gJ05HWFNfT1BUSU9OU19NRVRBJztcclxuXHJcbmZ1bmN0aW9uIHRyYW5zZm9ybUtleU9wdGlvbihrZXk6IFN0b3JhZ2VLZXkpOiBzdHJpbmdbXSB7XHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KGtleSkpIHtcclxuICAgIGtleSA9IFtrZXldO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGtleS5tYXAoKHRva2VuOiBzdHJpbmcgfCBTdGF0ZUNsYXNzIHwgU3RhdGVUb2tlbjxhbnk+KSA9PiB7XHJcbiAgICAvLyBJZiBpdCBoYXMgdGhlIGBOR1hTX09QVElPTlNfTUVUQWAga2V5IHRoZW4gaXQgbWVhbnMgdGhlIGRldmVsb3BlclxyXG4gICAgLy8gaGFzIHByb3ZpZGVkIHN0YXRlIGNsYXNzIGxpa2UgYGtleTogW0F1dGhTdGF0ZV1gLlxyXG4gICAgaWYgKHRva2VuLmhhc093blByb3BlcnR5KE1FVEFfT1BUSU9OU19LRVkpKSB7XHJcbiAgICAgIC8vIFRoZSBgbmFtZWAgcHJvcGVydHkgd2lsbCBiZSBhbiBhY3R1YWwgc3RhdGUgbmFtZSBvciBhIGBTdGF0ZVRva2VuYC5cclxuICAgICAgdG9rZW4gPSAodG9rZW4gYXMgYW55KVtNRVRBX09QVElPTlNfS0VZXS5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0b2tlbiBpbnN0YW5jZW9mIFN0YXRlVG9rZW4gPyB0b2tlbi5nZXROYW1lKCkgOiAodG9rZW4gYXMgc3RyaW5nKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JhZ2VPcHRpb25zRmFjdG9yeShcclxuICBvcHRpb25zOiBOZ3hzU3RvcmFnZVBsdWdpbk9wdGlvbnMgfCB1bmRlZmluZWRcclxuKTogTmd4c1N0b3JhZ2VQbHVnaW5PcHRpb25zIHtcclxuICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMua2V5KSB7XHJcbiAgICBvcHRpb25zLmtleSA9IHRyYW5zZm9ybUtleU9wdGlvbihvcHRpb25zLmtleSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAga2V5OiBbREVGQVVMVF9TVEFURV9LRVldLFxyXG4gICAgc3RvcmFnZTogU3RvcmFnZU9wdGlvbi5Mb2NhbFN0b3JhZ2UsXHJcbiAgICBzZXJpYWxpemU6IEpTT04uc3RyaW5naWZ5LFxyXG4gICAgZGVzZXJpYWxpemU6IEpTT04ucGFyc2UsXHJcbiAgICBiZWZvcmVTZXJpYWxpemU6IG9iaiA9PiBvYmosXHJcbiAgICBhZnRlckRlc2VyaWFsaXplOiBvYmogPT4gb2JqLFxyXG4gICAgLi4ub3B0aW9uc1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbmdpbmVGYWN0b3J5KFxyXG4gIG9wdGlvbnM6IE5neHNTdG9yYWdlUGx1Z2luT3B0aW9ucyxcclxuICBwbGF0Zm9ybUlkOiBzdHJpbmdcclxuKTogU3RvcmFnZUVuZ2luZSB8IG51bGwge1xyXG4gIGlmIChpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGlmIChvcHRpb25zLnN0b3JhZ2UgPT09IFN0b3JhZ2VPcHRpb24uTG9jYWxTdG9yYWdlKSB7XHJcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlO1xyXG4gIH0gZWxzZSBpZiAob3B0aW9ucy5zdG9yYWdlID09PSBTdG9yYWdlT3B0aW9uLlNlc3Npb25TdG9yYWdlKSB7XHJcbiAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbDtcclxufVxyXG4iXX0=