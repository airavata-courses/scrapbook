/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @enum {number} */
const StorageOption = {
    LocalStorage: 0,
    SessionStorage: 1,
};
export { StorageOption };
/**
 * @record
 */
export function NgxsStoragePluginOptions() { }
if (false) {
    /**
     * Key for the state slice to store in the storage engine.
     * @type {?|undefined}
     */
    NgxsStoragePluginOptions.prototype.key;
    /**
     * Storage engine to use. Deaults to localStorage but can provide
     *
     * sessionStorage or custom implementation of the StorageEngine interface
     * @type {?|undefined}
     */
    NgxsStoragePluginOptions.prototype.storage;
    /**
     * Migration strategies.
     * @type {?|undefined}
     */
    NgxsStoragePluginOptions.prototype.migrations;
    /**
     * Serailizer for the object before its pushed into the engine.
     * @param {?} obj
     * @return {?}
     */
    NgxsStoragePluginOptions.prototype.serialize = function (obj) { };
    /**
     * Deserializer for the object before its pulled out of the engine.
     * @param {?} obj
     * @return {?}
     */
    NgxsStoragePluginOptions.prototype.deserialize = function (obj) { };
    /**
     * Method to alter object before serialization.
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    NgxsStoragePluginOptions.prototype.beforeSerialize = function (obj, key) { };
    /**
     * Method to alter object after deserialization.
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    NgxsStoragePluginOptions.prototype.afterDeserialize = function (obj, key) { };
}
/** @type {?} */
export const NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken('NGXS_STORAGE_PLUGIN_OPTION');
/** @type {?} */
export const STORAGE_ENGINE = new InjectionToken('STORAGE_ENGINE');
/**
 * @record
 */
export function StorageEngine() { }
if (false) {
    /** @type {?} */
    StorageEngine.prototype.length;
    /**
     * @param {?} key
     * @return {?}
     */
    StorageEngine.prototype.getItem = function (key) { };
    /**
     * @param {?} key
     * @param {?} val
     * @return {?}
     */
    StorageEngine.prototype.setItem = function (key, val) { };
    /**
     * @param {?} key
     * @return {?}
     */
    StorageEngine.prototype.removeItem = function (key) { };
    /**
     * @return {?}
     */
    StorageEngine.prototype.clear = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JhZ2UtcGx1Z2luLyIsInNvdXJjZXMiOlsic3JjL3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7OztJQUs3QyxlQUFZO0lBQ1osaUJBQWM7Ozs7OztBQUdoQiw4Q0F5REM7Ozs7OztJQXJEQyx1Q0FBNkI7Ozs7Ozs7SUFPN0IsMkNBQXdCOzs7OztJQUt4Qiw4Q0FvQkk7Ozs7OztJQUtKLGtFQUE2Qjs7Ozs7O0lBSzdCLG9FQUE0Qjs7Ozs7OztJQUs1Qiw2RUFBNkM7Ozs7Ozs7SUFLN0MsOEVBQThDOzs7QUFHaEQsTUFBTSxPQUFPLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUFDLDRCQUE0QixDQUFDOztBQUUzRixNQUFNLE9BQU8sY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLGdCQUFnQixDQUFDOzs7O0FBRWxFLG1DQU1DOzs7SUFMQywrQkFBd0I7Ozs7O0lBQ3hCLHFEQUEwQjs7Ozs7O0lBQzFCLDBEQUFxQzs7Ozs7SUFDckMsd0RBQThCOzs7O0lBQzlCLGdEQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFN0b3JhZ2VLZXkgfSBmcm9tICcuL2ludGVybmFscyc7XHJcblxyXG5leHBvcnQgY29uc3QgZW51bSBTdG9yYWdlT3B0aW9uIHtcclxuICBMb2NhbFN0b3JhZ2UsXHJcbiAgU2Vzc2lvblN0b3JhZ2VcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOZ3hzU3RvcmFnZVBsdWdpbk9wdGlvbnMge1xyXG4gIC8qKlxyXG4gICAqIEtleSBmb3IgdGhlIHN0YXRlIHNsaWNlIHRvIHN0b3JlIGluIHRoZSBzdG9yYWdlIGVuZ2luZS5cclxuICAgKi9cclxuICBrZXk/OiB1bmRlZmluZWQgfCBTdG9yYWdlS2V5O1xyXG5cclxuICAvKipcclxuICAgKiBTdG9yYWdlIGVuZ2luZSB0byB1c2UuIERlYXVsdHMgdG8gbG9jYWxTdG9yYWdlIGJ1dCBjYW4gcHJvdmlkZVxyXG4gICAqXHJcbiAgICogc2Vzc2lvblN0b3JhZ2Ugb3IgY3VzdG9tIGltcGxlbWVudGF0aW9uIG9mIHRoZSBTdG9yYWdlRW5naW5lIGludGVyZmFjZVxyXG4gICAqL1xyXG4gIHN0b3JhZ2U/OiBTdG9yYWdlT3B0aW9uO1xyXG5cclxuICAvKipcclxuICAgKiBNaWdyYXRpb24gc3RyYXRlZ2llcy5cclxuICAgKi9cclxuICBtaWdyYXRpb25zPzoge1xyXG4gICAgLyoqXHJcbiAgICAgKiBWZXJzaW9uIHRvIGtleSBvZmYuXHJcbiAgICAgKi9cclxuICAgIHZlcnNpb246IG51bWJlciB8IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCB0byBtaWdyYXRlIHRoZSBwcmV2aW91cyBzdGF0ZS5cclxuICAgICAqL1xyXG4gICAgbWlncmF0ZTogKHN0YXRlOiBhbnkpID0+IGFueTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEtleSB0byBtaWdyYXRlLlxyXG4gICAgICovXHJcbiAgICBrZXk/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBLZXkgZm9yIHRoZSB2ZXJzaW9uLiBEZWZhdWx0cyB0byAndmVyc2lvbicuXHJcbiAgICAgKi9cclxuICAgIHZlcnNpb25LZXk/OiBzdHJpbmc7XHJcbiAgfVtdO1xyXG5cclxuICAvKipcclxuICAgKiBTZXJhaWxpemVyIGZvciB0aGUgb2JqZWN0IGJlZm9yZSBpdHMgcHVzaGVkIGludG8gdGhlIGVuZ2luZS5cclxuICAgKi9cclxuICBzZXJpYWxpemU/KG9iajogYW55KTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiBEZXNlcmlhbGl6ZXIgZm9yIHRoZSBvYmplY3QgYmVmb3JlIGl0cyBwdWxsZWQgb3V0IG9mIHRoZSBlbmdpbmUuXHJcbiAgICovXHJcbiAgZGVzZXJpYWxpemU/KG9iajogYW55KTogYW55O1xyXG5cclxuICAvKipcclxuICAgKiBNZXRob2QgdG8gYWx0ZXIgb2JqZWN0IGJlZm9yZSBzZXJpYWxpemF0aW9uLlxyXG4gICAqL1xyXG4gIGJlZm9yZVNlcmlhbGl6ZT8ob2JqOiBhbnksIGtleTogc3RyaW5nKTogYW55O1xyXG5cclxuICAvKipcclxuICAgKiBNZXRob2QgdG8gYWx0ZXIgb2JqZWN0IGFmdGVyIGRlc2VyaWFsaXphdGlvbi5cclxuICAgKi9cclxuICBhZnRlckRlc2VyaWFsaXplPyhvYmo6IGFueSwga2V5OiBzdHJpbmcpOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBOR1hTX1NUT1JBR0VfUExVR0lOX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ05HWFNfU1RPUkFHRV9QTFVHSU5fT1BUSU9OJyk7XHJcblxyXG5leHBvcnQgY29uc3QgU1RPUkFHRV9FTkdJTkUgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1NUT1JBR0VfRU5HSU5FJyk7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JhZ2VFbmdpbmUge1xyXG4gIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xyXG4gIGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBhbnk7XHJcbiAgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsOiBhbnkpOiB2b2lkO1xyXG4gIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiB2b2lkO1xyXG4gIGNsZWFyKCk6IHZvaWQ7XHJcbn1cclxuIl19