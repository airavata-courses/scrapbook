{"version":3,"file":"snack-bar-container.d.ts","sources":["snack-bar-container.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { AriaLivePoliteness } from '@angular/cdk/a11y';\nimport { Platform } from '@angular/cdk/platform';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, DomPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, NgZone, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { MatSnackBarConfig } from './snack-bar-config';\n/**\n * Internal interface for a snack bar container.\n * @docs-private\n */\nexport interface _SnackBarContainer {\n    snackBarConfig: MatSnackBarConfig;\n    _onAnnounce: Subject<any>;\n    _onExit: Subject<any>;\n    _onEnter: Subject<any>;\n    enter: () => void;\n    exit: () => Observable<void>;\n    attachTemplatePortal: <C>(portal: TemplatePortal<C>) => EmbeddedViewRef<C>;\n    attachComponentPortal: <T>(portal: ComponentPortal<T>) => ComponentRef<T>;\n}\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nexport declare class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy, _SnackBarContainer {\n    private _ngZone;\n    private _elementRef;\n    private _changeDetectorRef;\n    private _platform;\n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig;\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n    private readonly _announceDelay;\n    /** The timeout for announcing the snack bar's content. */\n    private _announceTimeoutId;\n    /** Whether the component has been destroyed. */\n    private _destroyed;\n    /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n    _portalOutlet: CdkPortalOutlet;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n    readonly _onAnnounce: Subject<void>;\n    /** Subject for notifying that the snack bar has exited from view. */\n    readonly _onExit: Subject<void>;\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    readonly _onEnter: Subject<void>;\n    /** The state of the snack bar animations. */\n    _animationState: string;\n    /** aria-live value for the live region. */\n    _live: AriaLivePoliteness;\n    /**\n     * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\n     * JAWS does not read out aria-live message.\n     */\n    _role?: 'status' | 'alert';\n    constructor(_ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _platform: Platform, \n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig);\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal: (portal: DomPortal) => void;\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event: AnimationEvent): void;\n    /** Begin animation of snack bar entrance into view. */\n    enter(): void;\n    /** Begin animation of the snack bar exiting from view. */\n    exit(): Observable<void>;\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy(): void;\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    private _completeExit;\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    private _applySnackBarClasses;\n    /** Asserts that no content is already attached to the container. */\n    private _assertNotAttached;\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    private _screenReaderAnnounce;\n}\n"]}