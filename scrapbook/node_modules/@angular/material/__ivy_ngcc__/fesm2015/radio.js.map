{"version":3,"file":"radio.js","sources":["../../../../../../src/material/radio/radio.ts","../../../../../../src/material/radio/radio-module.ts","../../../../../../src/material/radio/public-api.ts","../../../../../../src/material/radio/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: _MatRadioButtonBase,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_RADIO_GROUP =\n    new InjectionToken<_MatRadioGroupBase<_MatRadioButtonBase>>('MatRadioGroup');\n\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatRadioGroupBase<T extends _MatRadioButtonBase> implements AfterContentInit,\n  ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: T | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  abstract _radios: QueryList<T>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: T | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [\n    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n    {provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup},\n  ],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup extends _MatRadioGroupBase<MatRadioButton> {\n  @ContentChildren(forwardRef(() => MatRadioButton), {descendants: true})\n  _radios: QueryList<MatRadioButton>;\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nabstract class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  abstract disabled: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n@Directive()\nexport abstract class _MatRadioButtonBase extends _MatRadioButtonMixinBase implements OnInit,\n  AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._setDisabled(coerceBooleanProperty(value));\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(radioGroup: _MatRadioGroupBase<_MatRadioButtonBase>,\n              elementRef: ElementRef,\n              protected _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              public _animationMode?: string,\n              private _providerOverride?: MatRadioDefaultOptions,\n              tabIndex?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    if (tabIndex) {\n      this.tabIndex = coerceNumberProperty(tabIndex, 0);\n    }\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions, origin?: FocusOrigin): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n\n      if (this.checked) {\n        this.radioGroup.selected = this;\n      }\n\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Sets the disabled state and marks for check if a change occurred. */\n  protected _setDisabled(value: boolean) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be removed since it causes some a11y issues (see #21266).\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonBase {\n  constructor(@Optional() @Inject(MAT_RADIO_GROUP) radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              changeDetector: ChangeDetectorRef,\n              focusMonitor: FocusMonitor,\n              radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                  providerOverride?: MatRadioDefaultOptions,\n              @Attribute('tabindex') tabIndex?: string) {\n    super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher,\n          animationMode, providerOverride, tabIndex);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './radio-module';\nexport * from './radio';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}