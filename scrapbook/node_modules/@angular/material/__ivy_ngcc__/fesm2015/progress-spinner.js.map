{"version":3,"file":"progress-spinner.js","sources":["../../../../../../src/material/progress-spinner/progress-spinner.ts","../../../../../../src/material/progress-spinner/progress-spinner-module.ts","../../../../../../src/material/progress-spinner/public-api.ts","../../../../../../src/material/progress-spinner/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Platform, _getShadowRoot} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** A string that is used for setting the spinner animation-name CSS property */\n  _spinnerAnimationLabel: string;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n    this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n    this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  _getCircleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  _getViewBox() {\n    const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  _getStrokeCircumference(): number {\n    return 2 * Math.PI * this._getCircleRadius();\n  }\n\n  /** The dash offset of the svg circle. */\n  _getStrokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._getStrokeCircumference() * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._getStrokeCircumference() * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  _getCircleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    const strokeCircumference = this._getStrokeCircumference();\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n  }\n\n  /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n  private _getSpinnerAnimationLabel(): string {\n    // The string of a float point number will include a period ‘.’ character,\n    // which is not valid for a CSS animation-name.\n    return this.diameter.toString().replace('.', '_');\n  }\n\n  static ngAcceptInputType_diameter: NumberInput;\n  static ngAcceptInputType_strokeWidth: NumberInput;\n  static ngAcceptInputType_value: NumberInput;\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nexport class MatProgressSpinnerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './progress-spinner-module';\nexport {\n  MatProgressSpinner,\n  MatSpinner,\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,\n  ProgressSpinnerMode,\n  MatProgressSpinnerDefaultOptions,\n  MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n} from './progress-spinner';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}