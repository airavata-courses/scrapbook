/**
* @license Angular v11.0.0-next.6+162.sha-170af07
* (c) 2010-2020 Google LLC. https://angular.io/
* License: MIT
*/
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Zone.__load_patch("jsonp",(n,o,s)=>{o[o.__symbol__("jsonp")]=function a(c){if(!c||!c.jsonp||!c.sendFuncName)return;const e=function(){};[c.successFuncName,c.failedFuncName].forEach(o=>{o&&(n[o]?s.patchMethod(n,o,o=>(a,c)=>{const e=n[s.symbol("jsonTask")];return e?(e.callback=o,e.invoke.apply(a,c)):o.apply(a,c)}):Object.defineProperty(n,o,{configurable:!0,enumerable:!0,get:function(){return function(){const a=n[s.symbol("jsonpTask")],c=n[s.symbol(`jsonp${o}callback`)];return a?(c&&(a.callback=c),n[s.symbol("jsonpTask")]=void 0,a.invoke.apply(this,arguments)):c?c.apply(this,arguments):null}},set:function(n){this[s.symbol(`jsonp${o}callback`)]=n}}))}),s.patchMethod(c.jsonp,c.sendFuncName,a=>(c,l)=>{n[s.symbol("jsonpTask")]=o.current.scheduleMacroTask("jsonp",e,{},n=>a.apply(c,l),e)})}});