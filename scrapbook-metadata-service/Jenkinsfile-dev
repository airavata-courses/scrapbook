node {
  def app
  def registry = 'chiragindi/scrapbook-metadata-service'
  def registryCredential = 'chiragindi'
  def file = 'scrapbook-metadata-service'
  def masterIP = '149.165.171.246'
  def deploymentName = 'sb-metadata'
  def user = 'ubuntu'

  stage('Clone repository') {
    /* Checking out to the repository */
    checkout scm
  }

  stage('Prepare repository') {
    /* Copying the subdir to the parent */
    sh "cp -a ./scrapbook-metadata-service/. ."
    /* Removing sub directory */
    sh "rm -rf ./scrapbook-metadata-service"
  }

  stage('Build repository') {
    /* Installing application dependencies */
		sh 'pip3 install -r requirements.txt'
	}

	stage('Test repository') {
        /* Testing the application */
		sh 'python3 -m pytest -v'
	}

    stage('Building image') {
        /* Building the docker image */
        app = docker.build(registry)
	} 

    stage('Pushing image') {
        /* Pushing image to docker hub */
        docker.withRegistry('https://registry.hub.docker.com', registryCredential ) {
            app.push("latest")
        }
	}
    stage('Deleting local image') {
        /* Removing locally built images to clear up space */
        sh "docker rmi ${registry}:latest"
        sh "docker rmi registry.hub.docker.com/${registry}:latest"
        sh 'docker ps -q -f status=exited | xargs --no-run-if-empty docker rm'
        sh 'docker images -q -f dangling=true | xargs --no-run-if-empty docker rmi'
    }
    stage('Deploy on Kubernetes'){
      /* SSH-ing to Kubernetes master and applying config */
      sshagent(["kube-ssh"]) {
      sh "scp ${file}.dev.yaml ${user}@${masterIP}:/home/${user}"
      sh "ssh ${user}@${masterIP} kubectl delete deployments --ignore-not-found=true ${deploymentName}"
      sh "ssh ${user}@${masterIP} kubectl apply -f ${file}.dev.yaml"
    }
    }
}
