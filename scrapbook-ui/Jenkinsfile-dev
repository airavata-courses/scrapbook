node {
    def app
    def registry = 'chiragindi/scrapbook-ui'
    def registryCredential = 'docker-hub-credentials'
    def file = 'scrapbook-ui'
    def masterIP = '149.165.171.246'
    def deploymentName = 'sb-ui'
    def user = 'ubuntu'

    stage('Clone repository') {
        /* Checking out to the repository */
        checkout scm
    }

    stage('Prepare repository') {
        /* Copying the subdir to the parent */
        sh "cp -a ./${file}/. ."
        /* Removing sub directory */
        sh "rm -rf ./${file}"
    }

    stage('Build repository') {
        /* Installing application dependencies */
		sh 'npm install'
	}

	stage('Test repository') {
        /* Testing the application */
		sh 'npm test'
	}

    stage('Building image') {
        /* Building the docker image */
        app = docker.build(registry)
	} 

    stage('Pushing image') {
        /* Pushing image to docker hub */
        docker.withRegistry('https://registry.hub.docker.com', registryCredential ) {
            app.push("latest")
        }
	}

    stage('Deleting local image') {
        /* Removing locally built images to clear up space */
        sh "docker rmi ${registry}:latest"
        sh "docker rmi registry.hub.docker.com/${registry}:latest"
        sh 'docker ps -q -f status=exited | xargs --no-run-if-empty docker rm'
        sh 'docker images -q -f dangling=true | xargs --no-run-if-empty docker rmi'
    }

    stage('Deploy on Kubernetes'){
        /* SSH-ing to Kubernetes master and applying config */
        sshagent(["kube-ssh"]) {
            sh "scp ${file}.yaml ${user}@${masterIP}:/home/${user}"
            sh "ssh ${user}@${masterIP} kubectl delete deployments --ignore-not-found=true ${deploymentName}"
            sh "ssh ${user}@${masterIP} kubectl apply -f ${file}.yaml"
        }
    }
}